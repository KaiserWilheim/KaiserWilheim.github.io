<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>亚兰字母拼写英语</title>
    <url>/hebrew-english/</url>
    <content><![CDATA[<p>一种使用亚兰字母来拼写英语的方案。<br>（测试博客显示情况用）<br>𗼇𗟲</p>
<span id="more"></span>

<p>首先展示 Note 框，以便使用：</p>
<details class="note "><summary><p>Without Class</p>
</summary>

</details>

<details class="note default"><summary><p>Default</p>
</summary>

</details>

<details class="note primary"><summary><p>Primary</p>
</summary>

</details>

<details class="note info"><summary><p>Info</p>
</summary>

</details>

<details class="note success"><summary><p>Success</p>
</summary>

</details>

<details class="note warning"><summary><p>Warning</p>
</summary>

</details>

<details class="note danger"><summary><p>Danger</p>
</summary>

</details>

<p>然后是 Tabs：</p>
<div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><a href="#test-1"><i class="fa fa-heart"></i>第一页</a></li><li class="tab"><a href="#test-2">Page 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test-1"><p>这是第一个 Tab 。</p></div><div class="tab-pane" id="test-2"><p>Tab 语法里面的 <code>&lt;!--</code> 之后和 <code>--&gt;</code> 之前好像可以有空格。</p></div></div></div>

<div class="tabs" id="tabs-套-note"><ul class="nav-tabs"><li class="tab active"><a href="#tabs-套-note-1">无 Class</a></li><li class="tab"><a href="#tabs-套-note-2">default</a></li><li class="tab"><a href="#tabs-套-note-3">primary</a></li><li class="tab"><a href="#tabs-套-note-4">info</a></li><li class="tab"><a href="#tabs-套-note-5">success</a></li><li class="tab"><a href="#tabs-套-note-6">warning</a></li><li class="tab"><a href="#tabs-套-note-7">danger</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tabs-套-note-1"><details class="note "><summary><p>Without Class</p>
</summary>

</details></div><div class="tab-pane" id="tabs-套-note-2"><details class="note default"><summary><p>Default</p>
</summary>

</details></div><div class="tab-pane" id="tabs-套-note-3"><details class="note primary"><summary><p>Primary</p>
</summary>

</details></div><div class="tab-pane" id="tabs-套-note-4"><details class="note info"><summary><p>Info</p>
</summary>

</details></div><div class="tab-pane" id="tabs-套-note-5"><details class="note success"><summary><p>Success</p>
</summary>

</details></div><div class="tab-pane" id="tabs-套-note-6"><details class="note warning"><summary><p>Warning</p>
</summary>

</details></div><div class="tab-pane" id="tabs-套-note-7"><details class="note danger"><summary><p>Danger</p>
</summary>

</details></div></div></div>

<hr>
<h1 id="亚兰字母"><a href="#亚兰字母" class="headerlink" title="亚兰字母"></a>亚兰字母</h1><p>首先是元音。</p>
<p>&#x2F;ʌ&#x2F;-&gt;אֲ  &#x2F;æ&#x2F;-&gt;אֵ  &#x2F;α:&#x2F;-&gt;אַ</p>
<p>&#x2F;i&#x2F;-&gt;י  &#x2F;i:&#x2F;-&gt;יִ</p>
<p>&#x2F;u&#x2F;-&gt;ו  &#x2F;u:&#x2F;-&gt;וִ</p>
<p>&#x2F;e&#x2F;-&gt;אֶ  &#x2F;ə&#x2F;-&gt;ע  &#x2F;ə:&#x2F;-&gt;עִ</p>
<p>&#x2F;ɔ&#x2F;-&gt;אֳ  &#x2F;ɔ:&#x2F;-&gt;אָ</p>
<p>双元音直接组合即可。</p>
<p>&#x2F;ei&#x2F;-&gt;עֹ  &#x2F;ai&#x2F;-&gt;אַֹ  &#x2F;au&#x2F;-&gt;אַו  &#x2F;əu&#x2F;-&gt;עו  &#x2F;uə&#x2F;-&gt;וֶ  &#x2F;iə&#x2F;-&gt;יֶ  &#x2F;eə&#x2F;-&gt;עֶ  &#x2F;ɔi&#x2F;-&gt;אָֹ</p>
<p>然后是辅音。</p>
<p>&#x2F;k&#x2F;-&gt;ק  &#x2F;t&#x2F;-&gt;ט  &#x2F;p&#x2F;-&gt;פּ</p>
<p>&#x2F;g&#x2F;-&gt;ג  &#x2F;d&#x2F;-&gt;ד  &#x2F;b&#x2F;-&gt;בּ</p>
<p>&#x2F;s&#x2F;-&gt;ס  &#x2F;θ&#x2F;-&gt;ת  &#x2F;f&#x2F;-&gt;פ  &#x2F;ʃ&#x2F;-&gt;ש</p>
<p>&#x2F;z&#x2F;-&gt;ז  &#x2F;ð&#x2F;-&gt;דּ  &#x2F;v&#x2F;-&gt;ב  &#x2F;ʒ&#x2F;-&gt;שׁ</p>
<p>&#x2F;tʃ&#x2F;-&gt;טש  &#x2F;tr&#x2F;-&gt;טר  &#x2F;ts&#x2F;-&gt;צ</p>
<p>&#x2F;dʒ&#x2F;-&gt;דשׁ  &#x2F;dr&#x2F;-&gt;דר  &#x2F;dz&#x2F;-&gt;צּ</p>
<p>&#x2F;m&#x2F;-&gt;מ  &#x2F;n&#x2F;-&gt;נ  &#x2F;ŋ&#x2F;-&gt;נּ</p>
<p>&#x2F;h&#x2F;-&gt;ה  &#x2F;l&#x2F;-&gt;ל  &#x2F;r&#x2F;-&gt;ר</p>
<p>最后是半元音。</p>
<p>&#x2F;w&#x2F;-&gt;וּ  &#x2F;j&#x2F;-&gt;יּ</p>
<p>辅音中的כ与ח和元音中的אֻ没有用到，但我准备了适配其他语言的音素：</p>
<p>&#x2F;ç&#x2F;-&gt;כ  &#x2F;x&#x2F;-&gt;כּ  &#x2F;ʀ&#x2F;-&gt;ח  &#x2F;y&#x2F;-&gt;אֻ</p>
<p>还有重音符号：<br>&#x2F;ˈ&#x2F;-&gt;א֫<br>&#x2F;ˌ&#x2F;-&gt;אֽ ?</p>
<p>备注：</p>
<p>没想到tsadee没有办法类似שׁ这样向右上方加点，所以采用了中间加点的方式来使其可以打到电脑上。</p>
<p>示例：</p>
<p>原文：</p>
<p>To be, or not to be- that is the question:<br>Whether ‘tis nobler in the mind to suffer<br>The slings and arrows of outrageous fortune<br>Or to take arms against a sea of troubles,<br>And by opposing end them. To die- to sleep-<br>No more; and by a sleep to say we end<br>The heartache, and the thousand natural shocks<br>That flesh is heir to. ‘Tis a consummation<br>Devoutly to be wish’d. To die- to sleep.</p>
<p>音标：</p>
<p>[tuː] [biː]<strong>,</strong> [ɔː] [nɔt] [tuː] [biː]<strong>-</strong> [ðæt] [ɪz] [ðə] [ˈkwesʧən]<strong>:</strong><br>[ˈweðə] [tɪz] [ˈnəublər] [ɪn] [ðə] [maɪnd] [tuː] [ˈsʌfə]<br>[ðə] [slɪŋz] [ænd] [ˈærəuz] [ɔv] [autˈreɪʤəs] [ˈfɔːʧən]<br>[ɔː] [tuː] [teɪk] [ɑːmz] [əˈgenst] [ə] [siː] [ɔv] [ˈtrʌblz]<strong>,</strong><br>[ænd] [baɪ] [əˈpəuzɪŋ] [end] [ðem]<strong>.</strong> [tuː] [daɪ]<strong>-</strong> [tuː] [sliːp]<strong>-</strong><br>[nəu] [mɔː]<strong>;</strong> [ænd] [baɪ] [ə] [sliːp] [tuː] [seɪ] [wiː] [end]<br>[ðə] [ˈhɑːteɪk]<strong>,</strong> [ænd] [ðə] [ˈθauzənd] [ˈnæʧrəl] [ʃɔks]<br>[ðæt] [fleʃ] [ɪz] [eə] [tuː]<strong>.</strong> [tɪz] [ə] [ˌkɔnsəˈmeɪʃən]<br>[dɪˈvautli] [tuː] [biː] [wɪʃt]<strong>.</strong> [tuː] [daɪ]<strong>-</strong> [tuː] [sliːp]<strong>.</strong></p>
<p>转写：</p>
<p dir="rtl">
טוִ בּיִ, אָ נֳט טוִ בּיִ- דֵּט יז דּע ק֫וֶּסטשען: <br>
וֶּ֫דּע טיז נ֫עובּלער ין דּע מַֹנד טוִ סֲ֫פע <br>
דּע סלינּז אֵנד אֵ֫רעֻז אֳב אַוטר֫עֹדצּעס פָ֫טשען <br>
אָ טוִ טעֹק אַמז ע֫גֶנסט אֶ סיִ אֳב ט֫רֲבּלז, <br>
אֵנּד בַֹּ עפּ֫עֻזיןּ אֶנד דֶּם. טוִ דַֹ- טוִ סליִףּ- <br>
נעו מָ; אֵנד בַֹּ ע סליִפּ טוִ סעֹ וּיִ אֶנד <br>
דּע הַ֫טעֹק, דּע תַ֫וזענד נֵ֫טשרעל שָקס <br>
דֵּט פלֶש יז עֶ טוִ. טיז ע קֳנסעמ֫עֹשען <br>
דיבַ֫וטלי טוִ בּיִ וּישט. טוִ דַֹ- טוִ סליִףּ.
</p>

<p><del>犹太史诗（确信）</del></p>
<h1 id="阿拉伯字母"><a href="#阿拉伯字母" class="headerlink" title="阿拉伯字母"></a>阿拉伯字母</h1><p>既然阿拉伯字母与希伯来字母同根同源，那么……</p>
<p>（tbc）</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>博客索引</title>
    <url>/suoyin/</url>
    <content><![CDATA[<p>文章的索引。</p>
<span id="more"></span>

<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>$\rm{OI}$ 与 $\rm{Ch}$ 的交汇，能迸发出怎样的火花呢？</p>
<p>为了便于<del>我自己及时更新</del>读者们挑选合适的文章，下面有几个符号，可以帮助读者大人们挑选。<del>（我有读者吗？）</del></p>
<ul>
<li>$\color[rgb]{0,0.5,1}{\sharp}$ 代表已经写完了</li>
<li>$\color[rgb]{0.067,0.270588,0.078431}{\natural}$ 表示长期更新</li>
<li>$\color[rgb]{1,0,0}{\flat}$ 表示我这个蒟蒻还没写完</li>
<li><strong>止まれ</strong> 表示我因某种原因暂停更新<del>也就是咕咕咕了</del></li>
<li>$\color[rgb]{0.5,0.4,0.4}{φ}$ 表示我虽然写完了，但是某些地方还需要完善，完善完了会换成 $\color[rgb]{0,0.5,1}{\sharp}$ 标志。</li>
<li>$\color[rgb]{1,1,0.0625}{\aleph}$ 表示我这个蒟蒻觉得我自己写的很好。</li>
</ul>
<p>阅读博客的时候，我们经常会看到一些板子。</p>
<p>如果某一个板子是我自己写的，在它的附近会有一个 $\color[rgb]{1,1,0.0625}{φ}$ 的标志。这些板子保证运行的正确性。大胆褐，不会有事的（指运行结果）。<br>如果某一个板子不是我写的，在它的附近会有一个 $\blacktriangleright$ 指向它的出处。这些板子不保证运行的正确性。使用之前请斟酌。 </p>
<p>最后一次维护：20221109</p>
<h1 id="OI"><a href="#OI" class="headerlink" title="OI"></a>OI</h1><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><p>数学是算法的基石。</p>
<ul>
<li><p><a href="/maths/mathematics">杂项整理</a> $\color[rgb]{0.067,0.270588,0.078431}{\natural}$<br>写不成博客的东西都在这里。</p>
</li>
<li><p><a href="/maths/eular-and-m%C3%B6bius">欧拉与莫比乌斯</a> $\color[rgb]{0,0.5,1}{\sharp}$<br>包含欧拉函数、欧拉定理、莫比乌斯函数与莫比乌斯反演。</p>
</li>
<li><p><a href="/maths/special-numbers">特殊的数</a> $\color[rgb]{1,0,0}{\flat}$<br>包含斯特林数等。</p>
</li>
<li><p><a href="/maths/fourier-transform">傅里叶变换</a> $\color[rgb]{0.5,0.4,0.4}{φ}$<br>包含傅里叶变换和快速傅里叶变换，附带一些复数和单位根的知识。</p>
</li>
<li><p><a href="/maths/lagrange-interpolation">拉格朗日插值</a> $\color[rgb]{0.5,0.4,0.4}{φ}$<br>包括拉格朗日插值。</p>
</li>
<li><p><a href="/maths/matrix/">矩阵</a> $\color[rgb]{0,0.5,1}{\sharp}$<br>矩阵相关运算，以及矩阵在OI中的运用。</p>
</li>
</ul>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>算法是程序的基础。</p>
<ul>
<li><p><a href="/OI/scanning-line">扫描线</a> $\color[rgb]{0,0.5,1}{\sharp}$<br>一种用来求矩形面积并的算法。</p>
</li>
<li><p><a href="/OI/heavy-path-decomposition">树链剖分</a> $\color[rgb]{0,0.5,1}{\sharp}$<br>树剖。</p>
</li>
<li><p><a href="/OI/difference-constraint/">差分约束</a> $\color[rgb]{0,0.5,1}{\sharp}$<br>一种用来解决不等式组求解的算法。</p>
</li>
<li><p><a href="/OI/2-sat">2-SAT</a> $\color[rgb]{0,0.5,1}{\sharp}$<br>rt，2-SAT问题。</p>
</li>
<li><p><a href="/OI/dsu-on-tree">DSU on tree</a> $\color[rgb]{0.5,0.4,0.4}{φ}$<br>DSU on tree，又称树上启发式合并。</p>
</li>
</ul>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>啊这……这里该怎么写……</p>
<ul>
<li><p><a href="/OI/tree-array">树状数组</a> $\color[rgb]{0,0.5,1}{\sharp}$<br>如题，树状数组。</p>
</li>
<li><p><a href="/OI/segment-tree">线段树</a> $\color[rgb]{0,0.5,1}{\sharp}$<br>线段树相关内容，包括动态开点线段树、可持久化权值线段树等。</p>
</li>
<li><p><a href="/OI/scapegoat-tree/">替罪羊树</a> $\color[rgb]{0,0.5,1}{\sharp}$<br>一种利用暴力重构维护平衡的平衡树。</p>
</li>
<li><p><a href="/OI/splay/">Splay</a> $\color[rgb]{0,0.5,1}{\sharp}$<br>一种基于旋转的平衡树。</p>
</li>
<li><p><a href="/OI/kd-tree/">K-D Tree</a> $\color[rgb]{0.5,0.4,0.4}{φ}$<br>一种维护高维空间信息的数据结构。</p>
</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串的处理和询问一直是OI中比较重要的内容。</p>
<ul>
<li><p><a href="/OI/kmp/">KMP算法与前缀函数</a> $\color[rgb]{0,0.5,1}{\sharp}$<br>一种用来快速查询模式串在文本串中的出现次数的算法。</p>
</li>
<li><p><a href="/OI/trie-and-AK-avtomat">Trie与AC自动机</a> $\color[rgb]{0,0.5,1}{\sharp}$<br> Trie与AC自动机，同时包括可持久化Trie。</p>
</li>
<li><p><a href="/OI/suffix-avtomat">后缀自动机</a> $\color[rgb]{0,0.5,1}{\sharp}$<br>如题，后缀自动机。</p>
</li>
</ul>
<h2 id="图论相关"><a href="#图论相关" class="headerlink" title="图论相关"></a>图论相关</h2><p>是时候把图论的东西单独拿出来了。</p>
<ul>
<li><p><a href="/OI/flow">网络流</a> $\color[rgb]{0.5,0.4,0.4}{φ}$<br>如题，网络流相关内容。</p>
</li>
<li><p><a href="/OI/bipartie-graph">二分图</a> $\color[rgb]{0.5,0.4,0.4}{φ}$<br>如题，二分图相关内容。</p>
</li>
<li><p><a href="/OI/virtual-tree">虚树</a> $\color[rgb]{0.5,0.4,0.4}{φ}$<br>虚树。</p>
</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>题解还会有没写完的吗？</p>
<p>给自己看的：<br>注意提交地址顺序：<br>Luogu (CF AT) LibreOJ AcWing UOJ BZOJ</p>
<ul>
<li><a href="/solutions/solution-p1084">Luogu P1084</a> [NOIP2012 提高组] 疫情控制</li>
<li><a href="/solutions/solution-p1117">Luogu P1117</a> [NOI2016] 优秀的拆分</li>
<li><a href="/solutions/solution-p1712">Luogu P1712</a> [NOI2016] 区间</li>
<li><a href="/solutions/solution-p1954">Luogu P1954</a> [NOI2010] 航空管制</li>
<li><a href="/solutions/solution-p1999">Luogu P1999</a> 高维正方体</li>
<li><a href="/solutions/solution-p2375">Luogu P2375</a> [NOI2014] 动物园</li>
<li><a href="/solutions/solution-p2414">Luogu P2414</a> [NOI2011] 阿狸的打字机</li>
<li><a href="/solutions/solution-p2446">Luogu P2446</a> [SDOI2010] 大陆争霸</li>
<li><a href="/solutions/solution-p2469">Luogu P2469</a> [SDOI2010] 星际竞速</li>
<li><a href="/solutions/solution-p2480">Luogu P2480</a> [SDOI2010] 古代猪文</li>
<li><a href="/solutions/solution-p2698">Luogu P2698</a> [USACO12MAR] Flowerpot</li>
<li><a href="/solutions/solution-p2824">Luogu P2824</a> [HEOI2016&#x2F;TJOI2016] 排序</li>
<li><a href="/solutions/solution-p2860">Luogu P2860</a> [USACO06JAN] Redundant Paths G</li>
<li><a href="/solutions/solution-p2906">Luogu P2906</a> [USACO08OPEN] Cow Neighborhoods G</li>
<li><a href="/solutions/solution-p2986">Luogu P2986</a> [USACO10MAR] Great Cow Gathering G</li>
<li><a href="/solutions/solution-p3047">Luogu P3047</a> [USACO12FEB] Nearby Cows G</li>
<li><a href="/solutions/solution-p3050">Luogu P3050</a> [USACO12MAR] Large Banner</li>
<li><a href="/solutions/solution-p3174">Luogu P3174</a> [HAOI2009] 毛毛虫</li>
<li><a href="/solutions/solution-p3188">Luogu P3188</a> [HNOI2007] 梦幻岛宝珠</li>
<li><a href="/solutions/solution-p3243">Luogu P3243</a> [HNOI2015] 菜肴制作</li>
<li><a href="/solutions/solution-p3452">Luogu P3452</a> [POI2007] BIU-Offices</li>
<li><a href="/solutions/solution-p3462">Luogu P3462</a> [POI2007] 砝码 ODW</li>
<li><a href="/solutions/solution-p3540">Luogu P3540</a> [POI2012] 超夸克 Squarks</li>
<li><a href="/solutions/solution-p3574">Luogu P3574</a> [POI2014] FAR-FarmCraft</li>
<li><a href="/solutions/solution-p3586">Luogu P3586</a> [POI2015] Logistyka</li>
<li><a href="/solutions/solution-p3589">Luogu P3589</a> [POI2015] Kurs szybkiego czytania</li>
<li><a href="/solutions/solution-p3644">Luogu P3644</a> [APIO2015] 巴邻旁之桥</li>
<li><a href="/solutions/solution-p3645">Luogu P3645</a> [APIO2015] 雅加达的摩天楼</li>
<li><a href="/solutions/solution-p3707">Luogu P3707</a> [SDOI2017] 相关分析</li>
<li><a href="/solutions/solution-p3773">Luogu P3773</a> [CTSC2017] 吉夫特</li>
<li><a href="/solutions/solution-p4135">Luogu P4135</a> 作诗</li>
<li><a href="/solutions/solution-p4336">Luogu P4336</a> [SHOI2016] 黑暗前的幻想乡</li>
<li><a href="/solutions/solution-p4568">Luogu P4568</a> [JLOI2011] 飞行路线</li>
<li><a href="/solutions/solution-p4588">Luogu P4588</a> [TJOI2018] 数学计算</li>
<li><a href="/solutions/solution-p4643">Luogu P4643</a> [国家集训队] 阿狸和桃子的游戏</li>
<li><a href="/solutions/solution-p4654">Luogu P4654</a> [CEOI2017] Mousetrap</li>
<li><a href="/solutions/solution-p5024">Luogu P5024</a> [NOIP2018 提高组] 保卫王国</li>
<li><a href="/solutions/solution-p5290">Luogu P5290</a> [十二省联考 2019] 春节十二响</li>
<li><a href="/solutions/solution-p5752">Luogu P5752</a> [NOI1999] 棋盘分割</li>
<li><a href="/solutions/solution-p5994">Luogu P5994</a> [PA2014] Kuglarz</li>
<li><a href="/solutions/solution-p6419">Luogu P6419</a> [COCI2014-2015#1] Kamp</li>
<li><a href="/solutions/solution-p7619">Luogu P7619</a> [COCI2011-2012#2] RASPORED</li>
<li><a href="/solutions/solution-p8021">Luogu P8021</a> [ONTAK2015] Bajtman i Okrągły Robin</li>
<li><a href="/solutions/solution-p8025">Luogu P8025</a> [ONTAK2015] Związek Harcerstwa Bajtockiego</li>
<li><a href="/solutions/solution-p8161">Luogu P8161</a> [JOI 2022 Final] 自学（自習）</li>
<li><a href="/solutions/solution-p8162">Luogu P8162</a> [JOI 2022 Final] 选举</li>
<li><a href="/solutions/solution-p8251">Luogu P8251</a> [NOI Online 2022 提高组] 丹钓战</li>
<li><a href="/solutions/solution-p8255">Luogu P8255</a> [NOI Online 2022 入门组] 数学游戏</li>
<li><a href="/solutions/solution-p8365">Luogu P8365</a> [LNOI2022] 吃</li>
</ul>
<ul>
<li><a href="/solutions/solution-cf436e">CF436E</a> Cardboard Box</li>
<li><a href="/solutions/solution-cf920f">CF920F</a> SUM and REPLACE</li>
<li><a href="/solutions/solution-cf949c">CF949C</a> Data Center Maintenance</li>
<li><a href="/solutions/solution-cf1288f">CF1288F</a> Red-Blue Graph</li>
<li><a href="/solutions/solution-cf1530e">CF1530E</a> Minimax</li>
</ul>
<ul>
<li><a href="/solutions/solution-cf102428f">CF Gym 102428F</a> Fabricating Sculptures</li>
<li><a href="/solutions/solution-cf102428j">CF Gym 102428J</a> Jumping Grasshoper</li>
<li><a href="/solutions/solution-cf102452e">CF Gym 102452E</a> Erasing Numbers</li>
<li><a href="/solutions/solution-cf103861l">CF Gym 103861L</a> Fenwick Tree</li>
</ul>
<ul>
<li><a href="/solutions/solution-abc253f">ABC253F</a> Operations on a Matrix</li>
</ul>
<ul>
<li><a href="/solutions/solution-l2759">LibreOJ #2759</a> 蜜袋鼯（フクロモモンガ）</li>
<li><a href="/solutions/solution-l2980">LibreOJ #2980</a> 「THUSCH 2017」 大魔法师</li>
<li><a href="/solutions/solution-l3277">LibreOJ #3277</a> 「JOISC 2020 Day3」 星座 3</li>
</ul>
<ul>
<li><a href="/solutions/solution-se636">S2OJ #636</a> 购物</li>
<li><a href="/solutions/solution-se1497">S2OJ #1497</a> 树</li>
<li><a href="/solutions/solution-se1498">S2OJ #1498</a> 换乘</li>
<li><a href="/solutions/solution-se1541">S2OJ #1541</a> 单调栈</li>
<li><a href="/solutions/solution-se1550">S2OJ #1550</a> 假冒泡排序</li>
<li><a href="/solutions/solution-se1586">S2OJ #1586</a> 口粮输送</li>
</ul>
<h2 id="比赛记录"><a href="#比赛记录" class="headerlink" title="比赛记录"></a>比赛记录</h2><p>校内OJ的模拟赛记录。</p>
<ul>
<li><a href="/contestrecords/2022-wh-8">2022寒假模拟赛8</a> $\color[rgb]{0,0.5,1}{\sharp}$</li>
</ul>
<h1 id="其他学习笔记"><a href="#其他学习笔记" class="headerlink" title="其他学习笔记"></a>其他学习笔记</h1><p>其他东西的学习笔记。</p>
<ul>
<li><p><a href="/notes/game-strategy">博弈论学习笔记</a> <strong>止まれ</strong><br>如题，博弈论学习笔记。<br>咕了。</p>
</li>
<li><p><a href="/notes/linar-algebra">线性代数</a> <strong>止まれ</strong><br>包含行列式和矩阵的运算。<br>同样咕了。</p>
</li>
</ul>
<hr>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTJrNHkxMTczaQ==">展开</span><br>再见。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>网络流 做题记录</title>
    <url>/solution-flow/</url>
    <content><![CDATA[<p>网络流相关做题记录。</p>
<span id="more"></span>

<p>（我为什么要造孽放代码上来……）</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="网络流24题"><a href="#网络流24题" class="headerlink" title="网络流24题"></a>网络流24题</h2><ul>
<li>LibreOJ #6000 &#x2F; Luogu P2756 飞行员配对方案问题 <a href="/solution-flow/#%E9%A3%9E%E8%A1%8C%E5%91%98%E9%85%8D%E5%AF%B9%E6%96%B9%E6%A1%88%E9%97%AE%E9%A2%98">&gt;</a></li>
<li>LibreOJ #6001 &#x2F; Luogu P2762 太空飞行计划问题 <a href="/solution-flow/#%E5%A4%AA%E7%A9%BA%E9%A3%9E%E8%A1%8C%E8%AE%A1%E5%88%92%E9%97%AE%E9%A2%98">&gt;</a></li>
<li>LibreOJ #6004 &#x2F; Luogu P3254 圆桌问题 <a href="/solution-flow/#%E5%9C%86%E6%A1%8C%E9%97%AE%E9%A2%98">&gt;</a></li>
<li>LibreOJ #6007 &#x2F; Luogu P2774 方格取数问题 <a href="/solution-flow/#%E6%96%B9%E6%A0%BC%E5%8F%96%E6%95%B0%E9%97%AE%E9%A2%98">&gt;</a></li>
<li>LibreOJ #6008 &#x2F; Luogu P1251 餐巾计划问题 <a href="/solution-flow/#%E9%A4%90%E5%B7%BE%E8%AE%A1%E5%88%92%E9%97%AE%E9%A2%98">&gt;</a></li>
<li>LibreOJ #6011 &#x2F; Luogu P4015 运输问题 <a href="/solution-flow/#%E8%BF%90%E8%BE%93%E9%97%AE%E9%A2%98">&gt;</a></li>
<li>LibreOJ #6012 &#x2F; Luogu P4014 分配问题 <a href="/solution-flow/#%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98">&gt;</a></li>
<li>LibreOJ #6013 &#x2F; Luogu P4016 负载平衡问题 <a href="/solution-flow/#%E8%B4%9F%E8%BD%BD%E5%B9%B3%E8%A1%A1%E9%97%AE%E9%A2%98">&gt;</a></li>
<li>LibreOJ #6015 &#x2F; Luogu P2754 [CTSC1999] 家园 <a href="/solution-flow/#CTSC1999-%E5%AE%B6%E5%9B%AD">&gt;</a></li>
<li>LibreOJ #6122 &#x2F; Luogu P2770 航空路线问题 <a href="/solution-flow/#%E8%88%AA%E7%A9%BA%E8%B7%AF%E7%BA%BF%E9%97%AE%E9%A2%98">&gt;</a></li>
<li>LibreOJ #6224 &#x2F; Luogu P4012 深海机器人问题 <a href="/solution-flow/#%E6%B7%B1%E6%B5%B7%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%97%AE%E9%A2%98">&gt;</a></li>
</ul>
<h2 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h2><ul>
<li>Luogu P1343 地震逃生 <a href="/solution-flow/#%E5%9C%B0%E9%9C%87%E9%80%83%E7%94%9F">&gt;</a></li>
<li>Luogu P2472 [SCOI2007] 蜥蜴 <a href="/solution-flow/#SCOI2007-%E8%9C%A5%E8%9C%B4">&gt;</a></li>
<li>Luogu P2891 [USACO07OPEN] Dining G <a href="/solution-flow/#USACO07OPEN-Dining-G">&gt;</a><br>Luogu P1402 酒店之王 ^<br>Luogu P1231 教辅的组成 ^</li>
<li>Luogu P3701 主主树 <a href="/solution-flow/#%E4%B8%BB%E4%B8%BB%E6%A0%91">&gt;</a></li>
<li>LibreOJ #2239 &#x2F; Luogu P3163 [CQOI2014]危桥 <a href="/solution-flow/#CQOI2014-%E5%8D%B1%E6%A1%A5">&gt;</a></li>
</ul>
<h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><ul>
<li>Luogu P7368 [USACO05NOV] Asteroids G <a href="/solution-flow/#USACO05NOV-Asteroids-G">&gt;</a></li>
</ul>
<h2 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h2><ul>
<li>Luogu P3931 SAC E#1 - 一道难题 Tree <a href="/solution-flow/#SAC-E-1-%E4%B8%80%E9%81%93%E9%9A%BE%E9%A2%98-Tree">&gt;</a></li>
<li>Luogu P1345 [USACO5.4] 奶牛的电信Telecowmunication <a href="/solution-flow/#USACO5-4-%E5%A5%B6%E7%89%9B%E7%9A%84%E7%94%B5%E4%BF%A1Telecowmunication">&gt;</a></li>
<li>Luogu P2057 [SHOI2007] 善意的投票 &#x2F; [JLOI2010] 冠军调查 <a href="/solution-flow/#SHOI2007-%E5%96%84%E6%84%8F%E7%9A%84%E6%8A%95%E7%A5%A8-x2F-JLOI2010-%E5%86%A0%E5%86%9B%E8%B0%83%E6%9F%A5">&gt;</a></li>
<li>Luogu P4177 [CEOI2008] order <a href="/solution-flow/#CEOI2008-order">&gt;</a></li>
<li>Luogu P1361 小M的作物 <a href="/solution-flow/#%E5%B0%8FM%E7%9A%84%E4%BD%9C%E7%89%A9">&gt;</a></li>
</ul>
<h2 id="费用流"><a href="#费用流" class="headerlink" title="费用流"></a>费用流</h2><ul>
<li>Luogu P1004 [NOIP2000 提高组] 方格取数 <a href="/solution-flow/#NOIP2000-%E6%8F%90%E9%AB%98%E7%BB%84-%E6%96%B9%E6%A0%BC%E5%8F%96%E6%95%B0">&gt;</a></li>
<li>Luogu P1006 [NOIP2008 提高组] 传纸条 <a href="/solution-flow/#NOIP2008-%E6%8F%90%E9%AB%98%E7%BB%84-%E4%BC%A0%E7%BA%B8%E6%9D%A1">&gt;</a></li>
<li>Luogu P2457 [SDOI2006] 仓库管理员的烦恼 <a href="/solution-flow/#SDOI2006-%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86%E5%91%98%E7%9A%84%E7%83%A6%E6%81%BC">&gt;</a></li>
<li>Luogu P2517 [HAOI2010] 订货 <a href="/solution-flow/#HAOI2010-%E8%AE%A2%E8%B4%A7">&gt;</a></li>
<li>Luogu P2153 [SDOI2009] 晨跑 <a href="/solution-flow/#SDOI2009-%E6%99%A8%E8%B7%91">&gt;</a></li>
</ul>
<h2 id="上下界网络流"><a href="#上下界网络流" class="headerlink" title="上下界网络流"></a>上下界网络流</h2><ul>
<li>Luogu P5258 [JSOI2013] 旅行时的困惑 <a href="/solution-flow/#JSOI2013-%E6%97%85%E8%A1%8C%E6%97%B6%E7%9A%84%E5%9B%B0%E6%83%91">&gt;</a></li>
</ul>
<h1 id="网络流24题-1"><a href="#网络流24题-1" class="headerlink" title="网络流24题"></a>网络流24题</h1><h2 id="飞行员配对方案问题"><a href="#飞行员配对方案问题" class="headerlink" title="飞行员配对方案问题"></a>飞行员配对方案问题</h2><p>英国飞行员连向源点，外籍飞行员连向汇点，可以搭配的英国飞行员连向外籍飞行员。边权均为 $1$。<br>跑一遍最大流即可。</p>
<p>最后枚举所有边，如果当前边连接一个外籍飞行员和一个英国飞行员，且其容量为空，那么这条边就被流经过，说明这条边代表的一堆飞行员可以配对，输出两端点即可。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p2000-p2999/p2756/p2756.cpp"><code>Luogu</code></a><br><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Libre%20OJ/6000/l6000.cpp"><code>Libre OJ</code></a></p>
</div>

<h2 id="太空飞行计划问题"><a href="#太空飞行计划问题" class="headerlink" title="太空飞行计划问题"></a>太空飞行计划问题</h2><p>这是一个最大权闭合子图问题。我们可以将这个转化为一个最小割问题。<br>讲解可以见我博客的<a href="/OI/flow/#%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%AD%90%E5%9B%BE%E9%97%AE%E9%A2%98">另外一篇文章</a>。</p>
<p>其中，实验就是正权点，仪器就是负权点，建图连边即可。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p2000-p2999/p2762/p2762.cpp"><code>Luogu</code></a></p>
</div>

<h2 id="圆桌问题"><a href="#圆桌问题" class="headerlink" title="圆桌问题"></a>圆桌问题</h2><p>因为我们想要让坐在一个桌子旁的人两两不属于同一个代表团，那就可以转化为让一个代表团的人分散在不同的桌子上。</p>
<p>于是我们将所有的代表团和桌子都抽象成点。<br>我们从源点向每个代表团的点连一条容量为代表团人数的边，再从每一张桌子向汇点连一条容量为桌子容量的边。</p>
<p>然后我们将每一个代表团都向每一个桌子连一条容量为1的边。</p>
<p>最后跑最大流，得到的得数就是最多能给多少个人安排上桌子。</p>
<p>如果有人没有安排上桌子，那么久直接输出0即可。<br>如果所有人都安排上桌子了，就搜一下来确定方案。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3254/p3254.cpp"><code>Luogu</code></a><br><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Libre%20OJ/6004/l6004.cpp"><code>Libre OJ</code></a></p>
</div> 

<h2 id="方格取数问题"><a href="#方格取数问题" class="headerlink" title="方格取数问题"></a>方格取数问题</h2><p>我们一旦取走一个数，那么这个数周围的四个格子里面的数就不能被取走了。</p>
<p>那我们可以转化一下，不考虑<strong>允许</strong>，而是考虑<strong>禁止</strong>。</p>
<p>那我们就可以按照权值和最小的原则来得到一种方案并取出，剩下的就是我们所要求的方案。</p>
<p>那我们按照国际象棋棋盘的染色方案进行染色，即对于位于第 $i$ 行 $j$ 列的点，如果 $i+j$ 为奇数则向源点连一条边权为当前格子权值的边，并同时向周围四个点连一条边权为无限大的边；否则连向汇点，边权为当前格子权值。</p>
<p>由于最小割最大流定理，我们在求出最大流之后，拿所有格子的权值总和减去最大流即使我们要的答案。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p2000-p2999/p2774/p2774.cpp"><code>Luogu</code></a><br><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Libre%20OJ/6007/l6007.cpp"><code>Libre OJ</code></a></p>
</div>

<h2 id="餐巾计划问题"><a href="#餐巾计划问题" class="headerlink" title="餐巾计划问题"></a>餐巾计划问题</h2><p>我们这样连边：</p>
<ol>
<li>源点与餐厅输出连一条容量为当天用量，费用为0的边；</li>
<li>汇点与餐厅输入连一条容量为当天用量，费用为0的边；</li>
<li>餐厅输出与下一日的餐厅输出连一条容量为无限，费用为0的边。</li>
<li>源点与餐厅输入连一条容量为无限，费用为 $p$ 的边；</li>
<li>餐厅输出与 $n$ 天后的餐厅输入连一条容量为无限，费用为 $s$ 的边，代表快洗部；</li>
<li>餐厅输出与 $m$ 天后的餐厅输入连一条容量为无限，费用为 $f$ 的边，代表慢洗部。</li>
</ol>
<p>然后跑一个最小费用最大流即可，最终的费用就是答案。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p1000-p1999/p1251/p1251.cpp"><code>Luogu</code></a><br><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Libre%20OJ/6008/l6008.cpp"><code>Libre OJ</code></a></p>
</div>

<h2 id="运输问题"><a href="#运输问题" class="headerlink" title="运输问题"></a>运输问题</h2><p>费用流。</p>
<p>源点向仓库连边，仓库向商店连边，商店向汇点连边。</p>
<p>跑费用流即可。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p4000-p4999/p4015/p4015.cpp"><code>Luogu</code></a><br><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Libre%20OJ/6011/l6011.cpp"><code>Libre OJ</code></a></p>
</div>

<h2 id="分配问题"><a href="#分配问题" class="headerlink" title="分配问题"></a>分配问题</h2><p>费用流。</p>
<p>源点向工人连边，工人向工件连边，工件向汇点连边。</p>
<p>跑费用流即可。</p>
<p>和上一道题惊人地相似。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p4000-p4999/p4014/p4014.cpp"><code>Luogu</code></a><br><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Libre%20OJ/6012/l6012.cpp"><code>Libre OJ</code></a></p>
</div>

<h2 id="负载平衡问题"><a href="#负载平衡问题" class="headerlink" title="负载平衡问题"></a>负载平衡问题</h2><p>首先每个点向左右两边的点连边，费用为1，然后：</p>
<p>如果这个点多于平均值，那就向源点连其权值与平均值之差；<br>如果这个点少于平均值，那就像汇点连其权值与平均值之差。</p>
<p>这两种边的费用为0。</p>
<p>然后跑费用流即可。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p4000-p4999/p4016/p4016.cpp"><code>Luogu</code></a><br><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Libre%20OJ/6013/l6013.cpp"><code>Libre OJ</code></a></p>
</div>

<h2 id="CTSC1999-家园"><a href="#CTSC1999-家园" class="headerlink" title="[CTSC1999]家园"></a>[CTSC1999]家园</h2><p>首先我们需要判断一下地球和月球是否联通，这个只需要使用并查集即可。</p>
<p>然后我们枚举天数，直到某一天转移的人达到要求了之后就停止循环，并输出天数。</p>
<p>我们在枚举的时候，逐天按照飞船的行进路线加边。因为每一次飞船都需要花一天时间来走一次的路程，所以我们每一条边都是从某一天的某一个站点到下一天的下一个站点，容量为飞船容量。</p>
<p>然后每一天跑最大流，得到的最大流结果就是当天以及之前所有天的转移人数总和。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p2000-p2999/p2754/p2754.cpp"><code>Luogu</code></a><br><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Libre%20OJ/6015/l6015.cpp"><code>Libre OJ</code></a></p>
</div>

<h2 id="航空路线问题"><a href="#航空路线问题" class="headerlink" title="航空路线问题"></a>航空路线问题</h2><p>题目要求我们找到一条从起点城市到重点城市再回到起点城市的路径，并要求除起点城市外每一个点只能经过一次。</p>
<p>我们考虑拆点，除起点和终点容量为2之外容量均为1，然后按照飞机航线来建边，容量为1。</p>
<p>当然这样我们是不可能得出最大经过的城市个数的，我们需要用到费用流的手段。</p>
<p>我们将每个城市拆点的时候建的边的费用赋为1，其他的边赋为0。</p>
<p>然后我们跑费用流即可。</p>
<p>然后题目还让我们输出一个可能的方案。</p>
<p>于是我们就直接大暴搜就可以了。<br>还要注意起点终点直通的情况。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p2000-p2999/p2770/p2770.cpp"><code>Luogu</code></a><br><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Libre%20OJ/6122/l6122.cpp"><code>Libre OJ</code></a></p>
</div>

<h2 id="深海机器人问题"><a href="#深海机器人问题" class="headerlink" title="深海机器人问题"></a>深海机器人问题</h2><p>这个就是很明显的最大费用最大流，我们只需要把生物标本的价值抽象成为费用即可。</p>
<p>按照题目要求，我们每一个点都向上和向右分别建两条边，一条代表采集了生物标本，容量为1价值为c，另外一条代表已经被采集完了，容量为无限价值为0。</p>
<p>把所有的可以出发的坐标连向源点，容量为 $k$；所有的可以作为目的地的坐标连向汇点，容量为 $r$。</p>
<p>然后跑一遍费用流即可。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p4000-p4999/p4012/p4012.cpp"><code>Luogu</code></a><br><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Libre%20OJ/6224/l6224.cpp"><code>Libre OJ</code></a></p>
</div>

<h1 id="最大流-1"><a href="#最大流-1" class="headerlink" title="最大流"></a>最大流</h1><h2 id="地震逃生"><a href="#地震逃生" class="headerlink" title="地震逃生"></a>地震逃生</h2><p>最大流板子，只不过在跑之前先要用并查集来判断一下连通性。<br>当然也可以直接跑，判断最大流量是否为0。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p1000-p1999/p1343/p1343.cpp"><code>Luogu</code></a></p>
</div>

<h2 id="SCOI2007-蜥蜴"><a href="#SCOI2007-蜥蜴" class="headerlink" title="[SCOI2007] 蜥蜴"></a>[SCOI2007] 蜥蜴</h2><p>这道题在做之前得首先解决<strong>平面距离</strong>是什么。</p>
<p>根据实际测试，本题中的<strong>平面距离</strong>其实指的就是<strong>欧几里得距离</strong>。</p>
<p>由于其 $d \leq 4$，我们就可以直接暴力枚举。</p>
<p>下面是一张图，代表着我们这道题某个点在不同的 $d$ 时需要连边的范围：</p>
<p><img src="https://s2.loli.net/2022/04/21/5IUqMYC4FfsnXSD.png" alt="flowsolu1.png"></p>
<p>然后处理题目所给的信息：<br>石柱的高度就是当前点的容量，所以我们需要拆点；<br>跳出地图外面了就代表可以连向汇点；<br>有蜥蜴就代表着可以连向源点。</p>
<p>然后就跑最大流，得到的是可以逃离地图的蜥蜴个数的最大值，输出蜥蜴总数与其之差即可。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p2000-p2999/p2472/p2472.cpp"><code>Luogu</code></a></p>
</div>

<h2 id="USACO07OPEN-Dining-G"><a href="#USACO07OPEN-Dining-G" class="headerlink" title="[USACO07OPEN] Dining G"></a>[USACO07OPEN] Dining G</h2><p>P1402、P2891和P1231实质上是一类问题，都是三种物品进行匹配，求最大匹配个数。</p>
<p>对于这类问题，我们的思路就是拆点。</p>
<p>将匹配的主体（比如P2891的奶牛、P1402的顾客和P1231的练习册）拆成两个点，中间连一条容量为1的边，然后两个点分别与剩下的两种物品连边，然后跑最大流即可。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p2000-p2999/p2891/p2891.cpp"><code>Luogu P2891</code></a><br><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p1000-p1999/p1402/p1402.cpp"><code>Luogu P1402</code></a><br><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p1000-p1999/p1231/p1231.cpp"><code>Luogu P1231</code></a></p>
</div>

<h2 id="主主树"><a href="#主主树" class="headerlink" title="主主树"></a>主主树</h2><p>经典题目。</p>
<p>我们需要思考一下为什么图中箭头指向的是输的一方。<br>加入我们按照这个思路，每一个byx的人都向能够赢的诗乃的人连一条边，这就是一个新的图。<br>我们想要找到最大的边集，使得边集内的边两两不共用端点，最后我们求出的边集的大小就是byx可以赢的场数。</p>
<p>那我们考虑对这张图建立网络流模型。<br>我们首先把原图中的所有边建立起来，容量为1。<br>然后把所有byx的人连向源点，所有诗乃的人连向汇点。这样每一个流量就代表byx能赢的一场。<br>然后我们需要限制点的访问次数，我们可以拆点。<br>然后就跑最大流即可。</p>
<p>注意我们需要将得到的最大流量与比赛的场次取<code>min</code>再输出，最后才是真正能赢的场数。（没比赛你赢个什么）</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3701/p3701.cpp"><code>Luogu</code></a></p>
</div>

<h2 id="CQOI2014-危桥"><a href="#CQOI2014-危桥" class="headerlink" title="[CQOI2014] 危桥"></a>[CQOI2014] 危桥</h2><p>往返算经过两次，所以我们可以将危桥所说的“经过两次”转化为“往返一次”。</p>
<p>然后，危桥只能往返一次，普通桥能往返无数次，两个人分别想要往返 $a_n$ 次和 $b_n$ 次。</p>
<p>于是我们就可以将一次往返当做一单位的流来走，$a_1$ 和 $b_1$ 连源点，$a_2$ 和 $b_2$ 连汇点，最大流就是能往返的最大次数。</p>
<p>但是这样会忽略一些问题：从 $a_2$ 流出的流到底是来自 $a_1$ 的还是来自 $b_1$的？同理，从 $b_2$ 流出的流到底是来自 $a_1$ 的还是来自 $b_1$的？</p>
<p>我们考虑反向跑一遍，只不过只针对于Bob。<br>这次我们将$a_1$ 和 $b_2$ 连源点，$a_2$ 和 $b_1$ 连汇点，最大流看是否还与上一次相等。</p>
<p>如果两次均等于 $a_n+b_n$ 的话，那么两人的愿望就可以达成，否则就不可以。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3163/p3163.cpp"><code>Luogu</code></a></p>
</div>

<h1 id="二分图-1"><a href="#二分图-1" class="headerlink" title="二分图"></a>二分图</h1><h2 id="USACO05NOV-Asteroids-G"><a href="#USACO05NOV-Asteroids-G" class="headerlink" title="[USACO05NOV] Asteroids G"></a>[USACO05NOV] Asteroids G</h2><p>我们如果想要消除一颗小行星，那么其肯定在列上或者行上有布置过一次武器，或者两者兼有。</p>
<p>那么，每一颗小行星就可以对应二分图上的一条边，我们就需要找一个点集，使得所有边的两个端点之一在这个点集中。</p>
<p>这便是二分图最小点覆盖。</p>
<p>我们就可以用二分图最大匹配来解决这个问题。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p6000%2B/p7368/p7368.cpp"><code>Luogu</code></a></p>
</div>

<h1 id="最小割-1"><a href="#最小割-1" class="headerlink" title="最小割"></a>最小割</h1><h2 id="SAC-E-1-一道难题-Tree"><a href="#SAC-E-1-一道难题-Tree" class="headerlink" title="SAC E#1 - 一道难题 Tree"></a>SAC E#1 - 一道难题 Tree</h2><p>这道题要求我们求出使任何叶子结点与根节点不连通的最小代价。</p>
<p>我们可以转化一下。</p>
<p>我们可以知道，如果我们要求任何叶子结点都与根节点不连通，那么从根节点到每一个叶子结点的路径上面一定被割开过边。<br>我们还需要让费用最小，那么我们最多每条路径上割开一条边。</p>
<p>于是我们就可以用最小割来求解。让根节点连上源点，所有叶子结点连上汇点，然后跑最小割即可。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3931/p3931.cpp"><code>Luogu</code></a></p>
</div>

<h2 id="USACO5-4-奶牛的电信-Telecowmunication"><a href="#USACO5-4-奶牛的电信-Telecowmunication" class="headerlink" title="[USACO5.4] 奶牛的电信 Telecowmunication"></a>[USACO5.4] 奶牛的电信 Telecowmunication</h2><p>题目要求我们求出，我们需要删除多少个点才能使题目给出的两个点之间不连通。</p>
<p>我们之前只做过割边的题目，没有做过这种题目，考虑将其转化一下。<br>方法很简单，就是拆点。</p>
<p>我们可以将删除点改为删除连接被拆的点的两部分的边，这样就可以转化为割边的问题了。</p>
<p>然后建图，原图中的边容量均为无限大，拆点得到的边的容量均为1即可。</p>
<p>然后跑最小割。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p1000-p1999/p1345/p1345.cpp"><code>Luogu</code></a></p>
</div>

<h2 id="SHOI2007-善意的投票-x2F-JLOI2010-冠军调查"><a href="#SHOI2007-善意的投票-x2F-JLOI2010-冠军调查" class="headerlink" title="[SHOI2007] 善意的投票 &#x2F; [JLOI2010] 冠军调查"></a>[SHOI2007] 善意的投票 &#x2F; [JLOI2010] 冠军调查</h2><p>题目告诉我们，我们需要求出来冲突数量。</p>
<p>我们先分析冲突的产生。</p>
<p>冲突之所以会产生，其根本原因就在于与自己至少一个好朋友的政见不合。他们要么违反自己的意愿而产生一单位的冲突，要么违反好朋友的意愿而产生一单位的冲突。</p>
<p>其中第一种冲突完全是由于第二种冲突而产生的。<br>如果这里没有好朋友关系，那么就不会有好朋友之间政见不合而导致的冲突了。</p>
<p>而第二种冲突呢？<br>来源是一对好朋友之间要求与对方持相同政见。</p>
<p>如何解决第二种冲突？<br>简单，不再持自己的立场或者不再为好朋友关系即可。</p>
<p>于是我们就可以连边了。</p>
<p>每一对好朋友之间连双向边，然后每一个小朋友向自己的立场（源点与汇点之间自己看着选）连一条边。容量均为1。</p>
<p>然后跑最小割即可。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p2000-p2999/p2057/p2057.cpp"><code>Luogu</code></a></p>
</div>

<h2 id="CEOI2008-order"><a href="#CEOI2008-order" class="headerlink" title="[CEOI2008] order"></a>[CEOI2008] order</h2><p>如果不考虑租的情况的话就是最大权闭合子图问题了。</p>
<p>因为工作和租用的机器是一一对应的，所以我们也可以用一条边来代表这个关系，而这种边也得可以是被割掉的才可以。<br>那么我们可以把工作和对应的机器连起来，边权是租用的费用。<br>这种边割断了之后也可以使源点和汇点不连通，割掉了代表我们对于这个工作是租用机器的。<br>其余的还是正常的最大权闭合子图问题，只不过原图中的边已经建好了，我们就不需要再建了。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p4000-p4999/p4177/p4177.cpp"><code>Luogu</code></a></p>
</div>

<h2 id="小M的作物"><a href="#小M的作物" class="headerlink" title="小M的作物"></a>小M的作物</h2><p>如果我们不考虑组合之间的关系，只考虑每一个作物种在哪里，我们可以把每一个作物抽象成点，然后从源点连向该点，容量为 $a_i$，该点连向汇点，容量为 $b_i$。<br>以这张图跑最小割的话，我们可以知道</p>
<h1 id="费用流-1"><a href="#费用流-1" class="headerlink" title="费用流"></a>费用流</h1><h2 id="NOIP2000-提高组-方格取数"><a href="#NOIP2000-提高组-方格取数" class="headerlink" title="[NOIP2000 提高组] 方格取数"></a>[NOIP2000 提高组] 方格取数</h2><p>每一个点向其右侧和下侧的两个点分别连边，同时每个点拆点，容量为2，边权为方格中的数。<br>$(0,0)$ 连向源点，$(n,n)$ 连向汇点。</p>
<p>然后跑最大费用最大流即可。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p1000-p1999/p1004/p1004.cpp"><code>Luogu</code></a></p>
</div>

<h2 id="NOIP2008-提高组-传纸条"><a href="#NOIP2008-提高组-传纸条" class="headerlink" title="[NOIP2008 提高组] 传纸条"></a>[NOIP2008 提高组] 传纸条</h2><p>每一个点向其右侧和下侧的两个点分别连边，同时每个点拆点，容量为1，边权为好感度。<br>$(0,0)$ 连向源点，$(n,m)$ 连向汇点。</p>
<p>然后跑最大费用最大流即可。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p1000-p1999/p1006/p1006.cpp"><code>Luogu</code></a></p>
</div>

<h2 id="SDOI2006-仓库管理员的烦恼"><a href="#SDOI2006-仓库管理员的烦恼" class="headerlink" title="[SDOI2006] 仓库管理员的烦恼"></a>[SDOI2006] 仓库管理员的烦恼</h2><p>我们想要找到的是一种方案，使得每一种货物能够以最小的代价各自被分到一个单独的仓库里面。<br>但是题目并不需要我们输出具体的方案，只需要我们输出最小代价。</p>
<p>因为本仓库的物品再运回到本仓库是不会产生代价的，所以我们每一个仓库运送货物的代价都可以表示为运进该仓库的商品的代价之和，这等于所有该类商品的数量之和减去当前仓库内的该种商品总数。</p>
<p>于是我们建立 $2n$ 个点，一半代表仓库，一半代表货物种类。<br>每一个仓库都向所有的货物种类连一条容量为1，费用为所有该类商品的数量之和减去当前仓库内的该种商品总数。</p>
<p>然后跑费用流即可。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p2000-p2999/p2457/p2457.cpp"><code>Luogu</code></a></p>
</div>

<h2 id="HAOI2010-订货"><a href="#HAOI2010-订货" class="headerlink" title="[HAOI2010] 订货"></a>[HAOI2010] 订货</h2><p>我们考虑以每月仓库的状态来建立节点。</p>
<p>每个节点都从源点连一条边，容量为无限，费用为 $d_i$，代表进货；<br>同时每个节点都向汇点连一条边，容量为 $U_i$，费用为0，代表供应市场；<br>每个不是最后一个节点的节点都向其下一个节点连一条边，容量为 $S$，代价为 $m$，代表存贮。</p>
<p>最后跑最小费用最大流即可。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p2000-p2999/p2517/p2517.cpp"><code>Luogu</code></a></p>
</div>

<h2 id="SDOI2009-晨跑"><a href="#SDOI2009-晨跑" class="headerlink" title="[SDOI2009] 晨跑"></a>[SDOI2009] 晨跑</h2><p>将十字路口抽象为节点，将街道抽象为边。<br>这道题就不需要我们另建源汇点了，题目中已经给出了源汇点。</p>
<p>一个周期就相当于是从源点到汇点的一个流，路程就相当于是其代价。</p>
<p>于是就建边，跑最小费用最大流。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p2000-p2999/p2153/p2153.cpp"><code>Luogu</code></a></p>
</div>

<h1 id="上下界网络流-1"><a href="#上下界网络流-1" class="headerlink" title="上下界网络流"></a>上下界网络流</h1><h2 id="JSOI2013-旅行时的困惑"><a href="#JSOI2013-旅行时的困惑" class="headerlink" title="[JSOI2013] 旅行时的困惑"></a>[JSOI2013] 旅行时的困惑</h2><p>如果我们想让任意两个岛屿都可以互相到达，那么我们需要在原有的树的基础上面建立一棵有双向边的树。</p>
<p>这样我们就可以建立一个上下界网络流的模型。<br>建立原树边的反向边，容量范围为 $[1,\infty]$。</p>
<p>因为一条交通线路从任意一个点开始或结束都可以，所以每一个点都从源点连边，向汇点连边，容量均为 $\infty$。</p>
<p>然后就跑有源汇有上下界最小流即可。</p>
<div class="note success"><p><a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p5000-p5999/p5258/p5258.cpp"><code>Luogu</code></a></p>
</div>

<!-- <div class="note success"></div> -->
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>感谢</title>
    <url>/thanks/</url>
    <content><![CDATA[<p>感谢 <strong>CloudySky</strong> 和 <strong>宝硕</strong> 的大力支持。</p>
<p>没有他们就没有这个博客。</p>
<p>十分感谢。</p>
<p><img src="https://img.shields.io/github/repo-size/kaiserwilheim/kaiserwilheim.github.io?style=for-the-badge" alt="GitHub repo size"></p>
<!--
祭 陈靖元的爱情
2022.3-2022.6.29
-->
]]></content>
  </entry>
  <entry>
    <title>2-SAT 问题</title>
    <url>/OI/2-sat/</url>
    <content><![CDATA[<p>一种奇怪的问题。</p>
<span id="more"></span>

<p>2-SAT问题的名字可以拆成两部分：2和SAT。</p>
<h1 id="SAT？"><a href="#SAT？" class="headerlink" title="SAT？"></a>SAT？</h1><p>SAT是Satisfiability【可满足性】的简称。</p>
<p>解释一下，就是，我们有若干个需要赋值的布尔变量，要求对这些变量进行赋值，使得这些变量的值满足一组布尔方程。</p>
<p>举个例子：</p>
<p>宝硕需要讲解一个题目，他需要就着代码讲题，所以代码需要让每一个人看懂，并尽量满足每一个人的代码习惯。<br>听的人有三个：KaiserWilheim、Johnsonloy、JeffZhao。现在他们提出了一些要求，如下：</p>
<ul>
<li><strong>KaiserWilheim</strong>要求代码满足下列条件之一：<ul>
<li>使用bits库 ($a$)</li>
<li>不使用<code>#define int long long</code> ($\neg b$) </li>
<li>大括号换行 ($c$)</li>
</ul>
</li>
<li><strong>Johnsonloy</strong>要求代码满足下列条件之一：<ul>
<li>使用bits库 ($a$)</li>
<li>使用<code>#define int long long</code> ($b$) </li>
<li>大括号换行 ($c$)</li>
</ul>
</li>
<li><strong>JeffZhao</strong>要求代码满足下列条件之一：<ul>
<li>不使用bits库 ($\neg a$)</li>
<li>不使用<code>#define int long long</code> ($\neg b$) </li>
<li>大括号不换行 ($\neg c$)</li>
</ul>
</li>
</ul>
<p>我们可以将三种条件分别设为 $a$，$b$，$c$，变量前加 $\neg$ 表示对当前要求表示否定。<br>那么上述要求可以变为 $(a \lor \neg b \lor c)\land(a \lor b \lor c)\land(\neg a \lor \neg b \lor \neg c)$。其中 $\lor$ 表示或，$\land$ 表示与。<br>现在我们需要为 $abc$ 三个变量赋值，满足三个人的要求。</p>
<p>怎么处理呢？</p>
<p><strong>暴力</strong>。</p>
<p>因为SAT问题已经被证明为了<strong>NPC（NP完全）</strong>问题，只能暴力做。</p>
<h1 id="2-SAT？"><a href="#2-SAT？" class="headerlink" title="2-SAT？"></a>2-SAT？</h1><p>那么2-SAT又是一种什么东西？<br>为什么我们需要把2-SAT单独拎出来？</p>
<p>2-SAT，就是每一个同学只有两个条件。<br>上面的问题就可以叫做3-SAT。<br>假如说Wilheim和Johnson一致决定将Jeff放在火刑架上使得Jeff放弃了大括号不换行，那么我们的问题就剩下了两个，要求就变为了 $(a \lor \neg b)\land(a \lor b)\land(\neg a \lor \neg b)$。</p>
<p>然后，宝硕就决定按照使用bits库和不使用<code>#define int long long</code>来作为讲题用的代码风格。</p>
<h1 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h1><p>我们怎么求解2-SAT问题呢？</p>
<p>使用强连通分量。</p>
<p>我们将每一个变量拆成两个点，记为 $x$ 与 $\neg x$。</p>
<p>对于每一个同学的要求 $(a \lor b)$，我们尝试将其转化为 $\neg a \to b \land \neg b \to a$。<br>因为我们需要使 $a$ 和 $b$ 中间至少有一个是真，那么我们一旦 $a$ 为假那么 $b$ 就一定为真，反之同理。</p>
<p>那么我们这样建图：</p>
<table>
<thead>
<tr>
<th align="center">式子</th>
<th align="center">建图</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$a \lor b$</td>
<td align="center">$\neg a \to b \land \neg b \to a$</td>
</tr>
<tr>
<td align="center">$\neg a \lor b$</td>
<td align="center">$a \to b \land \neg b \to \neg a$</td>
</tr>
<tr>
<td align="center">$a \lor \neg b$</td>
<td align="center">$\neg a \to \neg b \land b \to a$</td>
</tr>
<tr>
<td align="center">$\neg a \lor \neg b$</td>
<td align="center">$a \to \neg b \land b \to \neg a$</td>
</tr>
</tbody></table>
<p>上面的图就变成了这个样子：</p>
<p><img src="https://s2.loli.net/2022/06/28/ocKCIGR5FxYapAO.png" alt="2sat1.png"></p>
<p>我们可以发现，$a$ 和 $\neg b$ 在同一强连通分量内，同时 $\neg a$ 和 $b$ 也在同一强连通分量内。</p>
<p>在同一强连通分量内就代表着知道了一个数的值之后就可以推出其他所有变量的值，所以我们给同一个强连通分量内的变量取值是相同的。</p>
<p>那么我们就给 $a$ 和 $\neg b$ 都取真，那么就意味着 $a&#x3D;1,b&#x3D;0$。<br>当然我们也可以给 $\neg a$ 和 $b$ 取真，也是一个可行解。</p>
<p>习惯上，我们给缩点后的图排一个拓扑序，当 $x$ 所在强连通分量的拓扑序在 $\neg x$ 所在的强连通分量的拓扑序之后的话我们就给 $x$ 取真。</p>
<p>那么我们什么时候才没有可行解呢？</p>
<p>当且仅当 $x$ 与 $\neg x$ 在同一个强连通分量里面的时候。<br>这样 $x$ 需要同时取真和假两个值，整个方程组就无解了。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>用tarjan来求强联通分量就可以了。</p>
<p>tarjan同时还给缩点后的图排了一下序，就不需要我们再排拓扑序了。</p>
<p>洛谷例题：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQ3ODI=">https://www.luogu.com.cn/problem/P4782</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2000010</span>, M = <span class="number">4000010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[N], low[N], cnt;</span><br><span class="line"><span class="type">int</span> sta[N], tt;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> scc[N], sc, sz[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    low[p] = dfn[p] = ++cnt;</span><br><span class="line">    sta[++tt] = p, vis[p] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j);</span><br><span class="line">            low[p] = <span class="built_in">min</span>(low[p], low[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[j])</span><br><span class="line">        &#123;</span><br><span class="line">            low[p] = <span class="built_in">min</span>(low[p], dfn[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[p] == low[p])</span><br><span class="line">    &#123;</span><br><span class="line">        ++sc;</span><br><span class="line">        <span class="keyword">while</span>(sta[tt] != p)</span><br><span class="line">        &#123;</span><br><span class="line">            scc[sta[tt]] = sc;</span><br><span class="line">            sz[sc]++;</span><br><span class="line">            vis[sta[tt]] = <span class="literal">false</span>;</span><br><span class="line">            tt--;</span><br><span class="line">        &#125;</span><br><span class="line">        scc[sta[tt]] = sc;</span><br><span class="line">        sz[sc]++;</span><br><span class="line">        vis[sta[tt]] = <span class="literal">false</span>;</span><br><span class="line">        tt--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y, a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x, &amp;a, &amp;y, &amp;b);</span><br><span class="line">        <span class="built_in">add</span>(x + !a * n, y + b * n);</span><br><span class="line">        <span class="built_in">add</span>(y + !b * n, x + a * n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])<span class="built_in">tarjan</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(scc[i] == scc[i + n])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;IMPOSSIBLE&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;POSSIBLE&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(scc[i] &lt; scc[i + n])<span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;1 &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>二分图</title>
    <url>/OI/bipartite-graph/</url>
    <content><![CDATA[<p>二分图相关内容。</p>
<span id="more"></span>

<h1 id="什么是二分图"><a href="#什么是二分图" class="headerlink" title="什么是二分图"></a>什么是二分图</h1><p>二分图是一种特殊的图。</p>
<p>二分图的一个性质是，节点由两个集合组成，且两个集合的内部没有任何一条边。</p>
<p>换而言之，就是我们可以将二分图的两个集合中的所有节点分别染成两种不同的颜色（比如红色与蓝色），可以发现任意一条边都连接着两个不同颜色的点。</p>
<p>我们一般将二分图的两个集合分别放在我们的左边和右边，而边都是横向的。<del>（其实你分别叫这两个集合<font color="#ff0000">华约</font>和<font color="0000ff">北约</font>也没人抗议）</del></p>
<h2 id="我们如何判断一个图是二分图？"><a href="#我们如何判断一个图是二分图？" class="headerlink" title="我们如何判断一个图是二分图？"></a>我们如何判断一个图是二分图？</h2><p>根据二分图的定义，我们可以推断出来一个重要的定理：</p>
<p><strong>二分图没有奇数环。</strong></p>
<p>因为一个二分图的所有边都是横跨两个集合的，每次需要横跨偶数次才能回到起点所在的集合，故二分图没有奇数环。</p>
<p>我们可以利用这个性质对给定的图进行搜索，如果找到了奇数环，那么这个图就一定不是二分图，反之亦然。</p>
<hr>
<p>已知所有二分图相关的问题应该都可以通过转化成为网络流问题来求解，所以在这里我就不对传统的二分图相关算法进行讲解，如匈牙利算法。</p>
<p>二分图有关的问题见下面：</p>
<h1 id="二分图最大匹配"><a href="#二分图最大匹配" class="headerlink" title="二分图最大匹配"></a>二分图最大匹配</h1><h2 id="啥sha是最大匹配？"><a href="#啥sha是最大匹配？" class="headerlink" title="啥shà是最大匹配？"></a><ruby>啥<rt>shà</rt></ruby>是最大匹配？</h2><p>“任意两条边都没有公共端点”的边的集合被称为图的一组匹配。<br>在二分图中，包含变数最多的一组匹配被称为二分图的<strong>最大匹配</strong>。</p>
<p>对于任意一组匹配 $E$ ，属于 $E$ 的边被称为<strong>匹配边</strong>，不属于 $E$ 的边被称为<strong>非匹配边</strong>。匹配边的端点被称为<strong>匹配点</strong>，其他店被称为<strong>非匹配点</strong>。</p>
<h2 id="增广路"><a href="#增广路" class="headerlink" title="增广路"></a>增广路</h2><p>如果在二分图中存在一条连接两个非匹配点的路径 $path$，使得非匹配边与匹配边在 $path$ 上交替出现，那么我们称 $path$ 是 匹配 $E$ 的一条<strong>增广路</strong>，也称交错路。</p>
<p>增广路具有以下性质：</p>
<ol>
<li>长度为奇数。</li>
<li>路径上第奇数条边是非匹配边，第偶数条边是匹配边。</li>
</ol>
<p>利用以上性质，我们尝试将路径上所有边的状态取反，也就是原来的匹配边变成了非匹配边，原来的非匹配边变成了匹配边。<br>经过了这样的一个操作，我们新得到的边集 $E’$ 仍然是一组匹配，且匹配边的数量增加了1。</p>
<p>利用这样的一个操作，我们可以得到一个推论：</p>
<p><strong>二分图的一组匹配 $E$ 是最大匹配，当且仅当图中不存在 $E$ 的增广路。</strong></p>
<p><em>注意</em>：这里的增广路与网络流中的增广路概念不同。</p>
<h2 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h2><p>我们可以使用匈牙利算法，一种利用增广路来求解的算法。其时间复杂度为 $O(nm)$ 。</p>
<p>但是，我们可以使用Dinic来求解。Dinic比匈牙利算法要快（时间复杂度为 $O(m\sqrt{n})$），而且适用范围较匈牙利算法更广。</p>
<p>对于这样的一个问题，我们只需要将所有左边的点<del><font color="$ff0000">华约成员国</font></del>与源点<del><font color="#ff0000">苏联</font></del>连一条容量为1的边，再将所有右边的点<del><font color="#0000ff">北约成员国</font></del>与汇点<del><font color="#0000ff">美国</font></del>连一条容量为1的边。最后，把所有的原图中的边变为一条容量为1的边。</p>
<p>这张图的最大流就是原图的最大匹配数。</p>
<p>以<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMzODY=">Luogu P3386 【模板】二分图最大匹配</span>为例。<br>示例代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3386/p3386.cpp"><code>Luogu P3386</code></a></p>
<h2 id="与二分图最大匹配相关的概念"><a href="#与二分图最大匹配相关的概念" class="headerlink" title="与二分图最大匹配相关的概念"></a>与二分图最大匹配相关的概念</h2><h3 id="二分图最大独立集"><a href="#二分图最大独立集" class="headerlink" title="二分图最大独立集"></a>二分图最大独立集</h3><p>从图中选择最多的点，满足两两之间没有边相连。</p>
<p>在二分图中，这个就是去掉最大匹配后的剩余部分。</p>
<h3 id="二分图最小点覆盖"><a href="#二分图最小点覆盖" class="headerlink" title="二分图最小点覆盖"></a>二分图最小点覆盖</h3><p>从图中选择最少的点，满足每条边至少有一个端点被选上。</p>
<p>我们不难发现，点覆盖的补集其实是独立集。</p>
<p>在二分图中，最小点覆盖就是去掉最大独立集后的剩余部分，与最大匹配重合。</p>
<h1 id="二分图最大权匹配"><a href="#二分图最大权匹配" class="headerlink" title="二分图最大权匹配"></a>二分图最大权匹配</h1><p>如果我们给二分图上的边加上边权的话，我们就可以求边权和最大的匹配了。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们可以将其转换为费用流模型，将其按照最大匹配的建图方式建图，并给其中跨集合的边加上一个费用，求这个图的最大费用最大流。</p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>差分约束</title>
    <url>/OI/difference-constraint/</url>
    <content><![CDATA[<p>差分约束系统。</p>
<span id="more"></span>

<p>2022-03-30发布，<br>2022-06-03再修。</p>
<p>我们经常会遇到一些问题，就是给出一堆未知量，再给出一堆类似“某一个未知量比另一个未知量最多（最少）大（小）多少”的问题，让我们从这一团繁杂的毛钱中拎出一根线头来，以求得这个毛线团的一组可行解。</p>
<p>比如说下面这个东西：</p>
<p>$$<br>\begin{cases}<br>x_1 \geq x_2 - 10 \\<br>x_1 \leq x_3 - 20 \\<br>x_3 \leq x_2 + 10 \\<br>x_4 \leq x_3 - 10 \\<br>x_2 \leq x_4 - 10<br>\end{cases}<br>$$</p>
<p>我们就基本上无从下手。</p>
<p>这时候，我们就需要引入一个新的算法——<strong>差分约束</strong>。</p>
<p>差分约束通过将不等式的问题转化为最短路（或最长路）问题来求解。</p>
<h1 id="最短路？为什么？"><a href="#最短路？为什么？" class="headerlink" title="最短路？为什么？"></a>最短路？为什么？</h1><p>回忆我们学习最短路的时候学到的知识。</p>
<p>假设对于两个点 $a$ 和 $b$，如果其间有一条边长为 $w$ 的有向边 $a \to b$，那么它们的 $dis$ 一定满足 $dis[b] \leq dis[a] + w$。</p>
<p>我们如果将每一个未知量 $x_k$ 与每一个点的 $dis[i]$ 联系起来的话，那么我们就可以得到形如 $x_b \leq x_a + w$ 的一堆不等式。</p>
<p>而我们刚好需要这些不等式。</p>
<p>于是我们就可以将我们手中的不等式组转化为一堆边，并将其放到图里面，建成一个有向图。</p>
<p>最后得出的每一组合法的最短距离，都对应了一组不等式组的解。</p>
<p>我们首先把所有的式子转化为 $x_u \leq x_v + w$ 的形式，再从每一个 $v$ 向 $u$ 建一条边权为 $w$ 的有向边。</p>
<p>这个有向图可以有环，毕竟环是不影响我们的求值环节的。<br>但是它不能有负环。</p>
<p>比如说下面这一组边：</p>
<p>$$<br>\begin{cases}<br>x_2 \leq x_1 + 10 \\<br>x_3 \leq x_2 + 10 \\<br>x_1 \leq x_3 - 30<br>\end{cases}<br>$$</p>
<p>建到图上就是这个样子：</p>
<p><img src="https://s2.loli.net/2022/03/30/d9ltROoBAY178Uy.png" alt="diffcon1.png"></p>
<p>根据原始的不等式组，最终我们会得到 $x_1 \leq x_1 - 10$ 这样一个奇怪的式子，从而导致不等式组无解。</p>
<p>从图上看，这三条边构成了一个负环。</p>
<p>所以说，一个负环最终会导致出现一些奇怪的不等式，最终导致不等式组无解。<br>（当然，如果使用的是最长路的话就是正环）</p>
<p>那我们怎么判负环？（或者说正环）</p>
<p>SPFA！<br>（SPFA信徒狂喜）</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>但是我们光靠这些边实际上是不能得出最终解的。<br>很多情况下，这张图根本不联通。<br>但是这样的图还是可以找到至少一组可行解的。</p>
<p>所以我们还需要建一个超级源点，向每一个点连一条长度为0的边。</p>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>具体情况下，我们不仅有类似 $x_a \leq x_b + w$ 这样的式子，还有其他的一些奇奇怪怪的约束条件。</p>
<p>下面列出了一些常见的约束条件和解决办法：</p>
<table>
<thead>
<tr>
<th>约束条件</th>
<th>解决办法</th>
</tr>
</thead>
<tbody><tr>
<td>$x_a \leq w$</td>
<td>将源点到 $a$ 的边权从0改到 $w$。</td>
</tr>
<tr>
<td>$x_a \geq w$</td>
<td>从 $a$ 向源点连一条长为 $-w$ 的边。</td>
</tr>
<tr>
<td>$x_a &#x3D; x_b + w$</td>
<td>将其拆分为 $x_a \leq x_b + w$ 和 $x_b \leq x_a + (-w)$。</td>
</tr>
<tr>
<td>$x_a + x_b \leq w$</td>
<td>差分约束会寄。请注意一下题目中有没有可以利用的其他特殊性质。</td>
</tr>
</tbody></table>
<p>如果在一个不等式组的约束下（不等式组有解），想求出 $x_i − x_j$ 的最大值呢？<br>首先一定有 $x_i − x_j \leq j$ 到 $i$ 的”最短” 路 $\operatorname{dis}(j,i)$ 。因为我可以先走到 $j$ ，然后走“$j$ 到 $i$ 的”最短路””到 $i$ 。<br>然后我们证明 $x_i − x_j$ 可以取到这个值。<br>这相当于往不等式组中添加一个 $x_i − x_j \geq \operatorname{dis}(j,i)$ ，如果不等式组仍有解，$x_i − x_j$ 就能取到 $\operatorname{dis}(j,i)$ 。<br>这也相当于在图中添加一条边，从 $i$ 到 $j$ ，边权是 $−\operatorname{dis}(j,i)$ 。这样加边一定不会出现负环，因为 $\operatorname{dis}(j,i)$ 是 $j$ 到 $i$ 的最短路，要有负环的话就有别的路径长度 $&lt; \operatorname{dis}(j,i)$ 了。<br>如果要求 $x_i − x_j$ 的最小值，就是求 $x_j − x_i$ 的最大值的相反数，即 $−\operatorname{dis}(i,j)$。<br>“$x_i − x_j$ 的最小值”$\leq$“$x_i − x_j$ 的最大值”，对应了 $−\operatorname{dis}(i,j) \leq \operatorname{dis}(j,i)$ ，也就是 $\operatorname{dis}(i,j) + \operatorname{dis}(j,i) \geq 0$ ，也就对应了图中没有包含 $i,j$ 的负环。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>洛谷<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDU5NjA=">板子题</span></p>
<p>参考代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p5000-p5999/p5960/p5960.cpp"><code>Luogu P5960</code></a></p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>其实差分约束最难的地方不是跑最短路求解的过程，而是如何去建这个图。</p>
<p>这样子的话其实是与网络流有些类似的情况的，有时候我们没有很好的办法来把我们题目中给出的信息来转化成为我们的建图方式。</p>
<p>下面首先会放上两道比较简单的、朴素的题目，没有什么太难理解的地方；然后就会放一些转化题意的例子。</p>
<h2 id="Luogu-P1993-小-K-的农场"><a href="#Luogu-P1993-小-K-的农场" class="headerlink" title="Luogu P1993 小 K 的农场"></a>Luogu P1993 小 K 的农场</h2><p>题目链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDE5OTM=">Luogu</span></p>
<p>接近板子题。</p>
<p>我们可以使用我们刚刚学到的技巧来完成这道题目。</p>
<p>参考代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p1000-p1999/p1993/p1993.cpp"><code>Luogu P1993</code></a></p>
<h2 id="Luogu-P3275-SCOI2011-糖果"><a href="#Luogu-P3275-SCOI2011-糖果" class="headerlink" title="Luogu P3275 [SCOI2011] 糖果"></a>Luogu P3275 [SCOI2011] 糖果</h2><p>题目链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMyNzU=">Luogu</span> || <span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMTE3MS8=">AcWing</span> || <span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yNDM2">LibreOJ</span></p>
<p>我们遇到了新的约束条件：不带取等的不等式。</p>
<p>我们看一下题目的条件：<strong>分糖果</strong>。</p>
<p>由于糖果是一块一块的，我们不能分给小朋友们 $m&#x3D;\dfrac{1}{2}$ 块糖果或 $\lim\limits_{m \to 0} m$ 块糖果，所以我们可以尝试着更改一下约束条件。<br>我们可以将 $x_a &gt; x_b$ 改为 $x_a \geq x_b + 1$。</p>
<p>这样就可以建图了。</p>
<p>（20220714更新）</p>
<p>现在洛谷上面加入了一点Hack数据，会卡掉较慢的SPFA算法，而原题中SPFA是可以过的。（但是数据范围给的是 $10^5$）<br>这道题的本意应该是让我们利用tarjan算法及进行缩点之后再跑差分约束。</p>
<p>我们看看怎么缩点。</p>
<p>我们尝试将所有的环缩成一个点，而这个环内的所有点的值都会相等。<br>那么我们可以确定，环上只含有1、3、5三种类型的边。</p>
<p>（因为你看：我们建出来的图是一个有向图，如果其中边权为 $0$ 的边中形成了环就代表他们权值肯定相等。假如说 $a$，$b$，$c$ 三个点形成了环，那么我们就有如下的方程：</p>
<p>$$<br>\begin{cases}<br>x_b \leq x_a \\<br>x_c \leq x_b \\<br>x_a \leq x_c<br>\end{cases}<br>$$</p>
<p>我们就可以得到三者相等了。）</p>
<p>所以我们先把类型为1、3、5的边建出来跑一个tarjan，然后再建出来剩下的边跑差分约束即可。</p>
<p>参考代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3275/p3275.cpp"><code>Luogu P3275</code></a></p>
<h2 id="AcWing-362-区间"><a href="#AcWing-362-区间" class="headerlink" title="AcWing 362. 区间"></a>AcWing 362. 区间</h2><p>题目链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMzY0Lw==">AcWing</span> || <span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8xMDA4Nw==">LibreOJ</span></p>
<p>这一次题目没有直接给出类似于“A大于等于B+C”这样的条件，我们需要自己推出不等式组。</p>
<p>首先我们需要了解我们维护的是一个不可重的集合，那么集合内的每一个数最多只能出现一次。</p>
<p>然后我们需要满足的条件是区间内的数字的个数不小于 $c_i$ 个。</p>
<p>然后我们会发现，我们可以将上述两个条件转化为前缀和数组中的不等关系。</p>
<p>因为我们每一个数只能出现0次或1次，所以我们前缀和数组是严格非降的，且相邻两项之间最多差1。<br>我们如果称前缀和数组为 $s$ 的话，那么上述条件可以转化为 $s_{i-1} \leq s_i$ 和 $s_i \leq s_{i-1} + 1$ 两个不等式。</p>
<p>对于第二个条件，也可以转化成为前缀和数组上的不等关系。<br>如果我们有一个条件是“$[ a,b ]$ 这段区间内的数字不少于 $c$ 个”的话，我们可以将其转化为类似 $s_b \geq s_{a-1} + c$ 这样的不等式。</p>
<p>然后我们就可以愉快地跑SPFA了，最后需要输出的是前缀和数组的最后一位——$s_{50001}$。</p>
<p>参考代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/AcWing/362/ac362.cpp"><code>AcWing 362</code></a></p>
<h2 id="Luogu-P4878-USACO05DEC-Layout-G"><a href="#Luogu-P4878-USACO05DEC-Layout-G" class="headerlink" title="Luogu P4878 [USACO05DEC] Layout G"></a>Luogu P4878 [USACO05DEC] Layout G</h2><p>题目链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQ4Nzg=">Luogu</span> || <span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMTE3Mi8=">AcWing</span> || <span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8xMDA5MA==">LibreOJ</span></p>
<p>题目保证了奶牛的编号与其在序列中的位置是相对应的，同时两个奶牛之间的距离可以是0，也就是说我们每一个奶牛的坐标一定大于等于其上一只的坐标。</p>
<p>然后还有两种其他的条件，一是两头奶牛之间的距离不大于某个数，二是两头奶牛之间的距离不小于某个数。假设我们这两头奶牛分别是a和b，这个给定的数是c，那么我们对于上面两个条件分别可以得出 $x_b \leq x_a + c$ 和 $x_b \geq x_a + c$ 这两个不等式。</p>
<p>然后就建图跑就可以了。</p>
<p>参考代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p4000-p4999/p4878/p4878.cpp"><code>Luogu P4878</code></a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>DSU ON TREE</title>
    <url>/OI/dsu-on-tree/</url>
    <content><![CDATA[<p>一种在 $O(n \log n)$ 复杂度内求树上问题的算法。</p>
<span id="more"></span>

<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>假设现在我们有一道题，如下：</p>
<blockquote>
<p>给定一棵 $n$ 个节点的树，每一个节点上都有一个颜色 $c_i$，求每一个节点的子树中不同颜色的个数。<br>$1 \leq n \leq 2 \times 10^5$，<br>$\forall i \in [1,n], 1 \leq c_i \leq n$</p>
</blockquote>
<p>我们之前应该有过区间求不同颜色个数的经验，就是维护一个 <code>cnt</code> 数组，然后每一次以 $O(1)$ 的复杂度修改 <code>cnt</code> 数组来维护不同颜色个数，这使得我们可以用莫队来维护。</p>
<p>到了树上该怎么办？</p>
<p>树上莫队！</p>
<p>但是树上莫队太麻烦了，复杂度还带根号，我们选用——<strong>DSU ON TREE</strong>!</p>
<h1 id="什么是-DSU-ON-TREE"><a href="#什么是-DSU-ON-TREE" class="headerlink" title="什么是 DSU ON TREE"></a>什么是 DSU ON TREE</h1><p>DSU on tree，全称树上启发式合并。</p>
<p>这个DSU，拆开<del>应该</del>是Disjoint Sets under Union，也就是并查集。</p>
<p>并查集我们按秩合并的时候，会把小的子树合并到大的子树的根节点上作为其子树之一，时间复杂度是熟悉的 $O(n \log n)$。</p>
<p>在做树上启发式合并的时候，我们也采用类似的思想，把小的子树上的信息向大的子树上的信息合并，从而也达到 $O(n \log n)$ 的时间复杂度。</p>
<p>证明的话放到操作里面。</p>
<h1 id="大致思想"><a href="#大致思想" class="headerlink" title="大致思想"></a>大致思想</h1><p>我们就拿上面的题目为例。</p>
<p>同样的套路，我们对每一个子树维护一个 <code>cnt</code> 数组，并尝试通过在DFS的时候把当前节点的所有儿子的信息合并到当前节点上来减少空间复杂度。</p>
<p>我们遍历一个节点，统计上其信息的复杂度是 $O(1)$ 的，那统计一整棵子树的时间复杂度是 $O(\operatorname{sz}(i))$ 的。<br>假如说我们每一次遍历到一个节点的时候，我们遍历其每一个儿子，计算其每一个儿子的答案，期间将 <code>cnt</code> 数组全部清空，最后在把自己子树内所有节点遍历一遍求自己子树内的答案，可以将空间复杂度减少到 $O(n)$。<br>这样的话，每一个节点都会被统计 $O(\operatorname{dep}(i))$ 次，时间复杂度是 $O(\sum_{i&#x3D;1}^n \operatorname{dep}(i))$ 的，可以被精心构造的数据卡掉。</p>
<p>还记得树剖吗？每一个点到根的路径上，切换轻重边的次数（或者直接就等价于轻边的数量）是 $O(\log n)$ 级别的。</p>
<p>那我们考虑每一次遇到轻边的时候再重新被统计，此时我们总共统计的次数是 $O(n \log n)$ 级别的了。<br>这与我们预估的时间复杂度相符，应该就是这个算法了。</p>
<h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><p>我们首先对这个东西进行一次剖分。<br>正常的树链剖分可以得到<code>fa</code>、<code>dep</code>、<code>top</code>什么的，但我们这里只需要与轻重边相关的信息，同时也只需要DFS一次。</p>
<p>之后我们进行答案的统计，这里也是根据DFS来实现的。</p>
<p>每一次我们遍历到一个节点的时候，我们首先遍历其所有轻子树，并单独计算其答案。此时我们每一次换子树遍历的时候需要清空<code>cnt</code>数组。<br>然后我们遍历我们的重子树，计算其答案，并保留其对<code>cnt</code>数组的贡献。<br>然后我们遍历所有的轻子树，保留其对<code>cnt</code>数组的贡献。<br>最后，计算当前节点子树的答案。</p>
<p>我们可以看到，每一个轻子树都遍历了两边，每一个重子树都遍历了一遍。</p>
<p>修改对<code>cnt</code>数组的贡献的时候，如果觉得递归的复杂度太大，可以选择在剖分的时候记录一下DFS序，因为子树的DFS序一定是连续的一段，我们只需要遍历DFS序中一段连续的区间即可。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>就以刚才我们说的那道题为例，这里只放上去了两个DFS函数和维护答案的函数。</p>
<p>代码使用的是上面说的遍历DFS序上的一个区间的方式，所以需要解释一下几个数组的含义：<br><code>id</code>是当前点的DFS序，<code>nw</code>是当前DFS序代表的点。<br>剩下的或与树剖中的意义一样，或已经解释过了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> fa[N], son[N], dep[N], sz[N];</span><br><span class="line"><span class="type">int</span> id[N], nw[N], dfn;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[p] = father, sz[p] = <span class="number">1</span>;</span><br><span class="line">    id[p] = ++dfn, nw[dfn] = p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == father)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(e[i], p);</span><br><span class="line">        sz[p] += sz[e[i]];</span><br><span class="line">        <span class="keyword">if</span>(sz[e[i]] &gt; sz[son[p]])son[p] = e[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> col[N];</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"><span class="type">int</span> totcol;</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[i]++;</span><br><span class="line">    <span class="keyword">if</span>(cnt[i] == <span class="number">1</span>)totcol++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt[i] == <span class="number">1</span>)totcol--;</span><br><span class="line">    cnt[i]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> p, <span class="type">bool</span> keep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa[p] || e[i] == son[p])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(e[i], <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(son[p])<span class="built_in">dfs2</span>(son[p], <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa[p] || e[i] == son[p])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; sz[e[i]]; j++)</span><br><span class="line">            <span class="built_in">add</span>(col[nw[id[e[i]] + j]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add</span>(col[p]);</span><br><span class="line">    ans[p] = totcol;</span><br><span class="line">    <span class="keyword">if</span>(!keep)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; sz[p]; j++)</span><br><span class="line">            <span class="built_in">del</span>(col[nw[id[p] + j]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9neW0vMTAzOTYwL3Byb2JsZW0vTA==">CF Gym 103960L</span></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>快速求popcount和</title>
    <url>/OI/fast-popcnt-sum/</url>
    <content><![CDATA[<p>一种以 $O(\log n)$ 的时间复杂度快速求 $\sum\limits_{i&#x3D;1}^n \operatorname{popcount}(i)$ 的方法。</p>
<span id="more"></span>

<h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><p>摆结论：</p>
<p>$$<br>\sum_{i&#x3D;1}^n \operatorname{popcount}(i) &#x3D; \sum_{i&#x3D;1}^{\lceil \log_2(n) \rceil - 1} [(n&gt;&gt;(i-1)) \&amp; 1&#x3D;&#x3D;1] \times (i \times 2^{i-1} + 2^i \times \operatorname{popcount}(n&gt;&gt;i))<br>$$</p>
<p>其中 $[(n&gt;&gt;(i-1)) \&amp; 1&#x3D;&#x3D;1]$ 代表 $n$ 的第 $i$ 位是否为零。</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>首先，我们可以想到一种 $O(1)$ 的求 $\sum\limits_{i&#x3D;0}^{2^k-1} \operatorname{popcount}(i)$ 的方法。</p>
<p>这里以 $[0,2^5-1]$ 为例。</p>
<p>我们首先将所有数字列出来：</p>
<p><img src="https://s2.loli.net/2022/06/13/dKYtT86FQsXDpmO.png" alt="fastpopcnt1.png"></p>
<p>然后逐二进制位来看。</p>
<p>最低位的规律是01010101…：</p>
<p><img src="https://s2.loli.net/2022/06/13/vc4nVkg5jTDflNQ.png" alt="fastpopcnt2.png"></p>
<p>第二位的规律是00110011…：</p>
<p><img src="https://s2.loli.net/2022/06/13/ADK2TXtixpzWIUf.png" alt="fastpopcnt3.png"></p>
<p>第三位的规律是00001111…：</p>
<p><img src="https://s2.loli.net/2022/06/13/8ACtzm36Gnfhkde.png" alt="fastpopcnt4.png"></p>
<p>之后的规律也显然：</p>
<p><img src="https://s2.loli.net/2022/06/13/gW4j5p2yVKxAhbk.png" alt="fastpopcnt5.png"><br><img src="https://s2.loli.net/2022/06/13/lFOnc31pAR8aTeG.png" alt="fastpopcnt6.png"></p>
<p>我们可以得到，每一位中都有一半是0，另一半是1。</p>
<p>于是我们就可以得出公式：</p>
<p>$$<br>\sum\limits_{i&#x3D;0}^{2^k-1} \operatorname{popcount}(i) &#x3D; k \times 2^{k-1}<br>$$</p>
<p>然后我们将给定的 $n$ 按照二进制位拆分。</p>
<p>这里以 $(11010110)_2 &#x3D; (214)_{10}$ 为例。 </p>
<p>（下面指的第几位都是从高向低数的）</p>
<p>其第一位是 $1$，所以我们可以向结果累加 $(00000000)_2 \sim (01111111)_2$ 的popcount和，也就是 $0 \times 2^7 + 7 \times 2^6$。</p>
<p>其第二位是 $1$，所以我们可以向结果累加 $(10000000)_2 \sim (10111111)_2$ 的popcount和，也就是 $1 \times 2^6 + 6 \times 2^5$。</p>
<p>其第三位是 $0$，对结果没有贡献。</p>
<p>其第四位是 $1$，所以我们可以向结果累加 $(11000000)_2 \sim (11001111)_2$ 的popcount和，也就是 $2 \times 2^4 + 4 \times 2^3$。</p>
<p>其第五位是 $0$，对结果没有贡献。</p>
<p>其第六位是 $1$，所以我们可以向结果累加 $(11010000)_2 \sim (11010011)_2$ 的popcount和，也就是 $3 \times 2^2 + 2 \times 2^1$。</p>
<p>其第七位是 $1$，所以我们可以向结果累加 $(11010100)_2 \sim (11010101)_2$ 的popcount和，也就是 $4 \times 2^1 + 1 \times 2^0$。</p>
<p>其第八位是 $0$，对结果没有贡献。<br>但其实不管有没有贡献我们都不算他了，因为我们只需要将 $[0,n)$ 这个区间分段即可。</p>
<p>最后再加上 $\operatorname{popcount}((11010110)_2) &#x3D; 5$。</p>
<p>最终结果就是</p>
<p>$$<br>\begin{align}<br>&amp; 0 \times 2^7 + 7 \times 2^6 + 1 \times 2^6 + 6 \times 2^5 + 2 \times 2^4 + 4 \times 2^3 + 3 \times 2^2 + 2 \times 2^1 \\ \notag<br>&amp; + 4 \times 2^1 + 1 \times 2^0 + \operatorname{popcount}((11010110)_2) \\<br>&#x3D;{} &amp; 448 + 256 + 64 + 16 + 9 + 5 \\<br>&#x3D;{} &amp; 798<br>\end{align}<br>$$</p>
<p>因为 $\operatorname{popcount}(0) &#x3D; 0$，所以统计上 $0$ 与不统计上其实没有本质上的区别。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>示例如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x = n;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &amp; <span class="number">1</span>)</span><br><span class="line">        tot += (cnt * (<span class="number">1</span> &lt;&lt; (cnt - <span class="number">1</span>))) + (<span class="number">1</span> &lt;&lt; cnt) * __builtin_popcount(x &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    cnt++;</span><br><span class="line">&#125;</span><br><span class="line">tot += __builtin_popcount(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, tot);</span><br></pre></td></tr></table></figure>












]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>网络流</title>
    <url>/OI/flow/</url>
    <content><![CDATA[<p>网络流。</p>
<span id="more"></span>

<p>（3-13至3-14重修）<br>（6-23至6-24增添上下界网络流相关内容）</p>
<h1 id="什么是网络流"><a href="#什么是网络流" class="headerlink" title="什么是网络流"></a>什么是网络流</h1><p>网络流是指在<strong>网络</strong>（或者流网络， Flow Network ）中的<strong>流</strong>。</p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>网络是指一个有向图 $G&#x3D;(V,E)$。</p>
<p>每条边 $(u,v)\in E$ 都有一个权值 $c(u,v)$，称之为容量（Capacity），当 $(u,v)\notin E$ 时有 $c(u,v)&#x3D;0$。</p>
<p>其中有两个特殊的点：源点（Source）$s\in V$ 和汇点（Sink）$t\in V,(s\neq t)$。</p>
<h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p>设 $f(u,v)$ 定义在二元组 $(u\in V,v\in V)$ 上的实数函数且满足</p>
<ol>
<li>容量限制：对于每条边，流经该边的流量不得超过该边的容量，即，$f(u,v)\leq c(u,v)$</li>
<li>斜对称性：每条边的流量与其相反边的流量之和为 0，即 $f(u,v)&#x3D;-f(v,u)$</li>
<li>流守恒性：从源点流出的流量等于汇点流入的流量，即 $\forall x\in V - \lbrace s,t \rbrace , \sum_{(u,x) \in E} f(u,x) &#x3D; \sum_{(x,v) \in E} f(x,v)$</li>
</ol>
<p>那么 $f$ 称为网络 $G$ 的流函数。对于 $(u,v)\in E$，$f(u,v)$ 称为边的<strong>流量</strong>，$c(u,v)-f(u,v)$ 称为边的<strong>剩余容量</strong>。整个网络的流量为 $\sum_{(s,v)\in E}f(s,v)$，即<strong>从源点发出的所有流量之和</strong>。</p>
<p>一般而言也可以把网络流理解为整个图的流量。而这个流量必满足上述三个性质。</p>
<p>流函数的完整定义为</p>
<p>$$<br>f(u,v)&#x3D;<br>\begin{cases}<br>f(u,v), &amp; (u,v) \in E, \\<br>-f(v,u), &amp; (v,u) \in E, \\<br>0, &amp; (u,v) \not\in E , (v,u) \not\in E.<br>\end{cases}<br>$$</p>
<h3 id="反向边"><a href="#反向边" class="headerlink" title="反向边"></a>反向边</h3><p>反向边是网络流中很重要的一类边。</p>
<p>一般的时候，在题目给定的流网络中是不包含有关反向边的信息的，我们画图的时候也一般不将反向边画出来。</p>
<p>但是，反向边可以利用流网络的一些性质，通过对其流量进行操作，使得我们的子程序可以经由其进行反悔的操作。</p>
<p>建立反向边的时候可以使用一些小trick。</p>
<p>我们如果使用邻接表（或称链式前向星）来建图的话，可以选择同时建正向边和反向边，并使边的编号从0开始，从而可以通过使用异或操作来访问当前边的反向边。</p>
<h2 id="网络流的常见问题"><a href="#网络流的常见问题" class="headerlink" title="网络流的常见问题"></a>网络流的常见问题</h2><p>网络流问题中常见的有以下三种：最大流，最小割，费用流。</p>
<p>解决网络流问题的难点不是算法或者代码，而是建图。对于大多数的网络流题目，我们需要仔细分辨琢磨才可以知道如何将问题转换为网络流这几种问题的其中一种或几种，并将题目中的限制用边&#x2F;点的限制体现出来。</p>
<h1 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>对于一个给定的网络，其合法的流函数其实有很多。其中使得整个网络的流量最大的流函数被称为网络的最大流。</p>
<p>求解一个网络的最大流其实有很多用处，例如可以将二分图的最大匹配问题转化为求解最大流。</p>
<p>求解最大流的算法有很多种，比如Ford-Fulkerson增广路算法、Push-Relable预流推进算法等等。<br>实际上，最常用的还是Ford-Fulkerson增广路算法中的EK和Dinic两种。</p>
<h2 id="Ford-Fulkerson-增广路算法"><a href="#Ford-Fulkerson-增广路算法" class="headerlink" title="Ford-Fulkerson 增广路算法"></a>Ford-Fulkerson 增广路算法</h2><p>该方法通过寻找增广路来更新最大流，有EK,dinic,SAP,ISAP等主流算法。</p>
<p>求解最大流之前，我们先认识一些概念。</p>
<h3 id="残量网络"><a href="#残量网络" class="headerlink" title="残量网络"></a>残量网络</h3><p>首先我们介绍一下一条边的剩余容量 $c_f(u,v)$（Residual Capacity），它表示的是这条边的容量与流量之差，即 $c_f(u,v) &#x3D; c(u,v) - f(u,v)$。</p>
<p>对于流函数 $f$，残存网络 $G_f$（Residual Network）是网络 $G$ 中所有结点和<strong>剩余容量大于 0</strong> 的边构成的子图。形式化的定义，即 $G_f &#x3D; (V_f &#x3D; V,E_f &#x3D; \lbrace(u,v) \in E,c_f(u,v) &gt; 0 \rbrace)$。</p>
<p>注意，剩余容量大于 0 的边可能不在原图 $G$ 中（根据容量、剩余容量的定义以及流函数的斜对称性得到）。可以理解为，残量网络中包括了那些还剩了流量空间的边构成的图，也包括虚边（即反向边）。</p>
<h3 id="增广路"><a href="#增广路" class="headerlink" title="增广路"></a>增广路</h3><p>在原图 $G$ 中若一条从源点到汇点的路径上所有边的<strong>剩余容量都大于 0</strong>，这条路被称为增广路（Augmenting Path）。</p>
<p>或者说，在残存网络 $G_f$ 中，一条从源点到汇点的路径被称为增广路。如图：</p>
<p><img src="https://s2.loli.net/2022/02/28/T4tHBFq3yCSarhu.png" alt="maxflow1.png"></p>
<p>我们从 $4$ 到 $3$，肯定可以先从流量为 $20$ 的这条边先走。那么这条边就被走掉了，不能再选，总的流量为 $20$（现在）。然后我们可以这样选择：</p>
<ol>
<li><p>$4 \to 2 \to 3$ 这条 <strong>增广路</strong> 的总流量为 $20$。到 $2$ 的时候还是 $30$，到 $3$ 了就只有 $20$ 了。</p>
</li>
<li><p>$4 \to 2 \to 1 \to 3$ 这样子我们就很好的保留了 $30$ 的流量。</p>
</li>
</ol>
<p>所以我们这张图的最大流就应该是 $20 + 30 &#x3D; 50$。</p>
<h3 id="Edmonds-Karp-动能算法"><a href="#Edmonds-Karp-动能算法" class="headerlink" title="Edmonds-Karp 动能算法"></a>Edmonds-Karp 动能算法</h3><p>这个算法很简单，就是BFS<strong>找增广路</strong>，然后对其进行<strong>增广</strong>，直到图上再也没有增广路了为止。</p>
<p>我们不用管我们找到的增广路的正确性，毕竟如果我们找到了一条更优的路径的话可以通过之前经过的反向边进行反悔。这也就意味着，我们每次需要BFS的边鸡是包括反向边的。</p>
<p>在具体实现的时候，我们每一次找到增广路的时候，记录下这条路径上所有的最小流量 $minf$ ，那么整个图的流量就增加了 $minf$。同时我们给这条路径上的所有边的反向边都加上 $minf$ 的容量，以便将来反悔。</p>
<p>EK 算法的时间复杂度为 $O(nm^2)$（其中 $n$ 为点数，$m$ 为边数）。<br>其效率还有很大提升空间，但实际情况下不一定能跑满，应付 $10^3 \sim 10^4$ 大小的图应该足够了。</p>
<details class="note success"><summary><p>参考代码</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, M = <span class="number">20010</span>, INF = <span class="number">1e8</span>;</span><br><span class="line"><span class="type">int</span> n, m, S, T;</span><br><span class="line"><span class="type">int</span> h[N], e[M], f[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> q[N], d[N], pre[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, f[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">    e[idx] = a, f[idx] = <span class="number">0</span>, ne[idx] = h[b], h[b] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="built_in">sizeof</span>(st));</span><br><span class="line">    q[<span class="number">0</span>] = S, st[S] = <span class="literal">true</span>, d[S] = INF;</span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span>(!st[v] &amp;&amp; f[i])</span><br><span class="line">            &#123;</span><br><span class="line">                st[v] = <span class="literal">true</span>;</span><br><span class="line">                d[v] = <span class="built_in">min</span>(d[t], f[i]);</span><br><span class="line">                pre[v] = i;</span><br><span class="line">                <span class="keyword">if</span>(v == T) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                q[++tt] = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">EK</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        r += d[T];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = T; i != S; i = e[pre[i] ^ <span class="number">1</span>])</span><br><span class="line">            f[pre[i]] -= d[T], f[pre[i] ^ <span class="number">1</span>] += d[T];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;S, &amp;T);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">EK</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="Dinic-算法"><a href="#Dinic-算法" class="headerlink" title="Dinic 算法"></a>Dinic 算法</h3><p>EK 算法每一次遍历残量网络的时候只能最多找到一条增广路，但很可能我们的子程序为此而遍历了整个残量网络。这里还有很大的优化空间。</p>
<p><strong>Dinic 算法</strong>的过程是这样的：每次增广前，我们先用 BFS 来将图分层。设源点的层数为 $0$，那么一个点的层数便是它离源点的最近距离。</p>
<p>通过分层，我们可以干两件事情：</p>
<ol>
<li>如果不存在到汇点的增广路（即汇点的层数不存在），我们即可停止增广。</li>
<li>确保我们找到的增广路是最短的。（原因见下文）</li>
</ol>
<p>接下来是 DFS 找增广路的过程。</p>
<p>我们每次找增广路的时候，都只找比当前点层数多 $1$ 的点进行增广（这样就可以确保我们找到的增广路是最短的）。</p>
<p>Dinic 算法会不断重复这两个过程，直到没有增广路了为止。</p>
<p>Dinic 算法有两个优化：</p>
<ol>
<li><strong>多路增广</strong>：每次找到一条增广路的时候，如果残余流量没有用完怎么办呢？我们可以利用残余部分流量，再找出一条增广路。这样就可以在一次 DFS 中找出多条增广路，大大提高了算法的效率。</li>
<li><strong>当前弧优化</strong>：如果一条边已经被增广过，那么它就没有可能被增广第二次。那么，我们下一次进行增广的时候，就可以不必再走那些已经被增广过的边。</li>
</ol>
<p>Dinic 算法的时间复杂度是 $O(n^2m)$ 级别的，但实际上其实跑不满这个上限。<br>Dinic算法可以说是算法实现难易程度与时间复杂度较为平衡的一个算法，可以应对 $10^4 \sim 10^5$级别的图。<br>特别的，Dinic算法在求解二分图最大匹配问题的时候的时间复杂度是 $O(m\sqrt{n})$ 级别的，实际情况下则比这更优。</p>
<details class="note success"><summary><p>参考代码</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>, M = <span class="number">200010</span>, INF = <span class="number">1e8</span>;</span><br><span class="line"><span class="type">int</span> n, m, S, T;</span><br><span class="line"><span class="type">int</span> h[N], e[M], f[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> q[N], d[N], cur[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, f[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">    e[idx] = a, f[idx] = <span class="number">0</span>, ne[idx] = h[b], h[b] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, cur[S] = h[S];</span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q[hh++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[v] == <span class="number">-1</span> &amp;&amp; f[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">                cur[v] = h[v];</span><br><span class="line">                <span class="keyword">if</span>(v == T)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                q[++tt] = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == T)<span class="keyword">return</span> limit;</span><br><span class="line">    <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        cur[u] = i;<span class="comment">//当前弧优化</span></span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span>(d[v] == d[u] + <span class="number">1</span> &amp;&amp; f[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">find</span>(v, <span class="built_in">min</span>(f[i], limit - flow));</span><br><span class="line">            <span class="keyword">if</span>(!t)d[v] = <span class="number">-1</span>;</span><br><span class="line">            f[i] -= t, f[i ^ <span class="number">1</span>] += t;</span><br><span class="line">            flow += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>, flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>()) <span class="keyword">while</span>(flow = <span class="built_in">find</span>(S, INF)) r += flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;S, &amp;T);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">dinic</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>对于一个给定的网络，我们删去网络中的一个边集，使得源点与汇点不连通，这个被删去的边集就是这张图的一个<strong>割</strong>。在所有的割中，边集的容量和最小的被称为最小割。</p>
<h2 id="最大流最小割定理"><a href="#最大流最小割定理" class="headerlink" title="最大流最小割定理"></a>最大流最小割定理</h2><p>任何一个网络的最大流量等于最小割中边的容量值和。</p>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>我们如果回想一下最大流算法走完之后的结果。</p>
<p>对于每一条从源点到汇点的流量为正的路径，我们都能找到至少一条容量跑满的边。</p>
<p>这些边的容量之和就是我们最终得到的最大流。</p>
<p>我们考虑将这些边删去。</p>
<p>那么我们如果对剩下的边跑最大流算法的话，我们得到的最大流将会是0，也就意味着源点将不再与汇点直接连通。</p>
<p>这些跑满的边构成的边集就满足了我们对割的定义。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>所以说，我们完全可以用求解最大流的算法来求解最小割问题。</p>
<h2 id="最大权闭合子图问题"><a href="#最大权闭合子图问题" class="headerlink" title="最大权闭合子图问题"></a>最大权闭合子图问题</h2><p>最大权闭合子图是一种网络流问题，可以用最小割解决。</p>
<p>其定义就是，如果一个点选了，其后继节点必须得选。我们需要在这样的约束下最大化选择的点权和。</p>
<p>通常图中有一些点权为正的点和点权为负的点。（如果点权全为正的话不如全都选）<br>建图方法为，将源点连向所有正权点，边权为点权；将所有负权点连向汇点，边权为负点权；原图中的边也保留，边权为 $+\infty$。</p>
<p>考虑我们找到的最小割。我们割掉的正权边就代表我们不选这个点。其所依赖的点也就不再需要选了，从源点流出来的流经过那个点之后，沿着图上的边，经过负权点到达汇点。这些负权点等到被流灌满之后就代表着被割掉了，意味着我们使用不选的正权点覆盖了负权点的花费，我们也就选上了这个点。<br>此时，我们不选上的正权点与源点不连通，我们选上了的负权点与汇点也不连通，整个图就都不连通了。</p>
<p>最终的答案就是正权点的权值和减去最大流。</p>
<h1 id="费用流"><a href="#费用流" class="headerlink" title="费用流"></a>费用流</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>给定一个网络 $G&#x3D;(V,E)$，每条边除了有容量限制 $c(u,v)$，还有一个单位流量的费用 $w(u,v)$。</p>
<p>当 $(u,v)$ 的流量为 $f(u,v)$ 时，需要花费 $f(u,v)\times w(u,v)$ 的费用。</p>
<p>$w$ 也满足斜对称性，即 $w(u,v)&#x3D;-w(v,u)$。</p>
<p>则该网络中总花费最小的最大流称为<strong>最小费用最大流</strong>，即在最大化 $\sum_{(s,v)\in E}f(s,v)$ 的前提下最小化 $\sum_{(u,v)\in E}f(u,v)\times w(u,v)$。</p>
<p>最小费用最大流问题与带权二分图最大匹配问题的关系就和最大流问题和二分图最大匹配问题的关系类似，这就意味着我们可以使用求解费用流问题的算法来求解带权二分图最大匹配问题。</p>
<h2 id="SSP-算法"><a href="#SSP-算法" class="headerlink" title="SSP 算法"></a>SSP 算法</h2><p>SSP（Successive Shortest Path）算法是一个贪心的算法。它的思路是每次寻找单位费用最小的增广路进行增广，直到图上不存在增广路为止。</p>
<p>如果图上存在单位费用为负的圈，SSP 算法正确无法求出该网络的最小费用最大流。此时需要先使用消圈算法消去图上的负圈。</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>如果使用 Bellman-Ford 算法求解最短路，每次找增广路的时间复杂度为 $O(nm)$。设该网络的最大流为 $f$，则最坏时间复杂度为 $O(nmf)$。事实上，这个时间复杂度是<strong>伪多项式的</strong>。</p>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>只需将 EK 算法或 Dinic 算法中找增广路的过程，替换为用最短路算法寻找单位费用最小的增广路即可。</p>
<p>这里写的是SPFA，因为怕有负边权导致的奇怪的结果。</p>
<p>当然，如果没有负权的话可以使用dijkstra。</p>
<details class="note info"><summary><p>基于EK算法的实现</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>, M = <span class="number">100010</span>, INF = <span class="number">1e8</span>;</span><br><span class="line"><span class="type">int</span> n, m, S, T;</span><br><span class="line"><span class="type">int</span> h[N], e[M], f[M], w[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> q[N], d[N], pre[N], incf[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, f[idx] = c, w[idx] = d, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">    e[idx] = a, f[idx] = <span class="number">0</span>, w[idx] = -d, ne[idx] = h[b], h[b] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    <span class="built_in">memset</span>(incf, <span class="number">0</span>, <span class="built_in">sizeof</span>(incf));</span><br><span class="line">    q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, incf[S] = INF;</span><br><span class="line">    <span class="keyword">while</span>(hh != tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh++];</span><br><span class="line">        <span class="keyword">if</span>(hh == N) hh = <span class="number">0</span>;</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span>(f[i] &amp;&amp; d[v] &gt; d[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[v] = d[t] + w[i];</span><br><span class="line">                pre[v] = i;</span><br><span class="line">                incf[v] = <span class="built_in">min</span>(f[i], incf[t]);</span><br><span class="line">                <span class="keyword">if</span>(!st[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[tt++] = v;</span><br><span class="line">                    <span class="keyword">if</span>(tt == N) tt = <span class="number">0</span>;</span><br><span class="line">                    st[v] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> incf[T] &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EK</span><span class="params">(<span class="type">int</span> &amp;flow, <span class="type">int</span> &amp;cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flow = cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">spfa</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = incf[T];</span><br><span class="line">        flow += t, cost += t * d[T];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = T; i != S; i = e[pre[i] ^ <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            f[pre[i]] -= t;</span><br><span class="line">            f[pre[i] ^ <span class="number">1</span>] += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;S, &amp;T);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c, d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c, d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> flow, cost;</span><br><span class="line">    <span class="built_in">EK</span>(flow, cost);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, flow, cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<details class="note info"><summary><p>基于 Dinic 算法的实现</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>, M = <span class="number">200010</span>, INF = <span class="number">1e16</span>;</span><br><span class="line"><span class="type">int</span> n, m, S, T;</span><br><span class="line"><span class="type">int</span> S, T;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], f[M], w[M], idx;</span><br><span class="line"><span class="type">int</span> cur[N], d[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, f[idx] = c, w[idx] = d, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">    e[idx] = a, f[idx] = <span class="number">0</span>, w[idx] = -d, ne[idx] = h[b], h[b] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    d[S] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(S);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span>(f[i] &amp;&amp; d[v] &gt; d[u] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[v] = d[u] + w[i];</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                    vis[v] = <span class="number">1</span>, q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[T] != <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == T)<span class="keyword">return</span> limit;</span><br><span class="line">    <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        cur[u] = i;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span>(d[v] == d[u] + w[i] &amp;&amp; f[i] &amp;&amp; !vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">find</span>(v, <span class="built_in">min</span>(f[i], limit - flow));</span><br><span class="line">            <span class="keyword">if</span>(!t)d[v] = <span class="number">-1</span>;</span><br><span class="line">            f[i] -= t, f[i ^ <span class="number">1</span>] += t;</span><br><span class="line">            flow += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> &amp;flow, <span class="type">int</span> &amp;cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flow = <span class="number">0</span>, cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">spfa</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(cur, h, <span class="built_in">sizeof</span>(h));</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">find</span>(S, INF);</span><br><span class="line">        flow += k;</span><br><span class="line">        cost += k * d[T];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;S, &amp;T);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c, d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c, d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> flow, cost;</span><br><span class="line">    <span class="built_in">dinic</span>(flow, cost);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, flow, cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（貌似寄了，求调）</p>

</details>

<h1 id="上下界网络流"><a href="#上下界网络流" class="headerlink" title="上下界网络流"></a>上下界网络流</h1><p>现在我们每一条边不仅有流量的上界了，还有了流量的下界。</p>
<h2 id="无源汇有上下界可行流"><a href="#无源汇有上下界可行流" class="headerlink" title="无源汇有上下界可行流"></a>无源汇有上下界可行流</h2><p>现在我们手里拿到了一张图，上面没有给定源点和汇点，同时每一条边都有流量的上界和下界。<br>现在我们需要求出来一个方案，使得我们这张图的所有点满足流量平衡（即每一个点流出的流量和流入的流量是相等的），同时满足流量限制。</p>
<p>例题就是LibreOJ的<span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8xMTU=">#115. 无源汇有上下界可行流</span>。</p>
<p>我们的思路如下：</p>
<p>我们可以将我们的一个可行方案拆成两部分，为每一条边的下限加上超出每一条边下限的部分。<br>我们称超出每一条边下限的这部分流叫做附加流。</p>
<p>首先我们跑满所有边的下限，记录下每一个点流入流量与流出流量之差，设其为 $A_i$。</p>
<p>根据上面我们得到的信息，我们在建立一个新图，是正常的不带下界的网络流，并新建两个源汇点 $S$ 与 $T$。这张图里面的边与原先起始点一样，而流量变为了原边的上界减去下界。</p>
<p>因为部分点的流量不是平衡的，我们需要让其在加上附加流之后平衡，同时在求附加流的这个图中也需要保证流量平衡，所以我们需要将每一个点中不平衡的流量给到源点或汇点。</p>
<p>对于 $A_i &gt; 0$ 的，说明这个点流入较多，需要往出流，其附加流的流出流量是大于其流入流量的，所以需要从 $S$ 向其连一条流量为 $A_i$ 的边；<br>对于 $A_i &lt; 0$ 的，说明这个点流出较多，需要再流入，其附加流的流入流量是大于其流出流量的，所以需要从其向 $T$ 连一条流量为 $-A_i$ 的边。</p>
<p>我们对这个新图跑一个最大流，然后看起最大流量是否等于 $S$ 的所有出边流量之和。如果相等，那么原图也就流量平衡了，这时候我们就得到了一个可行的方案。</p>
<details class="note success"><summary><p>参考代码</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = <span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> m, n;</span><br><span class="line"><span class="type">int</span> S, T;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], f[M], l[M], idx;</span><br><span class="line"><span class="type">int</span> A[N];</span><br><span class="line"><span class="type">int</span> q[N], d[N], cur[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], f[idx] = d - c, l[idx] = c, h[a] = idx++;</span><br><span class="line">    e[idx] = a, ne[idx] = h[b], f[idx] = <span class="number">0</span>, h[b] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, cur[S] = h[S];</span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q[hh++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[v] == <span class="number">-1</span> &amp;&amp; f[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">                cur[v] = h[v];</span><br><span class="line">                <span class="keyword">if</span>(v == T)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                q[++tt] = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == T)<span class="keyword">return</span> limit;</span><br><span class="line">    <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        cur[u] = i;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span>(d[v] == d[u] + <span class="number">1</span> &amp;&amp; f[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">find</span>(v, <span class="built_in">min</span>(f[i], limit - flow));</span><br><span class="line">            <span class="keyword">if</span>(!t)d[v] = <span class="number">-1</span>;</span><br><span class="line">            f[i] -= t, f[i ^ <span class="number">1</span>] += t;</span><br><span class="line">            flow += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>, flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())<span class="keyword">while</span>(flow = <span class="built_in">find</span>(S, INF))r += flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    S = <span class="number">0</span>, T = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c, d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c, d);</span><br><span class="line">        A[a] -= c, A[b] += c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(S, i, <span class="number">0</span>, A[i]);</span><br><span class="line">            tot += A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(A[i] &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(i, T, <span class="number">0</span>, -A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">dinic</span>();</span><br><span class="line">    <span class="keyword">if</span>(res != tot)<span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m * <span class="number">2</span>; i += <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[i ^ <span class="number">1</span>] + l[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="有源汇有上下界最大-x2F-最小流"><a href="#有源汇有上下界最大-x2F-最小流" class="headerlink" title="有源汇有上下界最大&#x2F;最小流"></a>有源汇有上下界最大&#x2F;最小流</h2><p>我们知道，在一个图中要能够跑出一个可行流的前提是所有点都需要流量平衡，但是我们的源点和汇点都没有流量平衡，这就很难办。</p>
<p>一个可以想到的方法就是，从汇点向源点连接一条容量为无限的边，这样就可以跑出来一个可行流。</p>
<p>我们再从给定的源点到汇点再跑一个最大流，将其加到我们的可行流上面就是我们的最大流了；<br>如果想要求最小流的话，就可以从汇点到源点跑一个残量网络上的最大流，代表着我们可以将这些流回退掉，从可行流里面减去当前的最大流就是最小流了。</p>
<p>例题分别是LibreOJ的<span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8xMTY=">#116. 有源汇有上下界最大流</span>和<span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8xMTc=">#117. 有源汇有上下界最小流</span>。</p>
<details class="note success"><summary><p>最大流 参考代码</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = <span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> m, n;</span><br><span class="line"><span class="type">int</span> S, T, s, t;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], f[M], l[M], idx;</span><br><span class="line"><span class="type">int</span> A[N];</span><br><span class="line"><span class="type">int</span> q[N], d[N], cur[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], f[idx] = d - c, l[idx] = c, h[a] = idx++;</span><br><span class="line">    e[idx] = a, ne[idx] = h[b], f[idx] = <span class="number">0</span>, h[b] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, cur[S] = h[S];</span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q[hh++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[v] == <span class="number">-1</span> &amp;&amp; f[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">                cur[v] = h[v];</span><br><span class="line">                <span class="keyword">if</span>(v == T)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                q[++tt] = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == T)<span class="keyword">return</span> limit;</span><br><span class="line">    <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        cur[u] = i;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span>(d[v] == d[u] + <span class="number">1</span> &amp;&amp; f[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">find</span>(v, <span class="built_in">min</span>(f[i], limit - flow));</span><br><span class="line">            <span class="keyword">if</span>(!t)d[v] = <span class="number">-1</span>;</span><br><span class="line">            f[i] -= t, f[i ^ <span class="number">1</span>] += t;</span><br><span class="line">            flow += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>, flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())<span class="keyword">while</span>(flow = <span class="built_in">find</span>(S, INF))r += flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;s, &amp;t);</span><br><span class="line">    S = <span class="number">0</span>, T = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c, d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c, d);</span><br><span class="line">        A[a] -= c, A[b] += c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(S, i, <span class="number">0</span>, A[i]);</span><br><span class="line">            tot += A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(A[i] &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(i, T, <span class="number">0</span>, -A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add</span>(t, s, <span class="number">0</span>, INF);</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">dinic</span>();</span><br><span class="line">    <span class="keyword">if</span>(res != tot)<span class="built_in">puts</span>(<span class="string">&quot;please go home to sleep&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        res = f[idx - <span class="number">1</span>];</span><br><span class="line">        f[idx - <span class="number">1</span>] = f[idx - <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        S = s, T = t;</span><br><span class="line">        <span class="type">int</span> ans = res + <span class="built_in">dinic</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<details class="note success"><summary><p>最小流 参考代码</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = <span class="number">400010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> m, n;</span><br><span class="line"><span class="type">int</span> S, T, s, t;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], f[M], l[M], idx;</span><br><span class="line"><span class="type">int</span> A[N];</span><br><span class="line"><span class="type">int</span> q[N], d[N], cur[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], f[idx] = d - c, l[idx] = c, h[a] = idx++;</span><br><span class="line">    e[idx] = a, ne[idx] = h[b], f[idx] = <span class="number">0</span>, h[b] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, cur[S] = h[S];</span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q[hh++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[v] == <span class="number">-1</span> &amp;&amp; f[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">                cur[v] = h[v];</span><br><span class="line">                <span class="keyword">if</span>(v == T)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                q[++tt] = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == T)<span class="keyword">return</span> limit;</span><br><span class="line">    <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        cur[u] = i;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span>(d[v] == d[u] + <span class="number">1</span> &amp;&amp; f[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">find</span>(v, <span class="built_in">min</span>(f[i], limit - flow));</span><br><span class="line">            <span class="keyword">if</span>(!t)d[v] = <span class="number">-1</span>;</span><br><span class="line">            f[i] -= t, f[i ^ <span class="number">1</span>] += t;</span><br><span class="line">            flow += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>, flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())<span class="keyword">while</span>(flow = <span class="built_in">find</span>(S, INF))r += flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;s, &amp;t);</span><br><span class="line">    S = <span class="number">0</span>, T = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c, d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c, d);</span><br><span class="line">        A[a] -= c, A[b] += c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(S, i, <span class="number">0</span>, A[i]);</span><br><span class="line">            tot += A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(A[i] &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(i, T, <span class="number">0</span>, -A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add</span>(t, s, <span class="number">0</span>, INF);</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">dinic</span>();</span><br><span class="line">    <span class="keyword">if</span>(res != tot)<span class="built_in">puts</span>(<span class="string">&quot;please go home to sleep&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        res = f[idx - <span class="number">1</span>];</span><br><span class="line">        f[idx - <span class="number">1</span>] = f[idx - <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        S = t, T = s;</span><br><span class="line">        <span class="type">int</span> ans = res - <span class="built_in">dinic</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>树链剖分</title>
    <url>/OI/heavy-path-decomposition/</url>
    <content><![CDATA[<p>树链剖分。<br>Luogu P3384</p>
<span id="more"></span>

<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>树链剖分（简称“树剖”，又称“重链剖分”）是一种将一棵树转化为一段连续的区间的方法。<br>这种方法可以将一棵树根据子树大小，也就是所谓的“重儿子”和“轻儿子”，来将一棵树划分成若干条”重链“，并可以保证，在任意一条路径上的连续的链都不超过 $\log_2{n}$ 个。</p>
<p>树剖可以借助一些数据结构（如线段树）来以 $O(\log n)$ 的复杂度维护数上路径的信息，如“修改<strong>树上两点之间的路径上</strong>所有点的值”和“查询<strong>树上两点之间的路径上</strong>节点权值的<strong>和&#x2F;极值&#x2F;其他</strong>(在序列上可以用数据结构维护的、便于合并的信息)”等等。</p>
<p>当然，除了上面那样做，树剖还可以快速地求LCA。</p>
<p>树剖在洛谷上有一道模板题：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMzODQ=">Luogu P3384</span><br>一道比较经典的例题：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDIxNDY=">Luogu P2146 [NOI2015] 软件包管理器</span></p>
<h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><p>树剖的思想是，将一棵树按照“重边”来划分称为若干条“重链”。<br>当然，这里的“重链”只是指的一种常用的情况，其他的划分方法比如“长链剖分”等等就不在此赘述了。</p>
<h2 id="重链"><a href="#重链" class="headerlink" title="重链"></a>重链</h2><p>“重链”的定义是若干条首尾衔接的“重边”。<br>那么，如果想要了解“重链”，就需要先了解<strong>重边</strong>。</p>
<h3 id="重边"><a href="#重边" class="headerlink" title="重边"></a>重边</h3><p>“重边”的划分标准是它连接向一个重儿子。<br>这里需要注意的是，它只需要结束于一个重儿子，而无其他限制。<br>那么“重儿子”呢？</p>
<h3 id="重儿子"><a href="#重儿子" class="headerlink" title="重儿子"></a>重儿子</h3><p>“重儿子”是“重子节点”的别称。<br>我们判断一个子节点是否为重子节点的标准是它的子树大小。</p>
<p>对于一个节点的所有儿子，其中子树最大的那个儿子称为“重儿子”，其余的，则相对地称之为“轻儿子”。<br>连接某个节点和其重儿子的边叫做“重边”，而连接其与其轻儿子的边则相应地叫做“轻边”。</p>
<h2 id="划分"><a href="#划分" class="headerlink" title="划分"></a>划分</h2><p>我们首先看一下例子：</p>
<p><img src="https://s2.loli.net/2021/12/29/iVkNYOTprWKF2Lz.png" alt="树剖1.png"></p>
<p>这是一棵树。<br>对于上面的这一棵树，我们可以进行如下的一些标记：<br>我们首先按照深度进行分层：</p>
<p><img src="https://s2.loli.net/2021/12/29/Jgwz7DUojWMBms1.png" alt="树剖2.png"></p>
<p>然后标出子树的大小：</p>
<p><img src="https://s2.loli.net/2021/12/29/4Xcb2qKiFyD6IdM.png" alt="树剖3.png"></p>
<p>然后标出轻儿子、重儿子、轻边和重边：</p>
<p><img src="https://s2.loli.net/2021/12/29/ACztKMokjJgmYx7.png" alt="树剖4.png"></p>
<p>然后标出重链：</p>
<p><img src="https://s2.loli.net/2021/12/29/4nWDzp72RSkBE1l.png" alt="树剖5.png"></p>
<p>最后标出DFS序：</p>
<p><img src="https://s2.loli.net/2021/12/29/bS7Y1wiOglACmkt.png" alt="树剖6.png"></p>
<p>这样就大功告成了。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>树剖的实现是通过两个DFS进行的。</p>
<p>我们这次使用邻接表来存储树的边信息：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> w[N], h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个DFS记录了每个节点的父节点(vater)、深度(depth)、子树大小(sz)和重儿子(son)：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> vater, <span class="type">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[p] = depth, fa[p] = vater, sz[p] = <span class="number">1</span>;<span class="comment">//初始化节点状态，记录其深度和父节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])<span class="comment">//遍历其所有儿子</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == vater) <span class="keyword">continue</span>;<span class="comment">//防止遍历其父亲</span></span><br><span class="line">        <span class="built_in">dfs1</span>(j, p, depth + <span class="number">1</span>);<span class="comment">//搜索当前儿子</span></span><br><span class="line">        sz[p] += sz[j];<span class="comment">//更新子树大小</span></span><br><span class="line">        <span class="keyword">if</span>(sz[son[p]] &lt; sz[j]) son[p] = j;<span class="comment">//判断是否为重儿子</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二个DFS记录了每个节点所在重链的链顶节点(top)、dfs序(id)和重新定向的节点权值(nw)：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[p] = ++cnt, nw[cnt] = w[p], top[p] = t;<span class="comment">//初始化节点信息，记录其DFS序</span></span><br><span class="line">    <span class="keyword">if</span>(!son[p]) <span class="keyword">return</span>;<span class="comment">//是否为叶节点</span></span><br><span class="line">    <span class="built_in">dfs2</span>(son[p], t);<span class="comment">//优先搜索在同一条重链上的重儿子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == fa[p] || j == son[p]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(j, j);<span class="comment">//搜索轻儿子，开一条新的重链，链顶为当前轻儿子</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>树剖可以在 $O(n) \sim O(\log n)$ 的时间复杂度内求出两个点的LCA。</p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="板子题"><a href="#板子题" class="headerlink" title="板子题"></a>板子题</h2><p>洛谷上面提供了板子题。<br>题面见<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMzODQ=">这里</span>。<br>代码正确性见<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3JlY29yZC82NTkwNzI2Mg==">提交记录</span>。</p>
<p>我们首先照常打出线段树部分（<del>不会的可以看<a href="">这篇博客</a></del>各位读者们一定已经会线段树了罢）；<br>两个DFS也是已经有了的代码（见上面）；<br>然后就有了这篇代码的核心部分。</p>
<p>之后就是对题目要求功能的实现。</p>
<p>题目要求我们这样做：</p>
<blockquote>
<ol>
<li>将树从 x 到 y 结点最短路径上所有节点的值都加上 z。</li>
<li>求树从 x 到 y 结点最短路径上所有节点的值之和。</li>
<li>将以 x 为根节点的子树内所有节点值都加上 z。</li>
<li>求以 x 为根节点的子树内所有节点值之和。</li>
</ol>
</blockquote>
<p>我们分类型进行实现。</p>
<p>对于那些对某一棵子树进行的操作，我们直接调用线段树来进行操作，因为对于任意一棵子树，它里面的所有节点的DFS序就是连续的，也就意味着可以被当成一段区间来进行操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addtree</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">segadd</span>(<span class="number">1</span>, id[p], id[p] + sz[p] - <span class="number">1</span>, k);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sumtree</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">segsum</span>(<span class="number">1</span>, id[p], id[p] + sz[p] - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而对于路径的操作，我们使用这样一种策略：边走边计算。<br>首先，我们求出这一条最短路，也就是求出它们的最近公共祖先。<br>我们使用这样的思路来寻找他们的LCA：</p>
<p>我们从较深的那一个节点开始不断向上跳重链，直到跳到与较浅的节点同一条重链上为止。此时，深度较浅的那一个就是他们的LCA。</p>
<p>于是我们就可以写出路径加、路径求和的代码了：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addpath</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[p] != top[q])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[p]] &lt; dep[top[q]]) <span class="built_in">swap</span>(p, q);</span><br><span class="line">        <span class="built_in">segadd</span>(<span class="number">1</span>, id[top[p]], id[p], k);</span><br><span class="line">        p = fa[top[p]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[p] &lt; dep[q]) <span class="built_in">swap</span>(p, q);</span><br><span class="line">    <span class="built_in">segadd</span>(<span class="number">1</span>, id[q], id[p], k);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sumpath</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[p] != top[q])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[p]] &lt; dep[top[q]]) <span class="built_in">swap</span>(p, q);</span><br><span class="line">        res += <span class="built_in">segsum</span>(<span class="number">1</span>, id[top[p]], id[p]);</span><br><span class="line">        p = fa[top[p]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[p] &lt; dep[q]) <span class="built_in">swap</span>(p, q);</span><br><span class="line">    res += <span class="built_in">segsum</span>(<span class="number">1</span>, id[q], id[p]);</span><br><span class="line">    <span class="keyword">return</span> res % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后放一遍完整代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3384/p3384.cpp"><code>Luogu P3384</code></a></p>
<h2 id="NOI2015-软件包管理器"><a href="#NOI2015-软件包管理器" class="headerlink" title="[NOI2015] 软件包管理器"></a>[NOI2015] 软件包管理器</h2><p>也是一道树剖的经典题目。</p>
<p>我们仔细想一下就可以知道，<code>install</code>操作可以将从当前节点到根节点的所有未安装的软件全部安装，而<code>uninstall</code>会将其子树内的所有软件一并卸载。</p>
<p>然后就是区间推平了。</p>
<p>详细的解释可以看我的<a href="/solutions/solution-p2146/">题解</a>。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>K-D 树</title>
    <url>/OI/kd-tree/</url>
    <content><![CDATA[<p>一种高效处理 $k$ 维空间中的信息的数据结构。</p>
<span id="more"></span>

<p>K-D Tree 全称是叫 K-Dimentional Tree，是一棵二叉树。<br>一般我们用到K-D Tree的时候，这个 $k$ 是等于2的。</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>我们就以 $k$ 等于2为例：</p>
<p>假设我们当前有一个二维<del>空间</del>平面，上面有一堆点；</p>
<img src="https://s2.loli.net/2022/06/22/XMeF9ofAaBg1PUQ.png" width="60%">

<p>然后我们需要对这个平面上的12个点建立一棵K-D树。</p>
<h2 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h2><p>建立的过程是这个样子的：</p>
<p>首先我们随便拿一维开始，就拿x这一维了。<br>然后我们找到这个维度中的中位数，在这个点上画一条直线，将平面分成两半：</p>
<img src="https://s2.loli.net/2022/06/22/mhDXF6GO3tsW8Z5.png" width="60%">

<p>然后继续建立，只不过我们为了在每一维都能够有较高的访问效率，这次我们换一维：</p>
<img src="https://s2.loli.net/2022/06/22/a3DnuNJEPzYRHBd.png" width="60%">

<p>然后继续，直到某一个长方形之内没有点了。</p>
<img src="https://s2.loli.net/2022/06/22/p3osUmeyxLtgOCN.png" width="60%">

<p>然后最终我们建立出来的树长这个样子：</p>
<p><img src="https://s2.loli.net/2022/08/18/QwBcK8F5q1IJZS7.png" alt="kd7.png"></p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>K-D树的删除使用惰性删除，利用类似<a href="/OI/scapegoat-tree">替罪羊树</a>的思想，暴力重构即可。</p>
<p>当然，还可以是朝鲜树，因为也是暴力重构。</p>
<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>假设我们现在要在这里插入一个点 $N&#x3D;(7,3)$。</p>
<img src="https://s2.loli.net/2022/06/22/a9pGS4hXQL75bqZ.png" width="60%">

<p>我们这样来检索：</p>
<p>我们从根节点开始。</p>
<p>首先它在当前节点 $A&#x3D;(6,3)$ 的右边，所以走到右子树；<br>然后它在当前节点 $B&#x3D;(8,5)$ 的下边，所以走到右子树；<br>然后它在当前节点 $J&#x3D;(8,1)$ 的左边，所以走到左子树；</p>
<p>然后我们就发现，当前节点是个空节点。</p>
<p>于是就将 $N$ 加到当前节点上即可。</p>
<p>我们的树就变成了这个样子：</p>
<p><img src="https://s2.loli.net/2022/08/18/Z59VySfXmIgGoLF.png" alt="kd8.png"></p>
<p>不要忘记给点 $N$ 加一条分割线，即使这根本在建树的时候完全体现不出来：</p>
<img src="https://s2.loli.net/2022/06/22/xl3X8ZHzrkDa9Kf.png" width="60%">

<h1 id="维护信息"><a href="#维护信息" class="headerlink" title="维护信息"></a>维护信息</h1><p>K-D Tree可以当做线段树来用，只不过每一个节点都维护的是一个 $k$ 维长方体。</p>
<p>还是刚才这个图，我们将每一个节点维护的矩形的范围定为这样一块：</p>
<img src="https://s2.loli.net/2022/06/22/sA9RILfw3mPFr8X.png" width="60%">

<p>上面就是 $K$ 这个节点维护的矩形范围。</p>
<p>其父节点，$F$，维护的范围如下：</p>
<img src="https://s2.loli.net/2022/06/22/Vwvfgl6sFzpbGHa.png" width="60%">

<p>我们可以看出，K-D Tree 维护的矩形范围十分类似线段树维护的区间范围，某一个节点维护的矩形一定会覆盖其两个子节点维护的矩形，且其两个子节点维护的矩形的并就是这个节点维护的矩形。</p>
<p>所以我们可以对其进行类似线段树上的操作，比如说统计区间和什么的。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>因为KDT是基于替罪羊树的，这里只看与替罪羊树不同的地方。</p>
<h2 id="pushup"><a href="#pushup" class="headerlink" title="pushup"></a>pushup</h2><p>因为维护信息不同，pushup也不一样了。</p>
<p>我们pushup的时候需要将当前节点维护的区间的范围也更新上。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].l[<span class="number">0</span>] = tr[p].r[<span class="number">0</span>] = tr[p].p.x[<span class="number">0</span>];</span><br><span class="line">    tr[p].l[<span class="number">1</span>] = tr[p].r[<span class="number">1</span>] = tr[p].p.x[<span class="number">1</span>];</span><br><span class="line">    tr[p].sum = tr[p].p.w;</span><br><span class="line">    tr[p].sz = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].ls)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].l[<span class="number">0</span>] = <span class="built_in">min</span>(tr[p].l[<span class="number">0</span>], tr[tr[p].ls].l[<span class="number">0</span>]);</span><br><span class="line">        tr[p].l[<span class="number">1</span>] = <span class="built_in">min</span>(tr[p].l[<span class="number">1</span>], tr[tr[p].ls].l[<span class="number">1</span>]);</span><br><span class="line">        tr[p].r[<span class="number">0</span>] = <span class="built_in">max</span>(tr[p].r[<span class="number">0</span>], tr[tr[p].ls].r[<span class="number">0</span>]);</span><br><span class="line">        tr[p].r[<span class="number">1</span>] = <span class="built_in">max</span>(tr[p].r[<span class="number">1</span>], tr[tr[p].ls].r[<span class="number">1</span>]);</span><br><span class="line">        tr[p].sum += tr[tr[p].ls].sum;</span><br><span class="line">        tr[p].sz += tr[tr[p].ls].sz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].rs)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].l[<span class="number">0</span>] = <span class="built_in">min</span>(tr[p].l[<span class="number">0</span>], tr[tr[p].rs].l[<span class="number">0</span>]);</span><br><span class="line">        tr[p].l[<span class="number">1</span>] = <span class="built_in">min</span>(tr[p].l[<span class="number">1</span>], tr[tr[p].rs].l[<span class="number">1</span>]);</span><br><span class="line">        tr[p].r[<span class="number">0</span>] = <span class="built_in">max</span>(tr[p].r[<span class="number">0</span>], tr[tr[p].rs].r[<span class="number">0</span>]);</span><br><span class="line">        tr[p].r[<span class="number">1</span>] = <span class="built_in">max</span>(tr[p].r[<span class="number">1</span>], tr[tr[p].rs].r[<span class="number">1</span>]);</span><br><span class="line">        tr[p].sum += tr[tr[p].rs].sum;</span><br><span class="line">        tr[p].sz += tr[tr[p].rs].sz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>我们重构的时候需要注意，不再是直接取当前区间的mid，而是用<code>nth_element</code>来取出当前区间的中位数。<br>为此，我们还需要分别给两个维度写两个比较函数。<br>更高维的可以尝试使用全局变量。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp0</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x[<span class="number">0</span>] &lt; b.x[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x[<span class="number">1</span>] &lt; b.x[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">canrbu</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1.0</span> * <span class="built_in">max</span>(tr[tr[p].ls].sz, tr[tr[p].rs].sz)) &gt;= (alpha * tr[p].sz);</span><br><span class="line">&#125;</span><br><span class="line">Point ldr[N];</span><br><span class="line"><span class="type">int</span> ldc;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbuunf</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">rbuunf</span>(tr[p].ls);</span><br><span class="line">    <span class="keyword">if</span>(tr[p].p.w)</span><br><span class="line">    &#123;</span><br><span class="line">        ldr[++ldc] = tr[p].p;</span><br><span class="line">        rec[++tt] = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rbuunf</span>(tr[p].rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rbubld</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> p = <span class="built_in">newnode</span>();</span><br><span class="line">    <span class="built_in">nth_element</span>(ldr + l, ldr + mid, ldr + r + <span class="number">1</span>, k ? cmp1 : cmp0);</span><br><span class="line">    tr[p].p = ldr[mid];</span><br><span class="line">    tr[p].ls = <span class="built_in">rbubld</span>(l, mid - <span class="number">1</span>, k ^ <span class="number">1</span>);</span><br><span class="line">    tr[p].rs = <span class="built_in">rbubld</span>(mid + <span class="number">1</span>, r, k ^ <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbuild</span><span class="params">(<span class="type">int</span> &amp;p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ldc = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rbuunf</span>(p);</span><br><span class="line">    p = <span class="built_in">rbubld</span>(<span class="number">1</span>, ldc, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>这里是查询的矩形内的权值和。</p>
<p>对于一个矩形来说，我们需要看当前查询区间是否包含这个矩形。<br>如果完全包含的话就直接返回矩形权值和，如果不完全包含的话就需要往下递归了，而如果完全不包含的话就直接返回0即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">inc</span><span class="params">(Point p, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p.x[<span class="number">0</span>] &gt;= x1) &amp;&amp; (p.x[<span class="number">0</span>] &lt;= x2) &amp;&amp; (p.x[<span class="number">1</span>] &gt;= y1) &amp;&amp; (p.x[<span class="number">1</span>] &lt;= y2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">inc</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (tr[p].l[<span class="number">0</span>] &gt;= x1) &amp;&amp; (tr[p].r[<span class="number">0</span>] &lt;= x2) &amp;&amp; (tr[p].l[<span class="number">1</span>] &gt;= y1) &amp;&amp; (tr[p].r[<span class="number">1</span>] &lt;= y2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">exc</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (tr[p].l[<span class="number">0</span>] &gt; x2) || (tr[p].r[<span class="number">0</span>] &lt; x1) || (tr[p].l[<span class="number">1</span>] &gt; y2) || (tr[p].r[<span class="number">1</span>] &lt; y1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">exc</span>(p, x1, y1, x2, y2))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">inc</span>(p, x1, y1, x2, y2))<span class="keyword">return</span> tr[p].sum;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">inc</span>(tr[p].p, x1, y1, x2, y2))res += tr[p].p.w;</span><br><span class="line">    res += <span class="built_in">query</span>(tr[p].ls, x1, y1, x2, y2);</span><br><span class="line">    res += <span class="built_in">query</span>(tr[p].rs, x1, y1, x2, y2);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="全部加起来"><a href="#全部加起来" class="headerlink" title="全部加起来"></a>全部加起来</h2><p>参考代码：</p>
<details class="note success"><summary><p>参考代码</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500010</span>;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x[<span class="number">2</span>], w;</span><br><span class="line">    <span class="built_in">Point</span>() &#123;&#125;;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> _x, <span class="type">int</span> _y, <span class="type">int</span> _w)</span><br><span class="line">    &#123;</span><br><span class="line">        x[<span class="number">0</span>] = _x, x[<span class="number">1</span>] = _y, w = _w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> (a.x[<span class="number">0</span>] == b.x[<span class="number">0</span>]) &amp;&amp; (a.x[<span class="number">1</span>] == b.x[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> alpha = <span class="number">0.75</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">KDT</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ls, rs;</span><br><span class="line">    <span class="type">int</span> l[<span class="number">2</span>], r[<span class="number">2</span>];<span class="comment">//[l,u],[r,d]</span></span><br><span class="line">    <span class="type">int</span> sum, sz;</span><br><span class="line">    Point p;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="type">int</span> rt, idx = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> rec[N], tt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tt)<span class="keyword">return</span> rec[tt--];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ++idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].l[<span class="number">0</span>] = tr[p].r[<span class="number">0</span>] = tr[p].p.x[<span class="number">0</span>];</span><br><span class="line">    tr[p].l[<span class="number">1</span>] = tr[p].r[<span class="number">1</span>] = tr[p].p.x[<span class="number">1</span>];</span><br><span class="line">    tr[p].sum = tr[p].p.w;</span><br><span class="line">    tr[p].sz = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].ls)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].l[<span class="number">0</span>] = <span class="built_in">min</span>(tr[p].l[<span class="number">0</span>], tr[tr[p].ls].l[<span class="number">0</span>]);</span><br><span class="line">        tr[p].l[<span class="number">1</span>] = <span class="built_in">min</span>(tr[p].l[<span class="number">1</span>], tr[tr[p].ls].l[<span class="number">1</span>]);</span><br><span class="line">        tr[p].r[<span class="number">0</span>] = <span class="built_in">max</span>(tr[p].r[<span class="number">0</span>], tr[tr[p].ls].r[<span class="number">0</span>]);</span><br><span class="line">        tr[p].r[<span class="number">1</span>] = <span class="built_in">max</span>(tr[p].r[<span class="number">1</span>], tr[tr[p].ls].r[<span class="number">1</span>]);</span><br><span class="line">        tr[p].sum += tr[tr[p].ls].sum;</span><br><span class="line">        tr[p].sz += tr[tr[p].ls].sz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].rs)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].l[<span class="number">0</span>] = <span class="built_in">min</span>(tr[p].l[<span class="number">0</span>], tr[tr[p].rs].l[<span class="number">0</span>]);</span><br><span class="line">        tr[p].l[<span class="number">1</span>] = <span class="built_in">min</span>(tr[p].l[<span class="number">1</span>], tr[tr[p].rs].l[<span class="number">1</span>]);</span><br><span class="line">        tr[p].r[<span class="number">0</span>] = <span class="built_in">max</span>(tr[p].r[<span class="number">0</span>], tr[tr[p].rs].r[<span class="number">0</span>]);</span><br><span class="line">        tr[p].r[<span class="number">1</span>] = <span class="built_in">max</span>(tr[p].r[<span class="number">1</span>], tr[tr[p].rs].r[<span class="number">1</span>]);</span><br><span class="line">        tr[p].sum += tr[tr[p].rs].sum;</span><br><span class="line">        tr[p].sz += tr[tr[p].rs].sz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp0</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x[<span class="number">0</span>] &lt; b.x[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x[<span class="number">1</span>] &lt; b.x[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">canrbu</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1.0</span> * <span class="built_in">max</span>(tr[tr[p].ls].sz, tr[tr[p].rs].sz)) &gt;= (alpha * tr[p].sz);</span><br><span class="line">&#125;</span><br><span class="line">Point ldr[N];</span><br><span class="line"><span class="type">int</span> ldc;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbuunf</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">rbuunf</span>(tr[p].ls);</span><br><span class="line">    <span class="keyword">if</span>(tr[p].p.w)</span><br><span class="line">    &#123;</span><br><span class="line">        ldr[++ldc] = tr[p].p;</span><br><span class="line">        rec[++tt] = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rbuunf</span>(tr[p].rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rbubld</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> p = <span class="built_in">newnode</span>();</span><br><span class="line">    <span class="built_in">nth_element</span>(ldr + l, ldr + mid, ldr + r + <span class="number">1</span>, k ? cmp1 : cmp0);</span><br><span class="line">    tr[p].p = ldr[mid];</span><br><span class="line">    tr[p].ls = <span class="built_in">rbubld</span>(l, mid - <span class="number">1</span>, k ^ <span class="number">1</span>);</span><br><span class="line">    tr[p].rs = <span class="built_in">rbubld</span>(mid + <span class="number">1</span>, r, k ^ <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbuild</span><span class="params">(<span class="type">int</span> &amp;p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ldc = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rbuunf</span>(p);</span><br><span class="line">    p = <span class="built_in">rbubld</span>(<span class="number">1</span>, ldc, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;p, Point v, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)</span><br><span class="line">    &#123;</span><br><span class="line">        p = <span class="built_in">newnode</span>();</span><br><span class="line">        tr[p].ls = tr[p].rs = <span class="number">0</span>;</span><br><span class="line">        tr[p].p = v;</span><br><span class="line">        <span class="built_in">pushup</span>(p);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(v.x[k] &lt;= tr[p].p.x[k])<span class="built_in">insert</span>(tr[p].ls, v, k ^ <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">insert</span>(tr[p].rs, v, k ^ <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">canrbu</span>(p))<span class="built_in">rbuild</span>(p, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">inc</span><span class="params">(Point p, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p.x[<span class="number">0</span>] &gt;= x1) &amp;&amp; (p.x[<span class="number">0</span>] &lt;= x2) &amp;&amp; (p.x[<span class="number">1</span>] &gt;= y1) &amp;&amp; (p.x[<span class="number">1</span>] &lt;= y2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">inc</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (tr[p].l[<span class="number">0</span>] &gt;= x1) &amp;&amp; (tr[p].r[<span class="number">0</span>] &lt;= x2) &amp;&amp; (tr[p].l[<span class="number">1</span>] &gt;= y1) &amp;&amp; (tr[p].r[<span class="number">1</span>] &lt;= y2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">exc</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (tr[p].l[<span class="number">0</span>] &gt; x2) || (tr[p].r[<span class="number">0</span>] &lt; x1) || (tr[p].l[<span class="number">1</span>] &gt; y2) || (tr[p].r[<span class="number">1</span>] &lt; y1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">exc</span>(p, x1, y1, x2, y2))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">inc</span>(p, x1, y1, x2, y2))<span class="keyword">return</span> tr[p].sum;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">inc</span>(tr[p].p, x1, y1, x2, y2))res += tr[p].p.w;</span><br><span class="line">    res += <span class="built_in">query</span>(tr[p].ls, x1, y1, x2, y2);</span><br><span class="line">    res += <span class="built_in">query</span>(tr[p].rs, x1, y1, x2, y2);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> lastans = <span class="number">0</span>, op;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op), op != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x, y, w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);</span><br><span class="line">            x ^= lastans, y ^= lastans, w ^= lastans;</span><br><span class="line">            <span class="built_in">insert</span>(rt, <span class="built_in">Point</span>(x, y, w), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">            x1 ^= lastans, y1 ^= lastans, x2 ^= lastans, y2 ^= lastans;</span><br><span class="line">            lastans = <span class="built_in">query</span>(rt, x1, y1, x2, y2);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, lastans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="洛谷-P4148-简单题"><a href="#洛谷-P4148-简单题" class="headerlink" title="洛谷 P4148 简单题"></a>洛谷 P4148 简单题</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQxNDg=">题目链接</span></p>
<p>上面放的代码就是该题的代码。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP 算法与前缀函数</title>
    <url>/OI/kmp/</url>
    <content><![CDATA[<p>KMP算法与前缀函数。</p>
<span id="more"></span>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>KMP算法，全称为 Knuth-Morris-Pratt 算法，是由 Knuth, Morris 和 Pratt 这三个人创造的算法，可以在 $O(n+m)$ 的时间内使用 $O(n)$ 的空间完成如下的任务：</p>
<blockquote>
<p>给定一个字符串 $S$ 和一个模式串 $T$，求出 $S$ 在 $T$ 中所有出现的位置。</p>
</blockquote>
<p>其中 $|S| &#x3D; n$，$|T| &#x3D; m$。</p>
<p>KMP算法主要依赖的是 “Next函数” 这个东西。</p>
<h1 id="Next函数"><a href="#Next函数" class="headerlink" title="Next函数"></a>Next函数</h1><p>Next函数，有时候也被称作 “前缀函数”，是KMP算法的核心部分。<br>我们以一个数组 $\pi$ 来表示它。</p>
<p>其旨在求得任意一个前缀的border长度。</p>
<h2 id="什么是border？"><a href="#什么是border？" class="headerlink" title="什么是border？"></a>什么是border？</h2><p>border指的是一个字符串内，真前缀和真后缀相等的那一部分。<br>这样的真前缀和真后缀可能有很多种，我们需要找的是最长的那一组。</p>
<p>真前缀和真后缀说的是前缀和后缀中除去字符串本身之后剩下的部分。</p>
<h2 id="如何求得border？"><a href="#如何求得border？" class="headerlink" title="如何求得border？"></a>如何求得border？</h2><h3 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a>朴素算法</h3><p>我们显然可以暴力扫，最终的复杂度是 $O(n^3)$ 的。</p>
<p>懒得写了，直接搬了OI-Wiki的代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ Version</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefix_function</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = ( <span class="type">int</span> )s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pi</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">substr</span>(<span class="number">0</span>, j) == s.<span class="built_in">substr</span>(i - j + <span class="number">1</span>, j))</span><br><span class="line">            &#123;</span><br><span class="line">                pi[i] = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python Version</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prefix_function</span>(<span class="params">s</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(s)</span><br><span class="line">    pi = [<span class="number">0</span>] * n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> s[<span class="number">0</span> : j] == s[i - j + <span class="number">1</span> : i + <span class="number">1</span>]:</span><br><span class="line">                pi[i] = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> pi</span><br></pre></td></tr></table></figure>

<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>我们会发现，相邻的两个函数值最多会增加1。</p>
<p>也就是说，当我们移动到下一个位置时，Next函数的值要么增加一，要么维持不变，要么减少。</p>
<p>此时改进的算法如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ Version</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefix_function</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = ( <span class="type">int</span> )s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pi</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = pi[i - <span class="number">1</span>] + <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)  <span class="comment">// improved: j=i =&gt; j=pi[i-1]+1</span></span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">substr</span>(<span class="number">0</span>, j) == s.<span class="built_in">substr</span>(i - j + <span class="number">1</span>, j))</span><br><span class="line">            &#123;</span><br><span class="line">                pi[i] = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python Version</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prefix_function</span>(<span class="params">s</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(s)</span><br><span class="line">    pi = [<span class="number">0</span>] * n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pi[i - <span class="number">1</span>] + <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> s[<span class="number">0</span> : j] == s[i - j + <span class="number">1</span> : i + <span class="number">1</span>]:</span><br><span class="line">                pi[i] = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> pi</span><br></pre></td></tr></table></figure>

<p>此时，我们每一个前缀最多需要比对 $O(n)$ 级别的字符串，总复杂度降到了 $O(n^2)$。</p>
<h3 id="继续优化"><a href="#继续优化" class="headerlink" title="继续优化"></a>继续优化</h3><p>刚才我们只考虑到了 $s[i+1] &#x3D; s[\pi[i]]$ 的情况，即函数值增加1。<br>那么对于其他的情况呢？</p>
<p>我们考虑 $s[i+1] \neq s[\pi[i]]$。<br>在我们之前的想法里面，我们就需要枚举出来可能的border长度，并与实际情况进行比较。</p>
<p>我们尝试避免这些无谓的比较。</p>
<p>我们尝试找到一个前缀，在保证其与后缀相等的前提下，使得我们当前匹配的进度最大地保留下来。</p>
<p>观察一下我们想要找到的东西：</p>
<img src="/pics/kmp1.png" width="50%" />

<p>我们想要找到两个字符串 $s[0 \to j-1]$ 和 $s[i-j+1 \to i]$，他们完全相等，同时也分别是 $s[0 \to i]$ 的一个前缀和一个后缀。</p>
<p>我们发现，这两个字符串是完全包含在 $s[0 \to \pi[i]-1]$ 和 $s[i-\pi[i]+1 \to i]$ 这两个完全相等的字符串内的。</p>
<p>所以，我们就可以将其转化成为寻找字符串 $s[0 \to \pi[i]-1]$ 的border。</p>
<p>所以说，我们需要找的就是 $s[0 \to \pi[\pi[i]]-1]$ 和 $s[i-\pi[\pi[i]]+1 \to i]$。</p>
<p>然后我们尝试将 $s_{i+1}$ 纳入我们当前找到的border里面。</p>
<p>如果匹配，那就向前移动；<br>如果失配，那就继续寻找当前长度的border，直到最后到达0。</p>
<p>此时改进的算法如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ Version</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefix_function</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = ( <span class="type">int</span> )s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pi</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = pi[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j]) j = pi[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[i] == s[j]) j++;</span><br><span class="line">        pi[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python Version</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prefix_function</span>(<span class="params">s</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(s)</span><br><span class="line">    pi = [<span class="number">0</span>] * n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        j = pi[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> s[i] != s[j]:</span><br><span class="line">            j = pi[j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> s[i] == s[j]:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        pi[i] = j</span><br><span class="line">    <span class="keyword">return</span> pi</span><br></pre></td></tr></table></figure>

<p>同时我们还可以发现，我们进行优化过的算法是一个在线算法。</p>
<h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><p>现在终于来到了KMP算法的本体部分。</p>
<p>我们考虑根据题目给定的 $S$ 和 $T$ 两个字符串，拼接成一个新的字符串 $S+ \# +T$ ，其中 $\#$ 代表在 $S$ 和 $T$ 中都没有出现过的分隔符。</p>
<p>我们考虑计算新字符串 $T$ 部分的Next函数。</p>
<p>因为对于 $T$ 部分的每一个位置，其位置所对应的前缀绝对包含 $S$ 和分隔符的。<br>所以，其Next函数长度绝对不会超过 $n$。（即 $|S|$）</p>
<p>同时，我们保证了只会比对 $T$ 部分的字串，因为分隔符的出现使得包含其的后缀无法与同样长度的前缀匹配，因为这个字符不在 $S$ 或 $T$ 中出现过，而假如前缀中也包含了它，也会因为位置不一样而无法匹配。</p>
<p>所以说，如果在某一个位置 $i$ 有 $\pi[i] &#x3D; n$ 成立，那么 $S$ 就会在 $T$ 的 $i-2n$ 处出现。</p>
<p>洛谷例题：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMzNzU=">https://www.luogu.com.cn/problem/P3375</span></p>
<p>示例代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3375/p3375.cpp"><code>Luogu P3375</code></a></p>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="求一个字符串的周期"><a href="#求一个字符串的周期" class="headerlink" title="求一个字符串的周期"></a>求一个字符串的周期</h2><p>我们考虑利用border的性质。</p>
<p>如果一个字符串 $s$ 有长度为 $r$ 的border，那么 $|s| - r$ 一定是 $s$ 的周期，其长度我们这里记作 $p$。</p>
<p>就像这样：</p>
<img src="/pics/kmp2.svg" alt="kmp2.svg" width="50%" />

<p>从这里我们可以得出 $s[0 \to 1]&#x3D;s[2 \to 3]&#x3D;s[4 \to 5]&#x3D;s[6 \to 7]$，从而得出 $r-|s|&#x3D;2$ 为 $s$ 的周期。</p>
<p>同时，如果这个周期的长度 $p$ 可以被 $|s|$ 整除的话，那么长度为 $p$ 的前缀就是 $s$ 的最小循环元。</p>
<p>AcWing例题：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMTQzLw==">https://www.acwing.com/problem/content/143/</span></p>
<p>参考代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/AcWing/141/ac141.cpp"><code>AcWing 141</code></a></p>
]]></content>
      <categories>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>扫描线</title>
    <url>/OI/scanning-line/</url>
    <content><![CDATA[<p>一种便携的用来求矩形面积并的算法。</p>
<span id="more"></span>

<h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><p>顾名思义，扫描线就是要模拟一根线，扫过整个图形。至于方向什么的自己根据喜好，这里选用从左往右的方式。</p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="朴素做法"><a href="#朴素做法" class="headerlink" title="朴素做法"></a>朴素做法</h2><p>首先我们看一下这个例子：</p>
<img src="https://i.loli.net/2021/11/12/ykmlLC6RpHTZbUf.png" alt="扫描线1.png" width="60%" />

<p>我们有三个矩形，分别用红、蓝、绿三色标注了出来。<br>他们相交的面积用其他的颜色标了出来。</p>
<p>我们所得到的信息只有矩形的左下端点和右上端点的坐标。也就是我们标红的这几个点：</p>
<img src="https://i.loli.net/2021/11/12/Naw9ZzMXnA6Jt7d.png" alt="扫描线2.png" width="60%" />

<p>然后我们可以画出一根线来，扫过这个多边形的所有面积。<br>这根线从最左边的边开始，每遇到一条边，就停下来计算之前扫到的面积，即为距上一条边的距离与扫描线落在图形上的长度之积，再加到之前的和上面。<br>用动画来做就是这样的：</p>
<img src="https://s2.loli.net/2021/12/29/zsg32tJnWbykfBo.gif" alt="扫描线3.gif" width="60%" />

<p>但是这样做有一处需要注意的地方： <strong>我们怎么才能知道每一次遇到一条边之后扫描线落在图像上的长度是多少</strong> ？<br>如果我们每一次都去枚举、去找，我们程序的时间复杂度就达不到我们的要求了。<br>这就是扫描线算法的精髓之处。</p>
<h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h3><p>我们把 $y$ 轴上的一段区间按照每一个存在的矩形的边的高度值分一下块：</p>
<img src="https://i.loli.net/2021/11/12/pkELge24OblfDxI.png" alt="扫描线4.png" width="60%" />

<p>我们只需要计算每一段所对应的在 $x$ 轴上的长度就行了。</p>
<p>我们可以使用线段树这一强大的数据结构来帮助我们更快地进行区间修改。</p>
<img src="https://i.loli.net/2021/11/12/W3OLxhVenapUIfH.png" alt="扫描线5.png" width="60%" />

<h3 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h3><p>我们在遇到某个矩形的一条边的时候，我们需要看一下这两个东西：</p>
<ol>
<li>它的长度；</li>
<li>他是起始边还是终止边。</li>
</ol>
<p>如果是起始边的话，我们把他这条边所包含的所有区块都打上一个标记；如果是终止边的话，我们就把之前起始边打上的标记去掉。这样，只要有标记就是存在，不管有多少个；没有标记就是没有被覆盖，忽略不计。<br>所以，我们的线段树节点需要存储这个区段被标记的次数。同时，我们还需要存储基本的线段树信息，还有它的长度。<br>同时，我们用来存储矩形边的位置我们也需要改一下，使之能够存储这条边的上端点和下端点，还要标记这条边是起始边还是终止边。<br>最终我们使用动画模拟一下就是这个样子的：</p>
<img src="https://s2.loli.net/2021/12/29/UEmq4XVFOWL56eo.gif" alt="扫描线6.gif" width="60%" />

<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>洛谷板子题：Luogu P5490 【模板】 扫描线：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDU0OTA=">https://www.luogu.com.cn/problem/P5490</span></p>
<p>示例代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p5000-p5999/p5490/p5490.cpp"><code>Luogu P5490</code></a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>替罪羊树</title>
    <url>/OI/scapegoat-tree/</url>
    <content><![CDATA[<p>替罪羊树。</p>
<span id="more"></span>

<p>替罪羊树是一种平衡树。</p>
<h1 id="热身"><a href="#热身" class="headerlink" title="热身"></a>热身</h1><p>平衡树一般都是一个二叉搜索树，其满足中序遍历得到的序列就是我们需要维护的原序列。</p>
<p>当然，二叉搜索树可以不平衡，这样就可以构造一个特殊的数据使之退化成为一条链。</p>
<p>那我们怎么定义一棵二叉搜索树“不平衡”呢？</p>
<p>这里需要引入一个概念：平衡指数 $\alpha$。</p>
<p>一棵二叉搜索树的平衡常数等于其子节点大小与其大小的比值。<br>这里取的是最大值。</p>
<p>平衡常数 $\alpha$ 的取值是 $\alpha \in [ 0.5 , 1 ]$。<br>其两个边界代表了两个极端情况：</p>
<p>当 $\alpha &#x3D; 1$ 时，我们不管怎样建造搜索树都会被认为是平衡的，因为其子节点的子树大小永远不可能超过其本身的子树大小。</p>
<p>当 $\alpha &#x3D; 0.5$ 时，我们每一个节点的子节点的子树大小必须恰好是其本身的子树大小的一半。<br>AVL树就在尽力维持这样的平衡，这就导致其代码十分冗长，没有能在OI上有太多实际的应用。<br>在<span class="exturl" data-url="aHR0cHM6Ly93d3cuY3MudXNmY2EuZWR1L35nYWxsZXMvdmlzdWFsaXphdGlvbi9BVkx0cmVlLmh0bWw=">这里</span>有一个AVL树的可视化。</p>
<p>红黑树比较特殊，通过放宽一些过于严苛的要求，其追求的是 $\alpha &#x3D; \frac{2}{3}$，同时降低了常数和代码长度。<br>在<span class="exturl" data-url="aHR0cHM6Ly93d3cuY3MudXNmY2EuZWR1L35nYWxsZXMvdmlzdWFsaXphdGlvbi9SZWRCbGFjay5odG1s">这里</span>有一个红黑树的可视化。</p>
<p>其他的平衡树都是通过一些思想来维持 $\alpha$ 的尽量低。</p>
<p>基于<span class="exturl" data-url="aHR0cHM6Ly9yaXRlbWUuc2l0ZS9ibG9nLzIwMTYtNC02L3NjYXBlZ29hdC5odG1s">这里</span>的数据，我们可以大概得知不同平衡树的 $\alpha$ 大小：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
<th align="center">平均</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Splay</td>
<td align="center">0.758</td>
<td align="center">0.588</td>
<td align="center">0.582</td>
<td align="center">0.612</td>
<td align="center">0.759</td>
<td align="center">0.659</td>
</tr>
<tr>
<td align="center">Treap</td>
<td align="center">0.766</td>
<td align="center">0.578</td>
<td align="center">0.601</td>
<td align="center">0.587</td>
<td align="center">0.781</td>
<td align="center">0.662</td>
</tr>
<tr>
<td align="center">FHQ-Treap</td>
<td align="center">0.914</td>
<td align="center">0.860</td>
<td align="center">0.613</td>
<td align="center">0.678</td>
<td align="center">0.803</td>
<td align="center">0.773</td>
</tr>
</tbody></table>
<p>可见，一般的平衡树都能将 $\alpha$ 维持到 0.6 到 0.8 范围内。</p>
<h2 id="替罪羊树"><a href="#替罪羊树" class="headerlink" title="替罪羊树"></a>替罪羊树</h2><p>替罪羊树最大的特点就是暴力。</p>
<p>怎么暴力呢？</p>
<p>替罪羊树会将不平衡的子树进行重构来保证其平衡。<br>而其判断子树平衡与否就是根据刚才讲的平衡因数 $\alpha$，只不过这里是人为设定的，称之为平衡常数。</p>
<h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><h2 id="暴力重构"><a href="#暴力重构" class="headerlink" title="暴力重构"></a>暴力重构</h2><p>替罪羊树之所以能够平衡，是在于其重构时不是瞎重构，而是将被重构的子树重构为一棵<strong>完全二叉树</strong>。</p>
<p>当然我们都知道这样费时又费力，更何况还是暴力重构的。</p>
<p>所以我们认为设定的平衡常数 $\alpha$ 在此时就起到了决定性的作用。<br>当其值合适的时候，我们就可以将所有的时间复杂度均摊到一个 $O(\log n)$ 的水平。</p>
<p>具体如何暴力重构就不用太多赘述了，我们可以使用简单的方法来保证线性建树，然后将新建的树接过来即可。</p>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>替罪羊树的查询与其他二叉搜索树一样，并且因为其没有对树进行修改，还不会导致产生重构操作，所以最终时间复杂度为 $O(\log n)$。</p>
<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>替罪羊树的插入操作与其他的二叉搜索树差不多。只不过因为其导致了树形态的改变，我们在插入完回溯的过程中还需要判断一下是否需要重构。</p>
<p>当然，还会有一条链上多棵子树不平衡的情况。<br>我们可以将最大的子树重构，但是这样在实际写代码的时候会略显复杂。<br>如果你真的很懒的话，只需要在回溯的时候找到第一棵不平衡的树重构即可，并且据说这个样子对于时间复杂度的影响不会很大。</p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>替罪羊树使用惰性删除，只需要将对应节点上代表节点内数据数量的标记自减一即可。</p>
<p>对于一个节点内数据数量为0的点，我们会忽略对其的任何操作，并在下一次重构时将其丢弃掉，除非再有插入操作将其插入回去。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>替罪羊树的一个节点内需要存储很多信息。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Scapegoat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ls, rs;</span><br><span class="line">    <span class="type">int</span> w, wn;</span><br><span class="line">    <span class="type">int</span> s, sz, sd;</span><br><span class="line">&#125;tr[N];</span><br></pre></td></tr></table></figure>

<p>解释一下：</p>
<ul>
<li><code>ls</code>&amp;<code>rs</code>：左右儿子。</li>
<li><code>w</code>：节点权值。</li>
<li><code>wn</code>：节点内数据数量。</li>
<li><code>s</code>：子树内节点个数。</li>
<li><code>sz</code>：子树内数据个数。</li>
<li><code>sd</code>：子树内不计删除节点的节点个数。</li>
</ul>
<p>我们这样来（重新）计算当前节点的子树大小：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].s = tr[tr[p].ls].s + tr[tr[p].rs].s + <span class="number">1</span>;</span><br><span class="line">    tr[p].sz = tr[tr[p].ls].sz + tr[tr[p].rs].sz + tr[p].wn;</span><br><span class="line">    tr[p].sd = tr[tr[p].ls].sd + tr[tr[p].rs].sd + (tr[p].wn != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>我们重构分两种情况：一是子树不平衡了，即左右子树之一的大小占其本身子树大小的比例超过 $\alpha$；二是被删除的节点太多了，这样也会影响效率。</p>
<p>首先我们需要判断是否需要重构：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">canrbu</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tr[p].wn)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(alpha * tr[p].s &lt;= <span class="built_in">double</span>(<span class="built_in">max</span>(tr[tr[p].ls].s, tr[tr[p].rs].s)))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">double</span>(tr[p].sd) &lt;= alpha * tr[p].s)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="comment">//can rebuild</span></span><br></pre></td></tr></table></figure>

<p>一句话版：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">canrbu</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tr[k].wn &amp;&amp; (alpha * tr[k].s &lt;= ( <span class="type">double</span> )<span class="built_in">max</span>(tr[tr[k].ls].s, tr[tr[k].rs].s) ||</span><br><span class="line">        ( <span class="type">double</span> )tr[k].sd &lt;= alpha * tr[k].s);</span><br><span class="line">&#125;<span class="comment">//can rebuild</span></span><br></pre></td></tr></table></figure>

<p>然后就是重构的具体操作：</p>
<p>首先我们将需要重构的子树经中序遍历展开之后存入数组中，然后将新得到的数组二分建树。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbuunf</span><span class="params">(<span class="type">int</span> &amp;ldc, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">rbuunf</span>(ldc, tr[p].ls);</span><br><span class="line">    <span class="keyword">if</span>(tr[p].wn)ldr[++ldc] = p;</span><br><span class="line">    <span class="built_in">rbuunf</span>(ldc, tr[p].rs);</span><br><span class="line">&#125;<span class="comment">//rebuild-unfold</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">rbubld</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    tr[ldr[mid]].ls = <span class="built_in">rbubld</span>(l, mid);</span><br><span class="line">    tr[ldr[mid]].rs = <span class="built_in">rbubld</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">calc</span>(ldr[mid]);</span><br><span class="line">    <span class="keyword">return</span> ldr[mid];</span><br><span class="line">&#125;<span class="comment">//rebuild-build</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbuild</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ldc = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rbuunf</span>(ldc, p);</span><br><span class="line">    p = <span class="built_in">rbubld</span>(<span class="number">1</span>, ldc);</span><br><span class="line">&#125;<span class="comment">//rebuild</span></span><br></pre></td></tr></table></figure>

<h2 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h2><p>插入时，我们需要找到对应节点并 <code>tr[p].wn++</code>。如果没有节点就新建一个，回溯时需要判断是否能够重构，如果可以的话就重构。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)</span><br><span class="line">    &#123;</span><br><span class="line">        p = ++cnt;</span><br><span class="line">        <span class="keyword">if</span>(!rt)rt = <span class="number">1</span>;</span><br><span class="line">        tr[p].w = k;</span><br><span class="line">        tr[p].ls = tr[p].rs = <span class="number">0</span>;</span><br><span class="line">        tr[p].wn = tr[p].s = tr[p].sz = tr[p].sd = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[p].w == k)tr[p].wn++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].w &lt; k)<span class="built_in">insert</span>(tr[p].rs, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">insert</span>(tr[p].ls, k);</span><br><span class="line">        <span class="built_in">calc</span>(p);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">canrbu</span>(p))<span class="built_in">rbuild</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h2><p>替罪羊树使用惰性删除，找到对应节点之后只需要 <code>tr[p].wn--</code> 即可。当然，回溯时候遇到可以重构的节点时要重构。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">loschn</span><span class="params">(<span class="type">int</span> &amp;p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].w == k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[p].wn)tr[p].wn--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[p].w &lt; k)<span class="built_in">loschn</span>(tr[p].rs, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">loschn</span>(tr[p].ls, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">calc</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">canrbu</span>(p))<span class="built_in">rbuild</span>(p);</span><br><span class="line">&#125;<span class="comment">//löschen，delete是关键字就不用了</span></span><br></pre></td></tr></table></figure>

<h1 id="查询函数"><a href="#查询函数" class="headerlink" title="查询函数"></a>查询函数</h1><p>然后就是一些其他的函数，都是在二分查找树上进行查找操作的。</p>
<h2 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a><code>upper_bound</code></h2><p>与原来upper_bound的用途一样，返回第一个大于其权值的位置。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">uprbnd</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].w == k &amp;&amp; tr[p].wn)</span><br><span class="line">        <span class="keyword">return</span> tr[tr[p].ls].sz + tr[p].wn + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].w &gt; k)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">uprbnd</span>(tr[p].ls, k);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> tr[tr[p].ls].sz + tr[p].wn + <span class="built_in">uprbnd</span>(tr[p].rs, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有一个其反义函数，相当于是对当前序列反转之后的结果进行upper_bound，返回的是第一个小于其权值的位置。</p>
<p>查询某一个数字的排名的时候可以使用 <code>uprgtr(rt,k)+1</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">uprgtr</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].w == k &amp;&amp; tr[p].wn)</span><br><span class="line">        <span class="keyword">return</span> tr[tr[p].ls].sz;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].w &lt; k)</span><br><span class="line">        <span class="keyword">return</span> tr[tr[p].ls].sz + tr[p].wn + <span class="built_in">uprgtr</span>(tr[p].rs, k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">uprgtr</span>(tr[p].ls, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="getk"><a href="#getk" class="headerlink" title="getk"></a><code>getk</code></h2><p>getk函数返回的是当前排名上的数字。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getk</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[tr[p].ls].sz &lt; k &amp;&amp; k &lt;= tr[tr[p].ls].sz + tr[p].wn)</span><br><span class="line">        <span class="keyword">return</span> tr[p].w;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[tr[p].ls].sz + tr[p].wn &lt; k)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getk</span>(tr[p].rs, k - tr[tr[p].ls].sz - tr[p].wn);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getk</span>(tr[p].ls, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前驱与后继"><a href="#前驱与后继" class="headerlink" title="前驱与后继"></a>前驱与后继</h2><p>将上面两个函数结合起来就可以了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">precsr</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getk</span>(p, <span class="built_in">uprgtr</span>(p, k));</span><br><span class="line">&#125;<span class="comment">//precursor</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">succsr</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getk</span>(p, <span class="built_in">uprbnd</span>(p, k));</span><br><span class="line">&#125;<span class="comment">//successor</span></span><br></pre></td></tr></table></figure>

<details class="note success"><summary><p>封装好的结构体</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> alpha = <span class="number">0.75</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Scapegoat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ls[N], rs[N];</span><br><span class="line">    <span class="type">int</span> w[N], wn[N];</span><br><span class="line">    <span class="type">int</span> s[N], sz[N], sd[N];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt, rt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s[p] = s[ls[p]] + s[rs[p]] + <span class="number">1</span>;</span><br><span class="line">        sz[p] = sz[ls[p]] + sz[rs[p]] + wn[p];</span><br><span class="line">        sd[p] = sd[ls[p]] + sd[rs[p]] + (wn[p] != <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canrbu</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wn[p] &amp;&amp; (alpha * s[p] &lt;= <span class="built_in">double</span>(<span class="built_in">max</span>(s[ls[p]], s[rs[p]])) || <span class="built_in">double</span>(sd[p] &lt;= alpha * s[p]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ldr[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbuunf</span><span class="params">(<span class="type">int</span> &amp;ldc, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!p)<span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">rbuunf</span>(ldc, ls[p]);</span><br><span class="line">        <span class="keyword">if</span>(wn[p])ldr[ldc++] = p;</span><br><span class="line">        <span class="built_in">rbuunf</span>(ldc, rs[p]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rbubld</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        ls[ldr[mid]] = <span class="built_in">rbubld</span>(l, mid);</span><br><span class="line">        rs[ldr[mid]] = <span class="built_in">rbubld</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">calc</span>(ldr[mid]);</span><br><span class="line">        <span class="keyword">return</span> ldr[mid];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbuild</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> ldc = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rbuunf</span>(ldc, p);</span><br><span class="line">        p = <span class="built_in">rbubld</span>(<span class="number">0</span>, ldc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!p)</span><br><span class="line">        &#123;</span><br><span class="line">            p = ++cnt;</span><br><span class="line">            <span class="keyword">if</span>(!rt)rt = <span class="number">1</span>;</span><br><span class="line">            w[p] = k;</span><br><span class="line">            ls[p] = rs[p] = <span class="number">0</span>;</span><br><span class="line">            wn[p] = s[p] = sz[p] = sd[p] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(w[p] == k)wn[p]++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(w[p] &lt; k)<span class="built_in">insert</span>(rs[p], k);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">insert</span>(ls[p], k);</span><br><span class="line">            <span class="built_in">calc</span>(p);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">canrbu</span>(p))<span class="built_in">rbuild</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">loschn</span><span class="params">(<span class="type">int</span> &amp;p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!p)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(w[p] == k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(wn[p])wn[p]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(w[p] &lt; k)<span class="built_in">loschn</span>(rs[p], k);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">loschn</span>(ls[p], k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">calc</span>(p);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">canrbu</span>(p))<span class="built_in">rbuild</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uprbnd</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!p)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(w[p] == k &amp;&amp; wn[p])</span><br><span class="line">            <span class="keyword">return</span> sz[ls[p]] + wn[p] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(w[p] &gt; k)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">uprbnd</span>(ls[p], k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> sz[ls[p]] + wn[p] + <span class="built_in">uprbnd</span>(rs[p], k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uprgtr</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!p)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(w[p] == k &amp;&amp; wn[p])</span><br><span class="line">            <span class="keyword">return</span> sz[ls[p]];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(w[p] &lt; k)</span><br><span class="line">            <span class="keyword">return</span> sz[ls[p]] + wn[p] + <span class="built_in">uprgtr</span>(rs[p], k);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">uprgtr</span>(ls[p], k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getk</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!p)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sz[ls[p]] &lt; k &amp;&amp; k &lt;= sz[ls[p]] + wn[p])</span><br><span class="line">            <span class="keyword">return</span> w[p];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sz[ls[p]] + wn[p] &lt; k)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getk</span>(rs[p], k - sz[ls[p]] - wn[p]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getk</span>(ls[p], k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">precrs</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getk</span>(p, <span class="built_in">uprgtr</span>(p, k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">succsr</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getk</span>(p, <span class="built_in">uprbnd</span>(p, k));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>洛谷上的<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMzNjk=">板子</span>：</p>
<p>示例代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3369/p3369_scapegoat.cpp"><code>Luogu P3369-scapegoat</code></a></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树</title>
    <url>/OI/segment-tree/</url>
    <content><![CDATA[<p>线段树及其衍生，如动态开点线段树、可持久化权值线段树等等。</p>
<span id="more"></span>

<h1 id="什么是线段树？"><a href="#什么是线段树？" class="headerlink" title="什么是线段树？"></a>什么是线段树？</h1><p>线段树是一种数据结构，其可以以 $O( \log n)$ 的时间复杂度处理维护区间信息的问题。<br>其维护的信息满足可以快速合并两个区间的信息（例如区间和、区间最大（小）值。</p>
<p>线段树同时可以支持区间修改，但是区间修改时必须能够快速求出每个区间维护的信息。</p>
<h1 id="线段树的结构"><a href="#线段树的结构" class="headerlink" title="线段树的结构"></a>线段树的结构</h1><p>线段树在建立的时候，会将每一个区间长度不为1的区间进行二分，并递归对这两个区间进行判定。</p>
<p>这是一棵区间长度为12的线段树：</p>
<p><img src="https://s2.loli.net/2022/04/13/wjkzCcr7e4pBQyS.png" alt="segtree1.png"></p>
<p>我们可以明显看到，线段树是一棵二叉树。<br>线段树的高度一般是 $\log n$ 的，这就需要我们建立 $2^{\lceil \log n \rceil + 1}$ 个节点，这将会耗费我们大量的空间。</p>
<p>一般情况下，我们为了访问方便，也为了节省空间，我们一般将一个节点（设其编号为 $p$）的左儿子和右儿子分别设为 $p &lt;&lt; 1$ 和 $p &lt;&lt; 1 | 1$，就相当于是在一棵满二叉树上面访问。</p>
<p>于是我们就给出编号：</p>
<p><img src="https://s2.loli.net/2022/04/13/BYmKAP7NDaSytMq.png" alt="segtree2.png"></p>
<p>下面给出示例代码：</p>
<p>假设我们维护的是区间和，并使用类似</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">&#125;tr;</span><br></pre></td></tr></table></figure>

<p>的结构体来存储数据，那么建立线段树的函数就是像下面这个样子的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].l = l, tr[p].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].sum = a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    tr[p].sum = tr[p &lt;&lt; <span class="number">1</span>].sum + tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="线段树的区间询问"><a href="#线段树的区间询问" class="headerlink" title="线段树的区间询问"></a>线段树的区间询问</h1><p>我们这里以区间求和为例。</p>
<p>我们先手动模拟一下区间求和的过程：</p>
<p>假设我们对这样一个长度为12的序列 $\lbrace 1,1,4,5,1,4,1,9,1,9,8,1 \rbrace$ 建立线段树，那么我们每一个区间的数据是这个样子的：</p>
<p><img src="https://s2.loli.net/2022/04/13/kHphs28SOJVRoGT.png" alt="segtree3.png"></p>
<p>我们假设需要对 $[2,8]$ 这个区间内的数据进行求和，那么我们覆盖的区间就是这个样子的：</p>
<p><img src="https://s2.loli.net/2022/04/13/hRWnlYSrVU7d51f.png" alt="segtree4.png"></p>
<p>我们想象一下将区间向上推：</p>
<p><img src="https://s2.loli.net/2022/04/13/Zphkae3wVJO1Lrq.gif" alt="segtree4.gif"></p>
<p>最后我们将 $[2,8]$ 这个大区间分为 $[2,2] \cup [3,3] \cup [4,6] \cup [7,8]$ 这几个小区间。</p>
<p><img src="https://s2.loli.net/2022/04/13/O6IKkaHo5cg1i3V.png" alt="segtree5.png"></p>
<p>我们每一次二分递归的时候，如果当前区间被我们询问的区间完全包含就返回当前区间的值，如果没有完全包含就递归询问左右区间，并输出两个区间的返回值之和。</p>
<p>在递归询问左右两区间的时候需要注意一下子区间是否与询问的区间有重合部分，如果两者交集为空，那就不需要询问了。</p>
<p>下面给出示例代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">segadd</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)<span class="keyword">return</span> tr[p].sum;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)res += <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)res += <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="线段树的区间修改"><a href="#线段树的区间修改" class="headerlink" title="线段树的区间修改"></a>线段树的区间修改</h1><p>区间修改和区间求和有着相同的思路。</p>
<p>我们这里以区间加为例。</p>
<p>还是之前的例子，如果我们想要给区间 $[2,8]$ 同时加上一个数会怎样？</p>
<p>让我们再来看一下这个图：</p>
<p><img src="https://s2.loli.net/2022/04/13/O6IKkaHo5cg1i3V.png" alt="segtree5.png"></p>
<p>其中白色的区间是完全和我们询问没有任何关系的区间，黄色的区间是与我们询问的区间有交集，但是没有被新闻区间所包含的区间。</p>
<p>红色的区间和橙色的区间都被询问区间所包含，其中红色的区间是我们在区间求和的时候返回了值的区间，橙色的区间虽然被询问区间包含，但是我们没有访问到他们。</p>
<p>区间修改也是一样的思路。我们只需要将需要的区间修改即可，剩下的被询问区间包含的区间只需要标记一下就可以了。</p>
<p>这里需要用到懒标记的思想。</p>
<h2 id="懒标记"><a href="#懒标记" class="headerlink" title="懒标记"></a>懒标记</h2><p>懒标记的意思就是很懒的标记。我们用到它的时候才会将它兑现，否则他就在那里静静地待着就可以了。</p>
<p>我们考虑给结构体里面加上一个懒标记，就像这样：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    <span class="type">int</span> tag;<span class="comment">//&lt;- 就是这个</span></span><br><span class="line">&#125;tr;</span><br></pre></td></tr></table></figure>

<p>当某个区间有懒标记的时候，就意味着它的子树里面的所有区间都应该被修改，但是目前没有应用上。</p>
<p>但是拥有懒标记的区间的值在修改的时候已经被修改好了。</p>
<p>每一次我们递归询问子区间的时候，我们就需要将这个懒标记下传（如果有的话）。<br>我们需要一个<code>pushdown</code>函数来完成这件事。</p>
<p>我们这里仍然以区间加为例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;root = tr[p], &amp;left = tr[p &lt;&lt; <span class="number">1</span>], &amp;rght = tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(root.tag)</span><br><span class="line">    &#123;</span><br><span class="line">        left.sum += root.tag * (left.r - left.l + <span class="number">1</span>);</span><br><span class="line">        rght.sum += root.tag * (rght.r - rght.l + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//更新子区间值</span></span><br><span class="line">        left.tag += root.tag;</span><br><span class="line">        rght.tag += root.tag;</span><br><span class="line">        <span class="comment">//更新子区间懒标记</span></span><br><span class="line">        root.tag = <span class="number">0</span>;<span class="comment">//懒标记清空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMzNzI=">Luogu P3372 【模板】线段树 1</span></p>
<p>参考代码：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20va2Fpc2Vyd2lsaGVpbS9PSWNvZGVzL2Jsb2IvbWFzdGVyL0x1b2d1L3AzMDAwLXAzOTk5L3AzMzcyL3AzMzcyLmNwcA==">Luogu P3372</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMzNzM=">Luogu P3373 【模板】线段树 2</span></p>
<p>参考代码：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20va2Fpc2Vyd2lsaGVpbS9PSWNvZGVzL2Jsb2IvbWFzdGVyL0x1b2d1L3AzMDAwLXAzOTk5L3AzMzczL3AzMzczLmNwcA==">Luogu P3373</span></p>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="标记永久化"><a href="#标记永久化" class="headerlink" title="标记永久化"></a>标记永久化</h2><p>我们可以尝试一个思路：不下传标记。</p>
<p>我们重新思考一下懒标记的意义。</p>
<p>懒标记代表的是，这个点的所有子区间都需要被这个标记更新他们的值。</p>
<p>于是我们就可以将标记放进函数里面，随着函数下传，到时候也可以起到更新值的作用。</p>
<p>这样的方法适用于不能<code>pushdown</code>的时候。</p>
<p>具体情况我也没有遇见过，据说是需要配合可持久化权值线段树（aka主席树）使用。</p>
<p>示例代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">segsum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> tag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)<span class="keyword">return</span> tr[p].sum + tag * (tr[p].r - tr[p].l + <span class="number">1</span>);</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)res += <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span>, l, r, tag + tr[p].tag);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)res += <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, tag + tr[p].tag);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线段树上二分"><a href="#线段树上二分" class="headerlink" title="线段树上二分"></a>线段树上二分</h2><p>想不到吧，线段树还能优化二分！</p>
<p>我们考虑这样一个问题：我们需要找到一个位置 $pos$，使得 $[1,pos]$ 这个区间内数字的和不小于 $val$。保证所有权值非负。</p>
<p>那么我们可以直接进行二分，这样每做一次的复杂度是 $O(\log^2 n)$ 的。</p>
<p>我们可以用线段树来优化这样的过程。</p>
<p>我们带着 $val$ 在线段树上搜索。<br>如果当前节点的左儿子的权值 $\geq val$，就带着 $val$ 继续跳到左儿子搜索；<br>如果当前节点的左儿子的权值 $&lt; val$，就带着 $val-tr[tr[p].ls].val$ 继续跳到右儿子搜索。</p>
<h2 id="动态开点线段树"><a href="#动态开点线段树" class="headerlink" title="动态开点线段树"></a>动态开点线段树</h2><p>有时候我们需要维护的下标区域非常广（比如说 $10^9$），但是真正有值的地方其实很少。</p>
<p>我们当然不可能为这个序列直接创建一棵完整的线段树，这样子会耗费我们大量的空间维护许多无用的数据。</p>
<p>比如说维护一个序列里面有多少个数字大于某个数，但是这个数列的值域是 $10^9$，但是数列长度最多只有 $10^5$。</p>
<p>我们当然不可能直接创建一个覆盖整个值域的线段树，这样子会需要我们创建 $2^31$ 个节点，即使我们不考虑区间修改，只维护一个区间和的话也需要高达24GiB的空间，十分的浪费。</p>
<p>于是我们可以动态开点，只建立用到的区间，其他的就不会被声明，大大减少了我们需要用的空间。<br>或者说，我们什么时候需要用到某个节点了，我们就建立它。</p>
<p>但是这样做的代价就是我们无法再使用简单的 <code>p&lt;&lt;1</code> 和 <code>p&lt;&lt;1|1</code> 来访问当前节点的左右子节点了。<br>我们需要记录下当前节点的左右节点的编号。</p>
<p>我们以维护一个序列里面有多少个数字大于某个数为例。</p>
<p>那么我们的结构体就会变成这个样子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> ls, rs;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">&#125;tr;</span><br></pre></td></tr></table></figure>

<p>其中 <code>ls</code> 和 <code>rs</code> 分别代表了当前节点的左儿子和右儿子的编号。</p>
<p>那么我们就不需要<code>build</code>了，只需要一开始将第一个节点初始化为根节点即可。</p>
<p>然后我们的区间修改函数就是这个样子的。<br>我们可以有两种风格：</p>
<div class="tabs" id="dongtaikaidianxiugai"><ul class="nav-tabs"><li class="tab active"><a href="#dongtaikaidianxiugai-1">提前开点</a></li><li class="tab"><a href="#dongtaikaidianxiugai-2">用到再开</a></li></ul><div class="tab-content"><div class="tab-pane active" id="dongtaikaidianxiugai-1"><p>我们在访问子节点之前，首先看一下我们将要访问的这个子节点到底是否存在，如果不存在的话就新开一个。</p>
<p>这样子的话支持把当前区间的左右端点放在结构体里面存着，也支持将区间左右端点当做参数放到函数里面传。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">segadd</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].sum += k * (tr[p].r - tr[p].l + <span class="number">1</span>);</span><br><span class="line">        tr[p].add += k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!tr[p].ls)</span><br><span class="line">        &#123;</span><br><span class="line">            tr[p].ls = ++idx;</span><br><span class="line">            tr[tr[p].ls].l = tr[p].l;</span><br><span class="line">            tr[tr[p].ls].r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">segadd</span>(tr[p].ls, l, r, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!tr[p].rs)</span><br><span class="line">        &#123;</span><br><span class="line">            tr[p].rs = ++idx;</span><br><span class="line">            tr[tr[p].rs].l = mid + <span class="number">1</span>;</span><br><span class="line">            tr[tr[p].rs].r = tr[p].r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">segadd</span>(tr[p].rs, l, r, k);</span><br><span class="line">    &#125;</span><br><span class="line">    tr[p].sum = tr[tr[p].ls].sum + tr[tr[p].rs].sum;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="dongtaikaidianxiugai-2"><p>我们在访问子节点的时候才看一下，我们的这个子节点是否存在。如果不存在的话就创建一个。</p>
<p>这样的话我们就在函数里面传节点编号的引用，并且同时把当前区间的左右端点放进函数里面当参数传。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">segadd</span><span class="params">(<span class="type">int</span> &amp;p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> al, <span class="type">int</span> ar, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)p = ++idx;</span><br><span class="line">    <span class="keyword">if</span>(al &gt;= l &amp;&amp; ar &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].sum += k * (ar - al + <span class="number">1</span>);</span><br><span class="line">        tr[p].add += k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (al + ar) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)<span class="built_in">segadd</span>(tr[p].ls, l, r, al, mid, k);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)<span class="built_in">segadd</span>(tr[p].rs, l, r, mid + <span class="number">1</span>, ar, k);</span><br><span class="line">    tr[p].sum = tr[tr[p].ls].sum + tr[tr[p].rs].sum;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<p>而查询函数不需要做太大的变动，只需要看一下当前访问的节点是否存在就可以了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">segsum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)<span class="keyword">return</span> tr[p].sum;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)res += <span class="built_in">segsum</span>(tr[p].ls, l, r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)res += <span class="built_in">segsum</span>(tr[p].rs, l, r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="可持久化权值线段树"><a href="#可持久化权值线段树" class="headerlink" title="可持久化权值线段树"></a>可持久化权值线段树</h2><p>面对眼前的区间第 $k$ 小问题，我们应该怎么办？</p>
<p>我们的一个思路就是使用主席树。</p>
<p>主席树，全称为可持久化权值线段树，通过保存每次插入操作时的历史版本，以便查询区间第 $k$ 小。</p>
<p>怎么保存呢？</p>
<p>一种暴力的方法就是可以每一次插入的时候都开一棵线段树。<br>但是这样对空间的使用不是很友好。</p>
<p>那么我们分析一下，每一次修改的时候涉及的都只有一条从根节点到我们想要修改的节点的路径。<br>那么我们每一次只需要新建从根节点一直到我们想要修改的节点的一整条路径就可以了。</p>
<p>我们每一次就只新建了 $O(\log n)$ 个节点，大大节省了我们需要用的空间。</p>
<p>这种情况下，我们就不能采用堆式存储法（就是那个把左儿子和右儿子分别设为 $p &lt;&lt; 1$ 和 $p &lt;&lt; 1 | 1$ 的）了，必须使用动态开点。</p>
<p>对于预计需要的节点个数，我们可以采用这种办法：</p>
<p>我们每一次操作最多需要新开 $2^{\lceil \log n \rceil +1}$ 个节点，我们只需要根据 $n$ 和 $m$ 的大小来声明就可以了。</p>
<p>怎么维护区间第 $k$ 小？</p>
<p>一般情况下，我们可以用对区间建立一棵权值线段树的方法来维护当前区间的区间第 $k$ 小。<br>原理就是，权值线段树维护的是区间内每一个数有多少个。<br>我们只需要用类似线段树上二分的思想在线段树上搜索即可。</p>
<p>但是我们不能每一次都根据当前区间建立一棵线段树，这样又麻烦又浪费空间。</p>
<p>所以我们就像利用前缀和减去另一个前缀和得到区间和一样，将给当前区间建立一棵线段树的问题转化成了给分别建立在 $[1,l-1]$ 和 $[1,r]$ 上的两棵线段树做差。<br>而这样的两棵线段树可以通过每一次向线段树维护的区间最后追加一个数字来得到。</p>
<p>而这也就是主席树维护区间第 $k$ 小的主要思想。</p>
<h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM4MzQ=">Luogu P3834 【模板】可持久化线段树 2</span></p>
<p>参考代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3834/p3834.cpp"><code>Luogu P3834</code></a></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM5MTk=">Luogu P3919 【模板】可持久化线段树 1（可持久化数组）</span></p>
<p>参考代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3919/p3919.cpp"><code>Luogu P3919</code></a></p>
<h2 id="区间最大子段和"><a href="#区间最大子段和" class="headerlink" title="区间最大子段和"></a>区间最大子段和</h2><p>区间最大子段和也可以使用线段树来维护。</p>
<p>我们考虑记录一下每一个区间内的最大前缀和、最大后缀和、最大子段和与区间和。</p>
<p>区间合并的时候这样合并：</p>
<ul>
<li>最大前缀和：左儿子的最大前缀和与（右儿子的最大前缀和与左儿子的区间和之和）取最大值；</li>
<li>最大后缀和：右儿子的最大后缀和与（左儿子的最大前缀和与右儿子的区间和之和）取最大值；</li>
<li>最大子段和：左儿子的最大子段和、右儿子的最大子段和与（左儿子的最大后缀和与右儿子的最大前缀和之和）取最大值；</li>
<li>区间和：直接加。</li>
</ul>
<p>写了个重载加号：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> lms, rms;</span><br><span class="line">    <span class="type">int</span> ms, sum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> SegTree <span class="keyword">operator</span> + (<span class="type">const</span> SegTree &amp;lhs, <span class="type">const</span> SegTree &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">        &#123;</span><br><span class="line">            lhs.l, </span><br><span class="line">            rhs.r,</span><br><span class="line">            <span class="built_in">max</span>(lhs.lms, rhs.lms + lhs.sum),</span><br><span class="line">            <span class="built_in">max</span>(rhs.rms, lhs.rms + rhs.sum),</span><br><span class="line">            <span class="built_in">max</span>(lhs.rms + rhs.lms, <span class="built_in">max</span>(lhs.ms, rhs.ms)),</span><br><span class="line">            lhs.sum + rhs.sum</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<p>然后查询函数就是这个样子的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">SegTree <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)<span class="keyword">return</span> tr[p].ms;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r &lt;= mid)<span class="keyword">return</span> <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid)<span class="keyword">return</span> <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span>, l, r) + <span class="built_in">query</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果用线段树维护区间最大子段和的话还可以支持单点修改。</p>
<p>思路跟正常的单点修改一样。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pos, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l == tr[p].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p] = &#123; tr[p].l,tr[p].r,<span class="built_in">max</span>(k,<span class="number">0</span>),<span class="built_in">max</span>(k,<span class="number">0</span>),<span class="built_in">max</span>(k,<span class="number">0</span>),k &#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid)<span class="built_in">modify</span>(p &lt;&lt; <span class="number">1</span>, pos, k);</span><br><span class="line">    <span class="keyword">if</span>(pos &gt; mid)<span class="built_in">modify</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, pos, k);</span><br><span class="line">    tr[p] = tr[p &lt;&lt; <span class="number">1</span>] + tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<details class="note info"><summary><p>[SNOI2020] 区间和</p>
</summary>
<p>暴力修改，不是正解。<br>能过官方数据，但是不能过Hack数据。</p>
<p>提交记录：</p>
<p>洛谷：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDY3OTI=">题面</span>；<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3JlY29yZC83NDA2MDYwOA==">记录</span>。<br>LibreOJ：<span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8zMzI1">题面</span>；<span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcy8xNDcwODU2">记录</span>。</p>

</details>

<h2 id="线段树优化建图"><a href="#线段树优化建图" class="headerlink" title="线段树优化建图"></a>线段树优化建图</h2><p>线段树优化建图，又称线段树优化连边，是一种处理区间连边的方法。</p>
<p>有时候题目会让我们从一个点 $w$ 向一段区间 $[l,r]$ 内的所有点连上一条边权相等的边。</p>
<p>连边数量少的时候我们尚且还可以通过枚举来暴力建边，而当连边数量多起来的时候时间复杂度就不符合我们的要求了。</p>
<p>我们可以利用线段树来辅助我们建图。</p>
<p>线段树上的每一个节点都是一个虚拟的节点，其分别向其左儿子和右儿子连接一条没有影响的边。<br>这里的“没有影响”不仅指边权为0，还可以指流量为 $+\infty$、费用为0等等。</p>
<p>网络流相关的题目中利用这种方式优化建图的很多。</p>
<p>建图的时候，我们首先建立线段树，建立 $2^{\lfloor \log{n} \rfloor +1}$ 个节点和 $2^{\lfloor \log{n} \rfloor +2}$ 条双向边。</p>
<p>然后就是处理区间连边问题。<br>我们就像正常的线段树区间加一样，函数递归时，如果遇到了被完全包含在询问区间内的第一个区间，就从我们指定的点向代表该区间的点连一条边并返回即可。</p>
<h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDgwMjE=">洛谷 P8021</span> [ONTAK2015] Bajtman i Okrągły Robin</p>
<p>如果我们使用暴力建图的话，可以想到的是把每一个 Robin 向他能抢劫的时间点连一条容量为1、费用为 $c_i$ 的边。同时，源点向每一个 Robin 连一条容量为1费用为0的边，每一个时间点向汇点连一条容量为1费用为0的边，然后跑最大费用最大流就可以了。</p>
<p>我们如果使用线段树建图的话，就仿照上面的方法，到线段树上连边就可以了。因为我们是在这一段区间内选一个时间点抢劫，所以我们连边的时候仍然保持上面的方式，容量为1、费用为 $c_i$。</p>
<p>题解：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL2Jsb2cvS2Fpc2VyLVdpbGhlaW0vc29sdXRpb24tcDgwMjE=">洛谷题解</span></p>
<p>参考代码：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20va2Fpc2Vyd2lsaGVpbS9PSWNvZGVzL2Jsb2IvbWFzdGVyL0x1b2d1L3A2MDAwKy9wODAyMS9wODAyMS5jcHA=">Luogu P8021</span></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Splay</title>
    <url>/OI/splay/</url>
    <content><![CDATA[<p>Splay.</p>
<span id="more"></span>

<p>（2022年5月24日重构）</p>
<p>Splay是一种很好地维护一棵二叉搜索树的方法。<br>如果不知道什么是二叉搜索树，请看<span class="exturl" data-url="aHR0cHM6Ly9vaS13aWtpLm9yZy9kcy9ic3Qv">此页面</span>。</p>
<h1 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h1><p>Splay的基本思想是，通过一系列的旋转操作，维持整棵二叉搜索树的平衡。</p>
<p>首先，我们假设我们需要维护的结构体是这个样子的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s[<span class="number">2</span>], fa;</span><br><span class="line">    <span class="type">int</span> v, w;</span><br><span class="line">    <span class="type">int</span> sz;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _v, <span class="type">int</span> _fa)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        v = _v, fa = _fa;</span><br><span class="line">        sz = w = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[N];</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li><code>s[2]</code>：左右子树。</li>
<li><code>fa</code>：父亲。</li>
<li><code>v</code>：节点权值。</li>
<li><code>w</code>：节点大小。</li>
<li><code>sz</code>：节点及其子树大小。</li>
</ul>
<p>还有一些其他的东西就一一列举了，比如懒标记等等。</p>
<h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>Splay之所以能够维持其平衡，依赖的就是这样的简单旋转操作。</p>
<h3 id="左旋与右旋"><a href="#左旋与右旋" class="headerlink" title="左旋与右旋"></a>左旋与右旋</h3><p>对于这样一个图：</p>
<img src="https://s2.loli.net/2022/01/07/i8JVbaGELdNQOAx.png" alt="splay1.png" width="40%" />

<p>其中x节点有两个子树，A与B；x节点的父亲y节点还有一棵子树C；z节点是y节点的父亲。<br>我们将x节点旋转（这里x节点是其父亲y节点的左儿子，所以我们会将其右旋），结果是这个样子的：</p>
<img src="https://s2.loli.net/2022/01/07/hlkn8QXvHYgCtyr.png" alt="splay2.png" width="40%" />

<p>当然，如果我们把x旋转回去的话，那就是左旋操作了。</p>
<p>总体来看是这个样子：</p>
<img src="https://s2.loli.net/2022/05/24/WQhxLqiVDOIzrmc.png" alt="splay3.png" width="80%" />

<p>在进行旋转操作时，我们需要保持其中序遍历序列不变。</p>
<p>在刚刚的右旋操作中，我们来分析一下我们需要改变的边：</p>
<img src="https://s2.loli.net/2022/03/23/uqVYj9LzJvDKZMn.png" alt="splay4.png" width="40%" />

<p>就是这三条标红的边。</p>
<p>那么对于这三条边，我们分别进行重构操作。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> k = tr[y].s[<span class="number">1</span>] == x;<span class="comment">//x是y的哪个儿子</span></span><br><span class="line">tr[z].s[tr[z].s[<span class="number">1</span>] == y] = x, tr[x].fa = z;<span class="comment">//重构z-x边</span></span><br><span class="line">tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>], tr[tr[x].s[k ^ <span class="number">1</span>]].fa = y;<span class="comment">//重构y-B边</span></span><br><span class="line">tr[x].s[k ^ <span class="number">1</span>] = y, tr[y].fa = x;<span class="comment">//重构x-y边</span></span><br></pre></td></tr></table></figure>

<p>旋转完成之后，因为我们改变了树的结构，所以我们需要重新计算x和y的大小，有时候还有需要维护的其他信息。<br>注意这里需要先维护较低的y，再维护较高的x。</p>
<p>所以总的函数是这个样子的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].sz = tr[p].w;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].s[<span class="number">0</span>])tr[p].sz += tr[tr[p].s[<span class="number">0</span>]].sz;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].s[<span class="number">1</span>])tr[p].sz += tr[tr[p].s[<span class="number">1</span>]].sz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y = tr[x].fa, z = tr[y].fa;</span><br><span class="line">    <span class="type">int</span> k = tr[y].s[<span class="number">1</span>] == x;</span><br><span class="line">    tr[z].s[tr[z].s[<span class="number">1</span>] == y] = x, tr[x].fa = z;</span><br><span class="line">    tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>], tr[tr[x].s[k ^ <span class="number">1</span>]].fa = y;</span><br><span class="line">    tr[x].s[k ^ <span class="number">1</span>] = y, tr[y].fa = x;</span><br><span class="line">    <span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="核心函数"><a href="#核心函数" class="headerlink" title="核心函数"></a>核心函数</h2><p>我们在向splay中插入一个数之后，会强制将其旋转到根。<br>而在刚才的示例中，我们看到了，我们将x右旋之后，x就向上走了一点。<br>而经过不断的旋转，我们就可以让x节点走到根。</p>
<p>当然，我们也不是随便瞎转，因为旋转操作也是需要复杂度的。<br>而我们的最后目标是使之均摊之后达到尽量小的复杂度。<br>引用闫学灿的一句话：</p>
<blockquote>
<p>“如果我们瞎转的话，就达不到$O(\log n)$的复杂度了。”</p>
</blockquote>
<p>所以我们要根据x所处的位置来制定不同的旋转方案。</p>
<p>首先，我们对于x可能出现的几种情况分析一下：</p>
<ol start="0">
<li><p>x就是目标节点。<br>那么就不用转了。</p>
</li>
<li><p>x是目标节点的子节点。<br>那我们直接转一下x就可以了。</p>
</li>
</ol>
<p>对于x的父亲也不是目标节点的情况，我们也分两种情况讨论。</p>
<ol start="2">
<li><p>x的父亲也不是目标节点，且x与其父亲的所在子树类型相同。<br>可以理解为x，x的父亲和x的父亲的父亲三个节点在一条直线上。<br>这样的话，我们就先旋转x的父节点，再旋转x。</p>
</li>
<li><p>x的父亲也不是目标节点，且x与其父亲的所在子树类型不同。<br>可以理解为x，x的父亲和x的父亲的父亲三个节点的连线是一条折线。<br>这样的话，我们旋转两次x。</p>
</li>
</ol>
<p>这样不断判断，直到x到达目标节点。</p>
<p>同时我们需要注意，因为我们根节点是随着我们的不断旋转而不断变化的，所以我们需要即使更新根节点的信息。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(tr[x].fa != k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y = tr[x].fa, z = tr[y].fa;</span><br><span class="line">        <span class="keyword">if</span>(z != k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((tr[y].s[<span class="number">1</span>] == x) ^ (tr[z].s[<span class="number">1</span>] == y))</span><br><span class="line">                <span class="built_in">rotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">rotate</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!k) rt = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h1><p>我们假设我们需要维护的是一棵可重序列的二叉搜索树。</p>
<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>Splay的插入操作是比较复杂的。<br>假设我们需要向树中插入一个元素 $k$，那么我们分下列几种情况讨论：</p>
<ul>
<li>如果树是空的，那就直接插入根节点。</li>
<li>如果当前节点的权值等于 $k$，那就增加当前节点的大小，并更新其与其父亲的信息。</li>
<li>否则就按照二叉搜索树的性质继续向下面的节点查找。</li>
</ul>
<p>最后不要忘记将节点旋转到根。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!rt)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[++idx].<span class="built_in">init</span>(k, <span class="number">0</span>);</span><br><span class="line">        rt = idx;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> p = rt, fa = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[p].v == k)</span><br><span class="line">        &#123;</span><br><span class="line">            tr[p].w++;</span><br><span class="line">            <span class="built_in">pushup</span>(p), <span class="built_in">pushup</span>(fa);</span><br><span class="line">            <span class="built_in">splay</span>(p, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fa = p;</span><br><span class="line">        p = tr[p].s[tr[p].v &lt; k];</span><br><span class="line">        <span class="keyword">if</span>(!p)</span><br><span class="line">        &#123;</span><br><span class="line">            tr[++idx].<span class="built_in">init</span>(k, fa);</span><br><span class="line">            tr[fa].s[tr[fa].v &lt; k] = idx;</span><br><span class="line">            <span class="built_in">pushup</span>(fa);</span><br><span class="line">            <span class="built_in">splay</span>(idx, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>Splay不使用惰性删除，其删除操作也是比较复杂的。<br>假设我们想要删除节点 $x$。</p>
<p>首先，我们将 $x$ 旋转到根。</p>
<p>然后我们分类讨论：</p>
<ul>
<li>如果 $x$ 的大小不为1，那就减少其大小。</li>
<li>否则直接合并其两棵子树。</li>
</ul>
<p>合并两棵树的操作很简单。如果我们假设需要合并的两棵树 $x$ 和 $y$ 中，$x$ 的最大值大于 $y$ 的话，只需要将的 $x$ 的最大值旋转到根，同时将 $y$ 设置为其根节点的右子树即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">loschn</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">get_rk</span>(k);</span><br><span class="line">    <span class="keyword">if</span>(tr[rt].w &gt; <span class="number">1</span>)<span class="comment">//节点内部包含多个相同元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        tr[rt].w--;</span><br><span class="line">        <span class="built_in">pushup</span>(rt);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!tr[rt].s[<span class="number">0</span>] &amp;&amp; !tr[rt].s[<span class="number">1</span>])<span class="comment">//全树上下只剩这一个点了！</span></span><br><span class="line">    &#123;</span><br><span class="line">        tr[rt].<span class="built_in">clear</span>();</span><br><span class="line">        rt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!tr[rt].s[<span class="number">0</span>])<span class="comment">//没有左子树，这个点是整棵树最小的点了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> p = rt;</span><br><span class="line">        rt = tr[rt].s[<span class="number">1</span>];</span><br><span class="line">        tr[rt].fa = <span class="number">0</span>;</span><br><span class="line">        tr[p].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!tr[rt].s[<span class="number">1</span>])<span class="comment">//没有右子树，这个点是整棵树最大的点了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> p = rt;</span><br><span class="line">        rt = tr[rt].s[<span class="number">0</span>];</span><br><span class="line">        tr[rt].fa = <span class="number">0</span>;</span><br><span class="line">        tr[p].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一般情况</span></span><br><span class="line">    <span class="type">int</span> p = rt, x = <span class="built_in">precrs</span>();</span><br><span class="line">    tr[tr[p].s[<span class="number">1</span>]].fa = x;</span><br><span class="line">    tr[x].s[<span class="number">1</span>] = tr[p].s[<span class="number">1</span>];</span><br><span class="line">    tr[p].<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">pushup</span>(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询k的排名"><a href="#查询k的排名" class="headerlink" title="查询k的排名"></a>查询k的排名</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_rk</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, p = rt;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &lt; tr[p].v)<span class="comment">//在左子树中</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = tr[p].s[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tr[p].s[<span class="number">0</span>])res += tr[tr[p].s[<span class="number">0</span>]].sz;</span><br><span class="line">            <span class="keyword">if</span>(k == tr[p].v)<span class="comment">//就是这个点了！</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">splay</span>(p, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> res + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//搜索右子树</span></span><br><span class="line">            res += tr[p].w;</span><br><span class="line">            p = tr[p].s[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询排名为k的数"><a href="#查询排名为k的数" class="headerlink" title="查询排名为k的数"></a>查询排名为k的数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_k</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = rt;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[tr[p].s[<span class="number">0</span>]].sz &gt;= k)<span class="comment">//在左子树中</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = tr[p].s[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            k -= tr[p].w;</span><br><span class="line">            <span class="keyword">if</span>(tr[p].s[<span class="number">0</span>])k -= tr[tr[p].s[<span class="number">0</span>]].sz;</span><br><span class="line">            <span class="keyword">if</span>(k &lt;= <span class="number">0</span>)<span class="comment">//就是这个点了！</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">splay</span>(p, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> tr[p].v;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//搜索右子树</span></span><br><span class="line">            p = tr[p].s[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询k的前驱或后继"><a href="#查询k的前驱或后继" class="headerlink" title="查询k的前驱或后继"></a>查询k的前驱或后继</h2><p>前驱定义为小于这个数的最大数，后继定义为大于这个数的最小数。</p>
<p>我们的思路是，先将其插入进去，这样它就会到根节点；然后查询其左子树内的最大值或右子树内的最小值即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">precsr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = tr[rt].s[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">while</span>(tr[p].s[<span class="number">1</span>])p = tr[p].s[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">splay</span>(p, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">succsr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = tr[rt].s[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">while</span>(tr[p].s[<span class="number">0</span>])p = tr[p].s[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">splay</span>(p, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="维护可重有序序列"><a href="#维护可重有序序列" class="headerlink" title="维护可重有序序列"></a>维护可重有序序列</h2><p>洛谷<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMzNjk=">板子题</span>，要求我们支持维护一个有序序列，并支持上面讲的六种操作。</p>
<p>示例代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3369/p3369_splay.cpp"><code>Luogu P3369-splay</code></a></p>
<h2 id="维护不可重序列，支持区间翻转"><a href="#维护不可重序列，支持区间翻转" class="headerlink" title="维护不可重序列，支持区间翻转"></a>维护不可重序列，支持区间翻转</h2><p>给个洛谷<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMzOTE=">板子题</span>的代码:</p>
<p>它这里面要求区间翻转，那么我们在进行每一次旋转操作时，我们首先将左边界的前驱旋转至根节点，接着再把右边界的后继旋转至根节点的下面，此时右边界的后继的左子树就是我们所要翻转的区间了。<br>我们顺便增加一个<code>flag</code>标记，用来标记翻转次数。</p>
<p>示例代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3391/p3391.cpp"><code>Luogu P3391</code></a></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>后缀自动机</title>
    <url>/OI/suffix-avtomat/</url>
    <content><![CDATA[<p>后缀自动机(SAM)。</p>
<span id="more"></span>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>后缀自动机，是一个能够解决许多字符串相关问题的，十分强力的数据结构。<br>其存储的是一个字符串的所有子串。<br>不要被博客的链接迷惑了，后缀自动机是 <strong>S</strong>uffix <strong>A</strong>uto<strong>m</strong>aton 。<br>（博客标题来自俄语 Суффиксный автомат -&gt; Suffiksneyy avtomat）</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><ol>
<li>后缀自动机是一个DAG。其中的节点叫做<strong>状态</strong>，边叫做<strong>转移</strong>。</li>
<li>图中包含一个初始节点 $t_0$ ，任何节点都可以由之经过一系列的转移到达。</li>
<li>每一个转移都标有一个字母，且从某一个节点出发的每一个转移都是不同的。</li>
<li>自动机存在多个终止状态。如果我们从初始状态 $t_0$ 出发，最终转移到了一个终止状态，则路径上的所有转移连接起来一定是字符串 $s$ 的一个后缀。 $s$ 的每个后缀均可用一条从 $t_0$ 到某个终止状态的路径构成。</li>
<li>在所有满足上述条件的自动机中，后缀自动机的结点数是最少的。</li>
</ol>
<h1 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h1><p>一个字符串的后缀自动机包含关于这个字符串子串的所有信息。<br>更准确地来说，对于任意从初始节点 $t_0$ 开始的路径，我们将其转移边上的字符拿下来按顺序排列，都可以得到原字符串的一个子串。<br>这里需要注意：一条路径对应一个子串，但是一个子串不一定只对应一条路径。</p>
<h1 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h1><h2 id="结束位置-endpos-及其等价类"><a href="#结束位置-endpos-及其等价类" class="headerlink" title="结束位置 endpos 及其等价类"></a>结束位置 <code>endpos</code> 及其等价类</h2><p>对于字符串 $s$ 的一个子串 $t$ ，我们记其在字符串 $s$ 中的所有结束位置为 $\operatorname{endpos}(t)$ 。例如对于字符串 $aabbabd$ ，我们有 $\operatorname{endpos}(ab)&#x3D;\{ 2,4 \} $。<br>两个子串 $t_1$ 与 $t_2$ 的endpos集合可能相等。这样，所有字符串 $s$ 的非空子串都可以根据其endpos集合分为若干<strong>等价类</strong>。<br>后缀自动机中的每个状态都会对应一个等价类。</p>
<p>基于endpos，我们可以得到一系列重要结论：</p>
<blockquote>
<p><strong>引理1</strong>： 考虑两个非空子串 $u$ 与 $v$ （仍然假设 $|u| \leq |v|$ ）。两者的endpos满足这样的一个关系：<br>$$<br>\begin{cases}<br>\operatorname{endpos}(v) \subseteq \operatorname{endpos}(u) &amp; \text{if } u \text{ is a suffix of } v\\<br>\operatorname{endpos}(v) \cap \operatorname{endpos}(u) &#x3D; \varnothing &amp; \text{otherwise}<br>\end{cases}<br>$$</p>
</blockquote>
<p>证明：如果 $\operatorname{endpos}(u) \cap \operatorname{endpos}(v) \neq \varnothing$ ，那么结合我们刚刚证明完的引理1，我们可以知道 $u$ 是 $v$ 的一个后缀。既然 $u$ 是 $v$ 的一个后缀了，那么对于所有 $v$ 出现的地方， $u$ 也会出现，即 $\operatorname{endpos}(u) \subseteq \operatorname{endpos}(v)$ 。而如果 $u$ 的长度小于 $v$ 且 $u$ 还不是 $v$ 的后缀，那么 $v$ 出现的地方 $u$ 一定不会出现，即 $\operatorname{endpos}(u) \cap \operatorname{endpos}(v) &#x3D; \varnothing$ 。</p>
<blockquote>
<p><strong>引理2</strong>: 对于任意一个endpos等价类（或者一个状态），其包含的子串集合是最长子串的连续后缀。</p>
</blockquote>
<p>证明：我们考虑等价类中两个子串：最长的，记为 $u$ ；最短的，记为 $v$ 。如果 $u&#x3D;v$ 那么显然不用证明。如果不是，那么对于长度在区间 $[|u|,|v|]$ 内的子串，必定存在子串有 $v$ 为后缀且同时为 $u$ 的后缀。</p>
<h2 id="后缀链接-link"><a href="#后缀链接-link" class="headerlink" title="后缀链接 link"></a>后缀链接 <code>link</code></h2><p>根据引理3，我们可以知道对于任意状态，其中包含的字串都是其中最长子串的一段连续后缀。这段连续后缀不一定可以覆盖 $[ 1,|\text{最长子串}| ]$ 这一整个区间，但一定是连续的。<br>我们可以将其看做是不断将最长子串的首个字符删去得到子串的一个过程。</p>
<p>而当我们不断删去，直到删去最短子串的首个字符的时候，我们会发现我们已经离开了这个状态。<br>我们可以根据这样一个走向创建一系列的新边。<br>这些新边就被称为link边，也叫做后缀链接。<br>有些地方也叫fa&#x2F;father边。 </p>
<blockquote>
<p><strong>引理4</strong>： 所有后缀链接构成一棵根节点为 $t_0$ 的树。</p>
</blockquote>
<p>证明：根据后缀链接的定义及引理3，我们可以看出，当前状态的后缀链接到达的是严格更短的字符串。而沿着后缀链接走，最后总能到达代表着空字符串的 $t_0$ 。</p>
<p>我们将后缀链接与endpos关联一下。<br>根据引理2，我们可以得出，两个endpos等价类不是互相包含，就是互不相交。根据这个包含关系，我们可以列出一棵endpos等价类的树。<br>对应在后缀自动机上就是对状态建树。</p>
<blockquote>
<p><strong>引理5</strong>： 通过 $\operatorname{endpos}$ 集合构造的树（每个子节点的子集都包含在父节点的子集中）与通过后缀链接构造的树相同。</p>
</blockquote>
<p>证明：是树的证明上面有了，我们看一下对于两者相同的证明。<br>考虑任意非 $t_0$ 的状态 $u$ 及其后缀链接 $\operatorname{link}(u)$ 。根据引理2和后缀链接的定义，我们可以知道 $\operatorname{endpos}(u) \varsubsetneqq \operatorname{endpos}(\operatorname{link}(u))$ 。这样，我们在建树的时候，就会在 $u$ 与 $\operatorname{link}(u)$ 之间连一条边。</p>
<h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>下面是对字符串 $aabbabcd$ 构建后缀自动机得到的结果。<br>其中，蓝色(#1453AD)的边代表的是转移，绿色(#14AD53)的边代表的是后缀链接。<br>蓝色(#1453AD)的点代表状态，紫色(#AD1453)的点代表终止状态。</p>
<p><img src="/pics/SAM.svg" alt="SAM"></p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>构建后缀自动机的算法是个<strong>在线</strong>算法。我们逐个加入字符串中的每个字符，并在每一步中相应地维护刚刚得到的后缀自动机。<br>为了保证线性的空间复杂度，我们只保存<code>len</code>与<code>link</code>的值。终止状态的值可以在构建完自动机之后求出。</p>
<p>在最开始，整个后缀自动机只会包含一个节点： $t_0$ ，编号为0。我们指定<code>len[0] = 0</code>，<code>link[0] = -1</code>。这里的$-1$表示的是一个虚拟的状态。<br>然后我们就可以向后缀自动机内添加字符了。</p>
<p>我们向后缀自动机内添加一个字符 $c$ 的算法流程如下：</p>
<p>我们令<code>last</code>为先前对应整个字符串的状态（一开始我们设<code>last = 0</code>）。</p>
<p>创建一个新的状态<code>cur</code>，并使<code>len[cur] = len[last] + 1</code>。</p>
<p>从状态<code>last</code>开始，不断遍历后缀链接。<br>如果还没有到字符 $c$ 的转移，我们就添加一个指向<code>cur</code>的转移。<br>如果在某个点已经存在到字符 $c$ 的转移，我们就停下来，并将这个状态记为<code>p</code>。<br>如果没有找到这样的状态<code>p</code>，我们最终会到达虚拟状态$-1$，这时我们使<code>link[cur] = 0</code>并退出。</p>
<p>如果我们找到了一个状态<code>p</code>，其可以通过字符 $c$ 转移，我们将这样转移到的状态标记为<code>q</code>。<br>现在我们考虑我们找到的<code>q</code>是否满足<code>len[p] + 1 = len[q]</code>这个条件。</p>
<p>如果满足，那么我们就只需要使<code>link[cur] = q</code>并退出。</p>
<p>如果不满足，那么情况就会变得复杂。<br>我们需要复制一个状态<code>q</code>，标记为<code>nq</code>。<code>nq</code>将会获得<code>q</code>除了<code>len</code>以外的所有信息。我们将<code>len[nq]</code>赋值为<code>len[p] + 1</code>。之后，我们使<code>link[cur] = link[q] = nq</code>。<br>之后，使用后缀链接从<code>p</code>往回走，并把沿途所有指向<code>q</code>的转移重定向至<code>nq</code>。</p>
<p>最后，我们将<code>last</code>的值更新为<code>cur</code>。</p>
<h3 id="寻找终止状态"><a href="#寻找终止状态" class="headerlink" title="寻找终止状态"></a>寻找终止状态</h3><p>如果我们还想要知道哪些状态是终止状态而那些不是，我们可以在构建完 $s$ 对应的后缀自动机之后再进行寻找。</p>
<p>我们从刚才最后一步得到的<code>last</code>处开始遍历后缀链接，直到最终到达初始节点。<br>我们将沿途的所有状态都标记为终止状态，因为他们存储着原字符串 $s$ 的至少一个后缀。</p>
<h3 id="类比"><a href="#类比" class="headerlink" title="类比"></a>类比</h3><p>在课上听到了一个将后缀Trie和SAM进行类比的点子。<br>其核心思想就是通过压缩后缀Trie，使得其变成SAM的样子。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM4MDQ=">洛谷板子题</span>代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3804/p3804.cpp"><code>Luogu P3804</code></a></p>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>见<span class="exturl" data-url="aHR0cHM6Ly9vaS13aWtpLm9yZy9zdHJpbmcvc2FtLyNfMTM=">OIwiki</span>。</p>
]]></content>
      <categories>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>字符串</tag>
        <tag>自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>树状数组</title>
    <url>/OI/tree-array/</url>
    <content><![CDATA[<p>简介： 树状数组</p>
<span id="more"></span>

<h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><p>一种神奇的数据结构。</p>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>当我们想要对一个数组进行单点加时，我们可以选择使用普通数组，时间复杂度是 $O(1)$；<br>当我们想要对一个数组进行区间求和时，我们可以选择使用前缀和数组，时间复杂度也是 $O(1)$；</p>
<p>但是，前缀和数组在进行单点加时，时间复杂度是 $O(n)$ ；<br>而普通数组在进行区间求和时，时间复杂度也是 $O(n)$ ；</p>
<p>我们能不能设计出一个数据结构，让我们在进行这两个操作时牺牲某一个操作的时间复杂度，而减少了另一个操作的时间复杂度呢？</p>
<p>于是，树状数组就应运而生。</p>
<h2 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h2><p>树状数组的存储原理是这个样子的：</p>
<p>我们称原数组为 $a[i]$ ，我们正常所输入的数据就存储在这里。</p>
<p>在原数组 $a[i]$ 的基础上，我们创建一个新的数组 $c[i]$ 。<br>数组 $c[i]$ 是以这个规则存储信息的：</p>
<p>我们先列出所有的数组下标：</p>
<p><img src="https://i.loli.net/2021/10/14/w8Q9VlYpkiRZOuK.png" alt="树状数组1.png"></p>
<p>接下来我们开始考虑数字的 $lowbit$ 。</p>
<p>所有奇数的 $lowbit$ 都是1。<br>我们在第一层标记上 $lowbit$ 为1的所有数字：</p>
<p><img src="https://i.loli.net/2021/10/14/etBbyiMgNhHA2zQ.png" alt="树状数组2.png"></p>
<p>接下来，我们依次标上数字的 $lowbit$ ：</p>
<p><img src="https://i.loli.net/2021/10/14/7J41bdLejGiP9wF.png" alt="树状数组3.png"></p>
<p><img src="https://i.loli.net/2021/10/14/vCznWK9uGPhIwO8.png" alt="树状数组4.png"></p>
<p><img src="https://i.loli.net/2021/10/14/j1TmJIP9xBknas5.png" alt="树状数组5.png"></p>
<p>最后，我们再进行一下延长，每一个块向左延长至长度为 $2^{lowbit(i)}$ 。</p>
<p><img src="https://i.loli.net/2021/10/14/PAUqE1a8D6CGh3d.png" alt="树状数组6.png"></p>
<p>我们对块进行一下标号：</p>
<p><img src="https://i.loli.net/2021/10/14/r8mtGfDANz2XWHv.png" alt="树状数组7.png"></p>
<p>这些绿色的块里面存储的是其下方所有数字的和。</p>
<p>当然，我们进行值的更新的时候，不可能一个一个加起来再更新，这样复杂度又回到了原先的样子。</p>
<p>我们更新时遵循的是这样一个路线：</p>
<p><img src="https://i.loli.net/2021/10/14/JWnIe5SftkZjpL7.png" alt="树状数组8.png"></p>
<p>因为每一个数有 $\log (n)$ 位，所以最终两个操作的时间复杂度都是 $O(\log n)$ 。</p>
<h2 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h2><div class="tabs" id="model"><ul class="nav-tabs"><li class="tab active"><a href="#model-1">Luogu板子题1</a></li><li class="tab"><a href="#model-2">Luogu板子题2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="model-1"><p>Luogu P3374 【模板】 树状数组1：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMzNzQ=">https://www.luogu.com.cn/problem/P3374</span></p>
<p>示例代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3374/p3374.cpp"><code>Luogu P3374</code></a></p></div><div class="tab-pane" id="model-2"><p>Luogu P3368 【模板】 树状数组2：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMzNjg=">https://www.luogu.com.cn/problem/P3368</span></p>
<div class="note info"><p>思路：维护差分序列，而不是原序列。</p>
</div>

<p>示例代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3368/p3368.cpp"><code>Luogu P3368</code></a></p></div></div></div>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Trie 与 AC自动机</title>
    <url>/OI/trie-and-AK-avtomat/</url>
    <content><![CDATA[<p>Trie树（字典树）与AC自动机。</p>
<span id="more"></span>

<h1 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h1><p>Trie树，又称字典树，是一种数据结构。</p>
<p>Trie树可以存储大量不同的字符串，同时支持对其以 $O(|S|)$ 的复杂度进行查询。</p>
<p>首先我们可以放一张图上来：</p>
<p><img src="https://s2.loli.net/2022/04/06/DjtOJRCaSzxwZAB.png" alt="trie1.png"></p>
<p>这就是我们向Trie中顺序插入了aa,aba,ba,bbc,bca,caba,cba,cc八个字符串之后的结果。</p>
<p>我们可以发现，Trie使用边来代表字母，而用点来表示字符串。<br>某一个点表示的字符串就是从根节点到该节点的路径上的字母顺序排列组合而成的字符串。<br>比如说17号节点就代表着cba这一个字符串。</p>
<p><img src="https://s2.loli.net/2022/04/06/udZE5v41asjfBYh.png" alt="trie2.png"></p>
<p>每一个点虽说都代表着一个字符串，但是这个字符串不一定被插入过。我们将实际上有的字符串进行了标红。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>我们将每一个节点存储到一个结构体里面：</p>
<div class="tabs" id="struct"><ul class="nav-tabs"><li class="tab active"><a href="#struct-1">数组</a></li><li class="tab"><a href="#struct-2">指针</a></li></ul><div class="tab-content"><div class="tab-pane active" id="struct-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">trie</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">&#125;tr[N];</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="struct-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">trie</span></span><br><span class="line">&#123;</span><br><span class="line">    trie *s[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">&#125;tr[N];</span><br></pre></td></tr></table></figure></div></div></div>

<p>这里 <code>s</code> 数组的大小是根据字符集的大小来定的，一般情况下是小写字母集，所以这里填的是26。</p>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>具体思想就是，如果当前节点的下一位所对应的儿子非空就跳到对应的儿子，是空的那就新建一个儿子。</p>
<div class="tabs" id="insert"><ul class="nav-tabs"><li class="tab active"><a href="#insert-1">数组</a></li><li class="tab"><a href="#insert-2">指针</a></li></ul><div class="tab-content"><div class="tab-pane active" id="insert-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].s[s[i] - <span class="string">&#x27;a&#x27;</span>] != <span class="number">0</span>)u = tr[u].s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tr[u].s[s[i] - <span class="string">&#x27;a&#x27;</span>] = ++idx;</span><br><span class="line">            u = idx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tr[u].cnt++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="insert-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> *u = &amp;tr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(u-&gt;s[s[i] - <span class="string">&#x27;a&#x27;</span>] != <span class="number">0</span>)u = u-&gt;s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            u-&gt;s[s[i] - <span class="string">&#x27;a&#x27;</span>] = &amp;tr[++idx];</span><br><span class="line">            u = u-&gt;s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    u-&gt;cnt++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除这个操作使用的范围不是很广。具体思想就是将对应我们想要删除的字符串的点的<code>cnt</code>值减去1即可。</p>
<div class="tabs" id="loeschen"><ul class="nav-tabs"><li class="tab active"><a href="#loeschen-1">数组</a></li><li class="tab"><a href="#loeschen-2">指针</a></li></ul><div class="tab-content"><div class="tab-pane active" id="loeschen-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">loeschen</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">        u = tr[u].s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    tr[u].cnt--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="loeschen-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">loeschen</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> *u = &amp;tr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">        u = u-&gt;s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    u-&gt;cnt--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询操作的思想就是，不断从根节点沿着字符串跳，直到调到空节点或者跳完整个字符串为止。</p>
<div class="tabs" id="chq"><ul class="nav-tabs"><li class="tab active"><a href="#chq-1">数组</a></li><li class="tab"><a href="#chq-2">指针</a></li></ul><div class="tab-content"><div class="tab-pane active" id="chq-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chq</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].s[s[i] - <span class="string">&#x27;a&#x27;</span>] != <span class="number">0</span>)u = tr[u].s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tr[u].cnt &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="chq-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chq</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> *u = &amp;tr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(u-&gt;s[s[i] - <span class="string">&#x27;a&#x27;</span>] != <span class="number">0</span>)u = u-&gt;s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u-&gt;cnt &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="全部加起来"><a href="#全部加起来" class="headerlink" title="全部加起来"></a>全部加起来</h3><div class="tabs" id="all"><ul class="nav-tabs"><li class="tab active"><a href="#all-1">数组</a></li><li class="tab"><a href="#all-2">指针</a></li></ul><div class="tab-content"><div class="tab-pane active" id="all-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">trie</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].s[s[i] - <span class="string">&#x27;a&#x27;</span>] != <span class="number">0</span>)u = tr[u].s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tr[u].s[s[i] - <span class="string">&#x27;a&#x27;</span>] = ++idx;</span><br><span class="line">            u = idx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tr[u].cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loeschen</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">        u = tr[u].s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    tr[u].cnt--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chq</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].s[s[i] - <span class="string">&#x27;a&#x27;</span>] != <span class="number">0</span>)u = tr[u].s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tr[u].cnt &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="all-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">trie</span></span><br><span class="line">&#123;</span><br><span class="line">    trie *s[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> *u = &amp;tr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(u-&gt;s[s[i] - <span class="string">&#x27;a&#x27;</span>] != <span class="number">0</span>)u = u-&gt;s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            u-&gt;s[s[i] - <span class="string">&#x27;a&#x27;</span>] = &amp;tr[++idx];</span><br><span class="line">            u = u-&gt;s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    u-&gt;cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loeschen</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> *u = &amp;tr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">        u = u-&gt;s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    u-&gt;cnt--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chq</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> *u = &amp;tr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(u-&gt;s[s[i] - <span class="string">&#x27;a&#x27;</span>] != <span class="number">0</span>)u = u-&gt;s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u-&gt;cnt &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>Luogu P2580：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDI1ODA=">https://www.luogu.com.cn/problem/P2580</span></p>
<p>参考代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p2000-p2999/p2580/p2580.cpp"><code>Luogu P2580</code></a></p>
<h2 id="01-Trie"><a href="#01-Trie" class="headerlink" title="01-Trie"></a>01-Trie</h2><p>01-Trie是Trie的一种变体。其字符集不是一般见到的Trie的小写字符集，而是 $\lbrace 0,1 \rbrace$。</p>
<p>由于01-Trie的字符集仅限于0和1，所以它被人们用来处理一些与位运算有关的东西，比如说异或和或者集合内数字两两异或的极值什么的。</p>
<h3 id="异或极值"><a href="#异或极值" class="headerlink" title="异或极值"></a>异或极值</h3><p>我们假定我们需要维护这样一个操作：<br>给出一个集合 $A$，再给出一个数 $k$，我们需要在集合内找到一个数 $a_i$，使之与 $k$ 的异或值最大（或最小）。</p>
<p>因为异或操作就是将两个数按照二进制逐位进行比对，相同为0，不同为1，所以我们就可以将上文提到的那个集合 $A$ 内的所有数根据二进制位分解之后再插入Trie中。</p>
<p>然后我们就像查找字符串一样，将 $k$ 进行二进制分解后得到的01串放进去匹配。<br>如果我们需要的是异或最小值的话，就按照正常查找字符串的方式跳。<br>如果我们需要的是异或最大值的话，就让每一次跳儿子的时候跳到与当前位置不同的儿子。</p>
<p>我们还需要注意一点，就是我们需要保证这棵Trie的深度与数据范围的最大二进制位数一致。</p>
<p>由于我们是从高位到低位建的，而高位远比低位重要，所以我们就可以大胆贪心，能跳就跳，不能跳就跳到相反的那个儿子上。而且我们保证了Trie的高度是一定的，这就保证了我们一定可以跳到底。</p>
<h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQ1NTE=">Luogu P4551 最长异或路径</span></p>
<p>参考代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p4000-p4999/p4551/p4551.cpp"><code>Luogu P4551</code></a></p>
<h2 id="可持久化Trie"><a href="#可持久化Trie" class="headerlink" title="可持久化Trie"></a>可持久化Trie</h2><p>有的时候题目要求我们能够随时访问某个历史版本，或甚至回溯到某个历史版本并对其进行修改。</p>
<p>暴力的做法是每一次都开一个新的Trie。</p>
<p>这时候，我们就可以将Trie持久化以完成这些题目的要求。</p>
<p>之前我们每一次插入的时候都是从根节点开始的，添加的字符串也是一条从根节点开始的路径，所以我们每一次插入只需要增加新的一整条路径，并把这条路径与上一个版本中未被更新的部分连接上即可。</p>
<h4 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h4><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMjU4Lw==">AcWing 256. 最大异或和</span></p>
<p>参考代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/AcWing/256/ac256.cpp"><code>AcWing 256</code></a></p>
<h1 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h1><p>这个AC自动机啊，他是 Aho-Corasick Automaton，不是什么Automation。</p>
<p>（博客的标题来自于俄语 Ахо-Корасик автомат -&gt; Aho-Korasik avtomat）</p>
<p>AC自动机就像是Trie和KMP的结合。<br>AC自动机基于的是Trie，同时其匹配字符串时的行为与KMP有异曲同工之妙。</p>
<h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><h3 id="改造-Trie"><a href="#改造-Trie" class="headerlink" title="改造 Trie"></a>改造 Trie</h3><p>这是一个简单的Trie结构体：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">trie</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">&#125;tr[N];</span><br></pre></td></tr></table></figure>

<p>对于KMP算法，我们是根据前缀函数来对字符串匹配进行优化的。<br>而对于Trie呢？</p>
<h3 id="fail指针"><a href="#fail指针" class="headerlink" title="fail指针"></a>fail指针</h3><p>我们考虑使用前缀函数的原因：</p>
<blockquote>
<p>我们需要找到一个前缀，在保证其与某个后缀相等的前提下，使得当前匹配的进度最大地保留下来。</p>
</blockquote>
<p>把同样的思想挪到Trie树上，我们需要找的就是：</p>
<blockquote>
<p>我们需要找到一个节点，其代表的字符串是当前节点代表的字符串的最长后缀。</p>
</blockquote>
<p>于是，我们就可以根据这样的情况来构建fail指针。</p>
<p>举个例子：</p>
<p>如下图，是依次向Trie树中添加he,his,him,her,hers,they,them,their,theirs,she的结果：</p>
<p><img src="https://s2.loli.net/2022/04/07/2QdAr9Jchl4tunG.png" alt="AC1-1.png"></p>
<p>然后我们开始依次构建fail指针。</p>
<p>我们利用BFS来帮助我们构建fail指针。</p>
<p>考虑一个已经构建了fail指针的节点 $u$，其对应字符 $c$ 的儿子 $s[u][c]$ 的fail指针的构建遵循下列原则：</p>
<ol>
<li>如果 $s[fail[u]][c]$ 存在，则让 $s[u][c]$ 的fail指针指向 $s[fail[u]][c]$。这样相当于是在 $u$ 和 $fail[u]$ 后面加一个字符 $c$，分别对应 $s[u][c]$ 和 $s[fail[u]][c]$。</li>
<li>如果 $s[fail[u]][c]$ 不存在，那么我们就递归寻找 $s[fail[fail[u]]][c]$，并重复上面的判断过程，直到跳到根节点。</li>
<li>如果真的什么都没有了，那就让 $s[u][c]$ 的fail指针指向根节点。</li>
</ol>
<p>下图中用不同的颜色来区分不同状态的边、点：</p>
<p>#FF9955 代表在队列中，等待构建fail指针的点；<br>#FFCC00 代表正在构建fail指针的点；<br>#AAD400 代表已经构建完fail指针的点；</p>
<p>#FF0000 代表正在构建的fail指针；<br>#FFDD55 代表已经构建完成的fail指针。</p>
<p><img src="/pics/AC2.gif" alt="AC2.gif"></p>
<p>最终效果图：</p>
<p><img src="https://s2.loli.net/2022/04/08/up7tvA28h9R3E5a.png" alt="AC2-38.png"></p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct trie</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int s[26];</span></span><br><span class="line"><span class="comment">    int cnt;</span></span><br><span class="line"><span class="comment">    int fail;</span></span><br><span class="line"><span class="comment">&#125;tr[N];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_fail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">        <span class="keyword">if</span>(tr[<span class="number">0</span>].s[i])q.<span class="built_in">push</span>(tr[u].s[i]);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tr[u].s[i])</span><br><span class="line">            &#123;</span><br><span class="line">                tr[tr[u].s[i]].fail = tr[tr[u].fail].s[i];</span><br><span class="line">                q.<span class="built_in">push</span>(tr[u].s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tr[u].s[i] = tr[tr[u].fail].s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码可能与我们刚才的叙述有部分出入，原因是这份代码做了些许优化。<br>事实证明这些优化虽然会修改Trie的结构，使之由树变为图，但是对我们存储的信息是有利无害的。</p>
<p>我们首先将根节点的所有儿子入队。<br>如果我们第一步将根节点入队的话，会导致根节点的所有子节点的fail指针指向自己，而不是指向根节点。</p>
<p>然后是遍历在队列中的节点。<br>对于其非空的儿子，我们照常构建fail指针。由于当前节点的fail指针已经构建完毕，且沿着fail指针形成的通往根节点的链上的所有节点都已经构建完毕了，所以我们直接指向当前节点的fail指针指向的节点的所对应的儿子。如果有这个儿子的话就指向他，如果没有的话就相当于是指向根节点。</p>
<p>然后我们将当前节点的部分空儿子指向当前节点的fail指针指向的节点的对应儿子上。<br>原因就是，反正也是失配了，与其花时间判失配跳fail指针再访问，不如直接访问我们想要它到的节点。<br>所以我们在匹配的时候一直走（结构体意义上的）树边，直到整个跑完就可以了。</p>
<p>照这样建完fail指针之后，我们会将原先的Trie树变为一张“Trie图”。</p>
<p>由于边太多太密，我就不画了。可能会补上一张CSAcademy的图。<br>（太糊了，感觉会不久后撤下，就先存本地了）</p>
<p><img src="/pics/AC3.png"></p>
<p>（这是原数据）</p>
<p><img src="/pics/AC4.png"></p>
<p>（这是图）</p>
<h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><p>匹配的思路是这个样子的：</p>
<ol>
<li>沿着Trie图的边跳，直到遍历完整个字符串为止。<br> 由于我们在之前已经将Trie树改造为了Trie图，且fail指针已经在某种意义上失去了其作为失配指针的意义，所以我们只需要跳Trie图内的边即可。</li>
<li>每走到一个节点，就沿着当前节点的fail指针累加答案。<br> 由于fail边跳到的是当前字符串在Trie内存在的最长后缀，且如果当前的模式串出现在了文本串内的话，其子串也会出现在文本串内，所以我们可以沿着fail指针一路遍历当前模式串的所有后缀。</li>
</ol>
<p>这里有一份对于多模式串匹配，且允许模式串多次被统计的，用来统计所有模式串的总出现次数的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        u = tr[u].s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = u; j &gt; <span class="number">0</span>; j = tr[j].fail)</span><br><span class="line">            res += tr[j].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>res</code>是所有模式串的总出现次数。</p>
<h2 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM4MDg=">P3808 【模板】 AC 自动机（简单版）</span></p>
<p>参考代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3808/p3808.cpp"><code>Luogu P3808</code></a></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM3OTY=">P3796 【模板】 AC 自动机（加强版)</span></p>
<p>参考代码：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p3000-p3999/p3796/p3796.cpp"><code>Luogu P3796</code></a></p>
]]></content>
      <categories>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>字符串</tag>
        <tag>自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>虚树</title>
    <url>/OI/virtual-tree/</url>
    <content><![CDATA[<p>虚树。</p>
<span id="more"></span>

<p>虚树，顾名思义，是一棵树。</p>
<p>有时候题目给的树太大了，同时每一次处理询问的时候总会有大量的不可避免的冗余信息需要处理，这时候就需要我们对当前的树建立一棵虚树来选择性地忽略掉一些不重要的信息，进而减小了时间复杂度。</p>
<p>一般需要建立虚树的题目会在树上选择出几个关键点进行询问，而不关心其它的信息。同时我们还可以注意到，关键点的个数一般是与树的大小是同阶的（即在同一个数量级内）。这指的是，假如我们每一次询问的关键点个数是 $k_i$ 个，一共有 $m$ 次询问，那么 $\log_{10} (\sum k_i) &#x3D; \log_{10} n$。</p>
<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>比如说这道题：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDI0OTU=">Luogu P2495</span> [SDOI2011] 消耗战</p>
<p>这一道题需要我们找到使所有关键点都不与根节点连接的割边方案，并且需要使这个割边方案中边的权值和最小。</p>
<p>对于这个问题，我们有一套经典的DP方案：</p>
<p>设 $dp[u]$ 表示使编号为 $u$ 的点不与其子树中任意一个关键点联通的最小代价。</p>
<p>设 $w(i,j)$ 表示连接 $i$ 与 $j$ 的边的权值。</p>
<p>那么我们可以枚举 $u$ 的儿子 $v$：</p>
<ul>
<li>若 $v$ 不是关键点，那么 $dp[u]&#x3D;dp[u]+\min(dp[v],w(u,v))$；</li>
<li>若 $v$ 是关键点，那么 $dp[u]&#x3D;dp[u]+w(u,v)$。</li>
</ul>
<p>单次DP的时间复杂度是 $O(n)$ 的。因为题目给出了 $m$ 次询问，并且每一次询问时关键点的信息还会改变，所以我们每一次询问的时候必须得重新DP一遍，这让我们总体的时间复杂度成为了 $O(nm)$。</p>
<p>然后看题目要求：</p>
<blockquote>
<p>对于 $100\%$ 的数据，$2\leq n \leq 2.5\times 10^5, 1\leq m\leq 5\times 10^5, \sum k_i \leq 5\times 10^5$。</p>
</blockquote>
<p>我们一眼就可以看出来以 $O(nm)$ 的复杂度是绝对过不去的。</p>
<p>经试验验证(LibreOJ)，以下面的代码可以跑出来50分的好成绩：<span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcy8xNDc2ODM0">提交寄录</span></p>
<h1 id="虚树"><a href="#虚树" class="headerlink" title="虚树"></a>虚树</h1><p>我们重新来看一遍DP的过程。</p>
<p>我们在枚举某一个节点的所有儿子的时候，假设这个节点 $u$ 下面的子树内没有一个关键点，那么这个DP的过程就是冗余的。</p>
<p>既然我们不需要 $u$ 及其子树的信息了，那么它也就没有了继续存在于图内的必要了。</p>
<p>而如果 $u$ 下面的子树内有关键点，那么他也不一定能留下。</p>
<p>鉴于我们只关心关键点之间的连通性，我们关心的只有两类点：一是关键点，二是可能是两个关键点的LCA的点。<br>前者的数量是给定的，而后者只会在树分叉的地方出现，数量不会大于关键点的个数。</p>
<p>我们就可以对这两种点建立一棵新的树，而树上的边权就是我们关心的信息——在这道题内就是两端点在原树上的路径中的最小边权。</p>
<p>然后我们就可以对着明显缩水了的树进行DP了。</p>
<p>如果我们使用正确的求LCA算法的话（比如 $O(\log n)$ 的树剖），我们的时间复杂度就是 $O(\log \sum k_i)$ 了。</p>
<p>而由于 $\sum k_i$ 与 $n$ 同阶，所以我们可以近似的将我们的时间复杂度看为 $O(n \log n)$。</p>
<h1 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h1><p>既然有了思想，我们就可以着手建立虚树了。</p>
<p>我们当然不可能逐个枚举关键点的LCA并加进去来建立，这样的复杂度仍然是 $O(k^2)$ 级别的，我们无法接受。</p>
<p>我们需要尝试将这个算法优化，至少优化到 $O(k)$ 级别（不算LCA的 $O(\log n)$），这样我们才能够通过上面的数据范围。</p>
<p>自己手模一下，可以发现LCA只会在树分叉的地方出现，所以我们只需要维护树分叉的地方就可以了。</p>
<p>那怎么维护呢？</p>
<p>我们可以尝试维护极右链。</p>
<p>对于这样的一棵树：</p>
<img src="https://s2.loli.net/2022/06/06/MWQe1lCIjOadpfs.png" alt="vt1.png" width="50%" />

<p>现在它的极右链是这块红色的链：</p>
<img src="https://s2.loli.net/2022/06/06/8hxmdLiXeOlfGtQ.png" alt="vt2.png" width="50%" />

<p>那么假设我们最后的点是这个红色点，美剧导的下一个点是这个蓝色的点：</p>
<img src="https://s2.loli.net/2022/06/06/oEYqybwUDK7VZGg.png" alt="vt3.png" width="50%" />

<p>蓝色的点向上到根节点的路径有与之前已经建好了的树重合的部分，也有之前没有出现过的部分（蓝色的链）。</p>
<p>我们把这个点加入树中的同时，还需要加入它与之前的极右链中的交点，即其与上一个关键点的LCA。</p>
<p>然后，最新的极右链就是这个：</p>
<img src="https://s2.loli.net/2022/06/06/VsBZlrqPUDuJweT.png" alt="vt4.png" width="50%" />

<p>为了保证不会损坏虚树的结构，首先我们将所有的关键点按照DFS序来排序，保证逐个遍历的时候不会有新的关键点出现在当前极右链的左边。</p>
<p>然后我们使用栈来维护遍历的顺序，就像我们DFS时的系统栈一样，记录下之前遍历的点。</p>
<p>下面的代码里面的注释就是对该步骤的解释：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v.<span class="built_in">init</span>();<span class="comment">//清空链式前向星</span></span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + k, cmp);<span class="comment">//将关键点按照DFS序排序</span></span><br><span class="line">    sta[tt = <span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//1号节点入栈</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> g = <span class="built_in">lca</span>(a[i], sta[tt]);</span><br><span class="line">        <span class="comment">//拎出来当前节点与栈顶节点在原树上的LCA</span></span><br><span class="line">        <span class="keyword">if</span>(g != sta[tt])</span><br><span class="line">        &#123;<span class="comment">//如果LCA不是栈顶的节点，就意味着当前节点不在当前节点所维护的链上</span></span><br><span class="line">            <span class="keyword">while</span>(id[g] &lt; id[sta[tt - <span class="number">1</span>]])</span><br><span class="line">            &#123;<span class="comment">//当次大节点的DFS序大于LCA的DFS序</span></span><br><span class="line">                <span class="type">int</span> p = sta[tt - <span class="number">1</span>], q = sta[tt--];</span><br><span class="line">                ll d = <span class="built_in">minpath</span>(p, q);</span><br><span class="line">                v.<span class="built_in">add</span>(p, q, d);</span><br><span class="line">                v.<span class="built_in">add</span>(q, p, d);</span><br><span class="line">                <span class="comment">//那就说明栈顶节点不需要再维护了</span></span><br><span class="line">                <span class="comment">//连边，弹栈</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(id[g] &gt; id[sta[tt - <span class="number">1</span>]])</span><br><span class="line">            &#123;<span class="comment">//如果LCA不是次大节点</span></span><br><span class="line">                ll d = <span class="built_in">minpath</span>(g, sta[tt]);</span><br><span class="line">                v.<span class="built_in">add</span>(g, sta[tt], d);</span><br><span class="line">                v.<span class="built_in">add</span>(sta[tt], g, d);</span><br><span class="line">                tt--;</span><br><span class="line">                sta[++tt] = g;</span><br><span class="line">                <span class="comment">//那就说明LCA从来没有在栈内出现过</span></span><br><span class="line">                <span class="comment">//与栈顶元素连边并弹出之</span></span><br><span class="line">                <span class="comment">//然后就入栈</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;<span class="comment">//否则LCA就是次大节点</span></span><br><span class="line">                <span class="type">int</span> p = sta[tt - <span class="number">1</span>], q = sta[tt--];</span><br><span class="line">                ll d = <span class="built_in">minpath</span>(p, q);</span><br><span class="line">                v.<span class="built_in">add</span>(p, q, d);</span><br><span class="line">                v.<span class="built_in">add</span>(q, p, d);</span><br><span class="line">                <span class="comment">//直接连边弹栈即可，不用入栈了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sta[++tt] = a[i];<span class="comment">//当前节点入栈</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(tt &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;<span class="comment">//将剩下的最后一条极右链连接起来</span></span><br><span class="line">        <span class="type">int</span> p = sta[tt - <span class="number">1</span>], q = sta[tt];</span><br><span class="line">        ll d = <span class="built_in">minpath</span>(p, q);</span><br><span class="line">        v.<span class="built_in">add</span>(p, q, d);</span><br><span class="line">        v.<span class="built_in">add</span>(q, p, d);</span><br><span class="line">        tt--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就可以愉快地在虚树上进行dp了，方法与之前一样。</p>
<p>现在我们的复杂度大大减小，就可以拿到——80分的好成绩！<span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcy8xNDc2NjAy">提交寄录</span></p>
<p>然后我们就不理解了。</p>
<p>我的理论复杂度也是对的，应该没有什么问题。</p>
<p>我们回忆一下我们代码的实现：</p>
<p>我们在每一次建立虚树之前，都把整个链式前向星都清空了一遍。</p>
<p>这时我们可以再懒一点，我们可以不需要清空链式前向星，只需要将每一个入栈的节点在入栈的时候清空该节点的表头即可。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">void build()</span><br><span class="line">&#123;</span><br><span class="line"><span class="deletion">-   v.init();</span></span><br><span class="line"><span class="addition">+   v.idx = 0;</span></span><br><span class="line">    sort(a + 1, a + 1 + k, cmp);</span><br><span class="line">    sta[tt = 1] = 1;</span><br><span class="line"><span class="addition">+   v.h[1] = -1;</span></span><br><span class="line">    for(int i = 1; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int g = lca(a[i], sta[tt]);</span><br><span class="line">        if(g != sta[tt])</span><br><span class="line">        &#123;</span><br><span class="line">            while(id[g] &lt; id[sta[tt - 1]])</span><br><span class="line">            &#123;</span><br><span class="line">                int p = sta[tt - 1], q = sta[tt--];</span><br><span class="line">                ll d = minpath(p, q);</span><br><span class="line">                v.add(p, q, d);</span><br><span class="line">                v.add(q, p, d);</span><br><span class="line">            &#125;</span><br><span class="line">            if(id[g] &gt; id[sta[tt - 1]])</span><br><span class="line">            &#123;</span><br><span class="line">                ll d = minpath(g, sta[tt]);</span><br><span class="line"><span class="addition">+               v.h[g] = -1;</span></span><br><span class="line">                v.add(g, sta[tt], d);</span><br><span class="line">                v.add(sta[tt], g, d);</span><br><span class="line">                tt--;</span><br><span class="line">                sta[++tt] = g;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                int p = sta[tt - 1], q = sta[tt--];</span><br><span class="line">                ll d = minpath(p, q);</span><br><span class="line">                v.add(p, q, d);</span><br><span class="line">                v.add(q, p, d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="addition">+       v.h[a[i]] = -1;</span></span><br><span class="line">        sta[++tt] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    while(tt &gt; 1)</span><br><span class="line">    &#123;</span><br><span class="line">        int p = sta[tt - 1], q = sta[tt--];</span><br><span class="line">        ll d = minpath(p, q);</span><br><span class="line">        v.add(p, q, d);</span><br><span class="line">        v.add(q, p, d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>剩下的节点我们就不需要管了，因为我们甚至没有访问他们的机会。</p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="Luogu-P2495-SDOI2011-消耗战"><a href="#Luogu-P2495-SDOI2011-消耗战" class="headerlink" title="Luogu P2495 [SDOI2011] 消耗战"></a>Luogu P2495 [SDOI2011] 消耗战</h2><p>题面在这里：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDI0OTU=">https://www.luogu.com.cn/problem/P2495</span></p>
<p>上面已经讲了做法了，就是一个树形DP。</p>
<p>代码见这里：<a href="https://gitee.com/kaiserwilheim/OIcodes/blob/master/Luogu/p2000-p2999/p2495/p2495.cpp"><code>Luogu P2495</code></a></p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>2022寒假测试8解析</title>
    <url>/contestrecords/2022-wh-8/</url>
    <content><![CDATA[<p>2022年寒假第8次测试解析。</p>
<span id="more"></span>

<h1 id="T1-「JOISC-2016-Day-2」女装大佬"><a href="#T1-「JOISC-2016-Day-2」女装大佬" class="headerlink" title="T1 「JOISC 2016 Day 2」女装大佬"></a>T1 「JOISC 2016 Day 2」女装大佬</h1><p>原题为 JOISC 2016 Day2 T3 「トイレ」。</p>
<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><details class="note info"><summary><p>题面</p>
</summary>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>题目译自 JOISC 2016 Day2 T3 「トイレ」<br>题面魔改原因：原题是男选手太多所以要借用女厕所 译者表示无法接受<br>IOI 的队服有两种，一种男装，一种是女装。然而很遗憾，所有参赛队伍中并没有女生，只有女装大佬。现在 IOI 设置了两个发放点，一个点只发放男装，另一个点只发放女装。<br>现在，所有队伍总共 $2N$ 个参赛队员，他们排成一列来领取队服，领取队服的规则如下：</p>
<ol>
<li>当前队首是女装大佬，如果领取女装的地方是空的，那么他就会领取女装，否则如果领取男装的地方是空的，他会去领取男装；</li>
<li>当前队首是正常男生，如果领取男装的地方是空的，那么他会领取男装，否则如果女装位空着，他就发挥绅♂士精神，给身后的最前面的女装大佬让位，让他先领取女装。<br>已知任意一个人领取队服都需要一分钟的时间，现在你需要重排所有人的顺序，使他们在 $N$ 分钟内领完队服 。<br>定义一个人的 Dark 值为：在重排队伍之前在他后面，且重排队伍之后在他前面的人的数量。<br>你现在需要找出重排后整个队伍最大的 Dark 值至少为多少。</li>
</ol>
</blockquote>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote>
<p>第一行为一个数 $N$ ，为领完队服的时限，同时 $2N$ 代表着总领队服人数，需要注意的是，这不意味着正常男生和女装大佬刚好各占 $N$ 个；<br>第二行为一个数 $M$，指队伍共有 $M$ 种；<br>之后的 $M$ 行，第 $i$ 行包括一个字符串和一个数字，描述该队伍的组成，其中 <code>M</code> 表示正常男生，<code>F</code> 表示女装大佬，之后的一个数字，表示该字符串连续出现了几次。所有字符串长度乘上出现次数的和等于 $2N$。</p>
</blockquote>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote>
<p>一个数，表示重排后最大 Dark 值的最小值，如果在 $N$ 分钟内不能完成领取队服的任务，输出 $−1$。</p>
</blockquote>

</details>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>（这里的说法是基于原题“トイレ”的背景——撤硕分配来说的）</p>
<p>首先我们需要判断哪个序列是一个可行的方案。</p>
<p>我们虽然可以从头开始模拟，但是这样需要耗费的时间实在是太多了。<br>因此，我们考虑从最后一分钟倒推。</p>
<p>既然我们有两个撤硕，总共 $2N$ 个人，需要在 $N$ 分钟内解决问题，那么必须是每一分钟都有两个人在上厕所。</p>
<p>那么我们看一下最后一分钟。<br>如果最后一分钟在队列里面等待的是两个男生，那么他们已经可以商量谁去女厕所了。<br>所以我们可以猜想，男的必须尽量靠前。</p>
<p>我们尝试将每一个 <code>F</code> 当做 $-1$，<code>M</code> 当做 $1$，基于此统计其后缀和。<br>我们需要确保所有人加起来不大于0，即最多有 $N$ 个男生。<br>我们还需要确保每一段后缀和都不大于1。自己用手推算一下的话，那么我们可以轻易发现，一旦有后缀和超过1的情况的话，那么最后肯定有两个（或更多）男生需要决定谁进女厕所。</p>
<p>我们可以选择二分让队尾多少个男生去往队头，也可以统计整个序列中后缀和最大值之后再+1。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>100分代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n, m;</span><br><span class="line">ll chq, ans, temp;</span><br><span class="line">ll t[N], p[N], maxp[N];</span><br><span class="line"><span class="type">char</span> s[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s + <span class="number">1</span> &gt;&gt; t[i];</span><br><span class="line">        <span class="type">int</span> lens = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = lens; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            p[i] += (s[j] == <span class="string">&#x27;F&#x27;</span> ? <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">            maxp[i] = <span class="built_in">max</span>(p[i], maxp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        chq += p[i] * t[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(chq &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = m; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, temp + (t[i] - <span class="number">1</span>) * p[i] + maxp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, temp + maxp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        temp += p[i] * t[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一发36分的Java8代码：</p>
<details class="note warning"><summary><p>Java8</p>
</summary>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//import java.util.Arrays;</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">S2544</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[] t=<span class="keyword">new</span> <span class="title class_">long</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[] p=<span class="keyword">new</span> <span class="title class_">long</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[] maxp=<span class="keyword">new</span> <span class="title class_">long</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span> chq=<span class="number">0</span>,ans=<span class="number">0</span>,temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Scanner scan=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">long</span> n=scan.nextInt();</span><br><span class="line">        <span class="type">int</span> m=scan.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            String inp=scan.next();</span><br><span class="line">            t[i]=scan.nextInt();</span><br><span class="line">            <span class="type">int</span> len=inp.length();</span><br><span class="line">            <span class="type">char</span>[] s=inp.toCharArray();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=len-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                p[i]+=(s[j]==<span class="string">&#x27;F&#x27;</span>?-<span class="number">1</span>:<span class="number">1</span>);</span><br><span class="line">                maxp[i]=max(p[i],maxp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            chq+=p[i]*t[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(chq&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=m;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    ans=max(ans,temp+(t[i]-<span class="number">1</span>)*p[i]+maxp[i]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    ans=max(ans,temp+maxp[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                temp+=p[i]*t[i];</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(ans-<span class="number">1</span>);</span><br><span class="line">            scan.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">max</span><span class="params">(<span class="type">long</span> a,<span class="type">long</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;=b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="T2-【常中20180812T3】-test"><a href="#T2-【常中20180812T3】-test" class="headerlink" title="T2 【常中20180812T3】 test"></a>T2 【常中20180812T3】 test</h1><h2 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h2><details class="note info"><summary><p>题面</p>
</summary>
<h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><blockquote>
<p>Tom在学写动态树，但是做题时过了样例，提交RE。Tom抓住Jerry要他写个暴力来对拍。Jerry觉得这任务太简单了，就让你来完成一下。</p>
</blockquote>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>有一棵 $n$个节点的树，初始时根节点为1。现在要支持如下操作——</p>
<ol>
<li>将某节点设置为根；</li>
<li>改变某节点权值；</li>
<li>询问以某节点为根的子树内节点权值之和；</li>
<li>询问以某两点为端点的链上的节点权值之和。</li>
</ol>
</blockquote>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote>
<p>第一行两个正整数 $n$ 和 $q$ ，表示树的节点数和操作个数。<br>接着 $n−1$ 行每行两个整数 $u$ 和 $v$ ，表示有连接 $u$ 和 $v$ 的一条边。<br>随后一行 $n$ 个正整数，表示每个点的初始权值。<br>之后 $q$ 行每行格式如下：<br>首先一个范围为 $[1,4]$ 的正整数，表示该操作类型。<br>对于1操作，之后一个正整数 $x$ ，表示将 $x$ 节点设置为根。<br>对于2操作，之后两个正整数 $x$ 和 $v$ ，表示将 $x$ 节点的权值改为 $v$ 。<br>对于3操作，之后一个正整数 $x$ ，表示询问以 $x$ 为根的子树内节点权值之和。<br>对于4操作，之后两个正整数 $x$ 和 $y$ ，表示询问以 $x$ 和 $y$ 为端点的链上的节点权值之和。</p>
</blockquote>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote>
<p>对于每个操作3和操作4，输出一行一个整数表示询问的答案。</p>
</blockquote>

</details>

<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>根据题目所给出的要求，我们可以使用LCT做这道题。</p>
<p>但是LCT太难了我不会啊QwQ</p>
<p>所以我们考虑退而求其次，使用换根树剖来做。<br>实测可行。</p>
<p>换根操作只会影响作用于一个节点子树上的操作，比如子树加，子树求和等等。</p>
<p>巧了，这里就有一个。</p>
<p>那就有点头疼。</p>
<p>我们根据要需要操作的节点 $x$ 和现根节点 $rt$ 的关系来考虑分三种情况：</p>
<ol>
<li><p><code>x==rt</code><br>这种情况明显很简单——就是整棵树。</p>
</li>
<li><p><code>lca(x,rt)！=x</code><br>这样我们可以知道现在的根 $rt$ 没有在 $x$ 的子树里，此时 $x$ 的子树与根为1时的子树无异，可以直接操作。</p>
</li>
<li><p><code>lca(x,rt)==x</code><br>这时候我们发现 $rt$ 在 $x$ 的子树里面。<br>此时，$x$ 的子树就会发生很大的改变。原先 $x$ 的子树包含 $rt$ 的那个儿子现在成为了 $x$ 的父亲，而其他儿子不变。原先为 $x$ 父亲的节点成为了 $x$ 的其中一个儿子，原先除其子树以外的节点都成为了其子树。<br>我们称这个子树包含 $rt$ 的儿子为 $v$ 。<br>现在 $x$ 的子树是 $[ 1 , id_v ) \cup ( id_v + sz_v - 1 , n ]$ 这两段连续的区间。<br>我们可以考虑对这两段区间分别操作，也可以选择对整棵树操作以后在减去中间的那一块er。</p>
</li>
</ol>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>100分代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> w[N], h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> id[N], nw[N], cnt;</span><br><span class="line"><span class="type">int</span> dep[N], sz[N], top[N], fa[N], son[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    ll sum;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> vater, <span class="type">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[p] = depth, fa[p] = vater, sz[p] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == vater)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(j, p, depth + <span class="number">1</span>);</span><br><span class="line">        sz[p] += sz[j];</span><br><span class="line">        <span class="keyword">if</span>(sz[son[p]] &lt; sz[j])son[p] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[p] = ++cnt, nw[cnt] = w[p], top[p] = t;</span><br><span class="line">    <span class="keyword">if</span>(!son[p])<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(son[p], t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == fa[p] || j == son[p])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(j, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].sum = tr[p &lt;&lt; <span class="number">1</span>].sum + tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].l = l, tr[p].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].sum = nw[r];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">segchg</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> ed, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((tr[p].l == ed) &amp;&amp; (tr[p].r == ed))</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].sum = k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ed &lt;= mid)<span class="built_in">segchg</span>(p &lt;&lt; <span class="number">1</span>, ed, k);</span><br><span class="line">    <span class="keyword">if</span>(ed &gt; mid)<span class="built_in">segchg</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, ed, k);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">segsum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((tr[p].l &gt;= l) &amp;&amp; (tr[p].r &lt;= r))<span class="keyword">return</span> tr[p].sum;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)res += <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)res += <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sumtree</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">segsum</span>(<span class="number">1</span>, id[p], id[p] + sz[p] - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sumpath</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[p] != top[q])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[p]] &lt; dep[top[q]])<span class="built_in">swap</span>(p, q);</span><br><span class="line">        res += <span class="built_in">segsum</span>(<span class="number">1</span>, id[top[p]], id[p]);</span><br><span class="line">        p = fa[top[p]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[p] &lt; dep[q])<span class="built_in">swap</span>(p, q);</span><br><span class="line">    res += <span class="built_in">segsum</span>(<span class="number">1</span>, id[q], id[p]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[p] != top[q])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[p]] &lt; dep[top[q]])<span class="built_in">swap</span>(p, q);</span><br><span class="line">        p = fa[top[p]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[p] &lt; dep[q])<span class="built_in">swap</span>(p, q);</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_v</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[p] != top[q])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[p]] &lt; dep[top[q]])<span class="built_in">swap</span>(p, q);</span><br><span class="line">        <span class="keyword">if</span>(fa[top[p]] == q)<span class="keyword">return</span> top[p];</span><br><span class="line">        p = fa[top[p]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[p] &lt; dep[q])<span class="built_in">swap</span>(p, q);</span><br><span class="line">    <span class="keyword">return</span> son[q];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a, b);</span><br><span class="line">        <span class="built_in">add</span>(b, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="type">int</span> rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op, x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;op, &amp;x);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            rt = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ll z;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;z);</span><br><span class="line">            <span class="built_in">segchg</span>(<span class="number">1</span>, id[x], z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x == rt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, tr[<span class="number">1</span>].sum);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">lca</span>(x, rt) != x)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">sumtree</span>(x));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, tr[<span class="number">1</span>].sum - <span class="built_in">sumtree</span>(<span class="built_in">get_v</span>(rt, x)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">sumpath</span>(x, y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>re的Java8代码（求调）：</p>
<details class="note warning"><summary><p>Java8</p>
</summary>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] w=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100010</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] h=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100010</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] e=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">200020</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] ne=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">200020</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] id=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100010</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] nw=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100010</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] dep=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100010</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] sz=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100010</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] top=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100010</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] fa=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100010</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] son=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100010</span>];</span><br><span class="line">    <span class="keyword">static</span> SegTree[] tr=<span class="keyword">new</span> <span class="title class_">SegTree</span>[<span class="number">800080</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Arrays.fill(h,-<span class="number">1</span>);</span><br><span class="line">        Scanner scan=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> n=scan.nextInt();</span><br><span class="line">        <span class="type">int</span> m=scan.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> a=scan.nextInt();</span><br><span class="line">            <span class="type">int</span> b=scan.nextInt();</span><br><span class="line">            add(a,b);</span><br><span class="line">            add(b,a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            w[i]=scan.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        dfs1(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="type">int</span> rt=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="type">int</span> op=scan.nextInt();</span><br><span class="line">            <span class="type">int</span> x=scan.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">                rt=x;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="type">int</span> y=scan.nextInt();</span><br><span class="line">                segchg(<span class="number">1</span>,id[x],y);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(x==rt)&#123;</span><br><span class="line">                    System.out.printf(<span class="string">&quot;%d\n&quot;</span>,tr[<span class="number">1</span>].sum);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(lca(x,rt)!=x)&#123;</span><br><span class="line">                        System.out.printf(<span class="string">&quot;%d\n&quot;</span>,sumtree(x));</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        System.out.printf(<span class="string">&quot;%d\n&quot;</span>,tr[<span class="number">1</span>].sum-sumtree(get_v(rt,x)));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">4</span>)&#123;</span><br><span class="line">                <span class="type">int</span> y=scan.nextInt();</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\n&quot;</span>,sumpath(x,y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        e[idx]=b;</span><br><span class="line">        ne[idx]=h[a];</span><br><span class="line">        h[a]=idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs1</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> father,<span class="type">int</span> depth)</span>&#123;</span><br><span class="line">        dep[p]=depth;</span><br><span class="line">        fa[p]=father;</span><br><span class="line">        sz[p]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=h[p];i!=-<span class="number">1</span>;i=ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j=e[i];</span><br><span class="line">            <span class="keyword">if</span>(j==father)<span class="keyword">continue</span>;</span><br><span class="line">            dfs1(j,p,depth+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(sz[son[p]]&lt;sz[j])son[p]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs2</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> t)</span>&#123;</span><br><span class="line">        id[p]=++cnt;</span><br><span class="line">        nw[cnt]=w[p];</span><br><span class="line">        top[p]=t;</span><br><span class="line">        <span class="keyword">if</span>(son[p]==<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">        dfs2(son[p],t);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=h[p];i!=-<span class="number">1</span>;i=ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j=e[i];</span><br><span class="line">            <span class="keyword">if</span>((j==fa[p])||(j==son[p]))<span class="keyword">continue</span>;</span><br><span class="line">            dfs2(j,j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pushup</span><span class="params">(<span class="type">int</span> p)</span>&#123;</span><br><span class="line">        tr[p].sum=tr[p&lt;&lt;<span class="number">1</span>].sum+tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">        tr[p].l=l;</span><br><span class="line">        tr[p].r=r;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">            tr[p].sum=nw[r];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        build(p&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">        build(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        pushup(p);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">segchg</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> ed,<span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((tr[p].l==ed)&amp;&amp;(tr[p].r==ed))&#123;</span><br><span class="line">            tr[p].sum=k;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid=(tr[p].l+tr[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(ed&lt;=mid)segchg(p&lt;&lt;<span class="number">1</span>,ed,k);</span><br><span class="line">        <span class="keyword">if</span>(ed&gt;mid)segchg(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,ed,k);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">segsum</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((tr[p].l&gt;=l)&amp;&amp;(tr[p].r&lt;=r))<span class="keyword">return</span> tr[p].sum;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> mid=(tr[p].l+tr[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid)res+=segsum(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        <span class="keyword">if</span>(r&gt;mid)res+=segsum(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sumtree</span><span class="params">(<span class="type">int</span> p)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> segsum(<span class="number">1</span>,id[p],id[p]+sz[p]-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sumpath</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(top[p]!=top[q])&#123;</span><br><span class="line">            <span class="keyword">if</span>(dep[top[p]]&lt;dep[top[q]])&#123;</span><br><span class="line">                <span class="type">int</span> temp=p;</span><br><span class="line">                p=q;</span><br><span class="line">                q=temp;</span><br><span class="line">            &#125;</span><br><span class="line">            res+=segsum(<span class="number">1</span>,id[top[p]],id[p]);</span><br><span class="line">            p=fa[top[p]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dep[p]&lt;dep[q])&#123;</span><br><span class="line">            <span class="type">int</span> temp=p;</span><br><span class="line">            p=q;</span><br><span class="line">            q=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        res+=segsum(<span class="number">1</span>,id[q],id[p]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lca</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(top[p]!=top[q])&#123;</span><br><span class="line">            <span class="keyword">if</span>(dep[top[p]]&lt;dep[top[q]])&#123;</span><br><span class="line">                <span class="type">int</span> temp=p;</span><br><span class="line">                p=q;</span><br><span class="line">                q=temp;</span><br><span class="line">            &#125;</span><br><span class="line">            p=fa[top[p]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dep[p]&lt;dep[q])&#123;</span><br><span class="line">            <span class="type">int</span> temp=p;</span><br><span class="line">            p=q;</span><br><span class="line">            q=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">get_v</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(top[p]!=top[q])&#123;</span><br><span class="line">            <span class="keyword">if</span>(dep[top[p]]&lt;dep[top[q]])&#123;</span><br><span class="line">                <span class="type">int</span> temp=p;</span><br><span class="line">                p=q;</span><br><span class="line">                q=temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fa[top[p]]==q)<span class="keyword">return</span> top[p];</span><br><span class="line">            p=fa[top[p]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dep[p]&lt;dep[q])&#123;</span><br><span class="line">            <span class="type">int</span> temp=p;</span><br><span class="line">            p=q;</span><br><span class="line">            q=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> son[q];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SegTree</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> l;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> r;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="T3-【20180819省队班】-取数字"><a href="#T3-【20180819省队班】-取数字" class="headerlink" title="T3 【20180819省队班】 取数字"></a>T3 【20180819省队班】 取数字</h1><h2 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h2><details class="note info"><summary><p>题面</p>
</summary>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定 $n$ 个整数 $a_i$，你需要从中选取若干个数，使得它们的和是 $m$ 的倍数。问有多少种方案。有多个询问，每次询问一个的 $m$ 对应的答案。</p>
</blockquote>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote>
<p>第一行两个正整数 $n$，$q$，分别表示整数的数量和询问的数量。<br>第二行 $n$ 个整数 $a_i$ 。<br>接下来 $q$ 行，每行表示一个 $m$。</p>
</blockquote>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote>
<p>对于每个询问，输出一行答案 $\bmod{1e9+7}$。</p>
</blockquote>

</details>

<h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>这道题是个背包计数的问题，背包的容量是模m循环的。<br>记<code>f[i][j]</code>表示考虑了前 $i$个整数，当前余数是 $j$，有选和不选两种情况。那么对于一次询问 $q$，我们直接做的复杂度是 $O(nm)$，总复杂度 $O(nmq)$。这档暴力分应该拿到。</p>
<p>我们注意到m很小，而n很大，也就是说有很多重复的值，那么我们考虑设计一个下标为<code>dp[m][m]</code>的DP方法，每次考虑一类数。<br>假设第 $i$ 种数有 <code>k[i]</code> 个，我们的转移是：<br>$$<br>dp[i][j]&#x3D;\sum_{h&#x3D;0}^{k[i]} C_{k[i]}^h dp[i-1][j - h \times a[i] \bmod m]<br>$$<br>注意到 $\sum k[i]&#x3D;n$ ，以及dp数组的第二维最大只有m，因此我们可以每次 $O(k[i])$ 地预处理出组合数的系数，表示<code>dp[i-1][j]</code>的贡献。写成伪代码就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for h : [0, k[i]]</span><br><span class="line">    c[h % m] += C(k[i], h)</span><br></pre></td></tr></table></figure>

<p>然后我们再递推<code>dp[i][j]</code>，把 $dp[i-1][j]\times c[k]\to dp[i][j+k\times i\bmod m]$ 即可。</p>
<p>总复杂度$O(q(n+m^3))$。</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><p>100分代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200020</span>, M = <span class="number">110</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">ll T, n, m, k;</span><br><span class="line">ll a[N], fac[N], inv[N];</span><br><span class="line">ll t[M], f[M][M], pre[M];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>)ans = (ans * x) % mod;</span><br><span class="line">        x = (x * x) % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll b, ll a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (((fac[b] * inv[a]) % mod) * (inv[b - a])) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1ll</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i++)fac[i] = (fac[i - <span class="number">1</span>] * i) % mod;</span><br><span class="line">    inv[N - <span class="number">1</span>] = <span class="built_in">qpow</span>(fac[N - <span class="number">1</span>], mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = N - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)inv[i] = ((i + <span class="number">1</span>) * inv[i + <span class="number">1</span>]) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(t, <span class="number">0</span>, <span class="built_in">sizeof</span>(t));</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)t[(a[i] % m + m) % m]++;</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="built_in">qpow</span>(<span class="number">2</span>, t[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="built_in">sizeof</span>(pre));</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= t[i]; k++)pre[k % m] = (pre[k % m] + <span class="built_in">C</span>(t[i], k)) % mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= <span class="built_in">min</span>(m - <span class="number">1</span>, t[i]); k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    f[i][(j + i * k) % m] = (f[i][(j + i * k) % m] + f[i - <span class="number">1</span>][j] * pre[k] % mod) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, f[m - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>re的Java8代码（求调）：</p>
<details class="note warning"><summary><p>Java8</p>
</summary>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> N=<span class="number">200020</span>,M=<span class="number">110</span>,mod=(<span class="type">int</span>)(<span class="number">1e9</span>+<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[] a=<span class="keyword">new</span> <span class="title class_">long</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[] fac=<span class="keyword">new</span> <span class="title class_">long</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[] inv=<span class="keyword">new</span> <span class="title class_">long</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[] t=<span class="keyword">new</span> <span class="title class_">long</span>[M];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[][] f=<span class="keyword">new</span> <span class="title class_">long</span>[M][M];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[] pre=<span class="keyword">new</span> <span class="title class_">long</span>[M];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Scanner scan=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        init();</span><br><span class="line">        <span class="type">int</span> n=scan.nextInt();</span><br><span class="line">        <span class="type">int</span> T=scan.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a[i]=scan.nextInt();</span><br><span class="line">        <span class="keyword">while</span>((T--)!=<span class="number">0</span>)&#123;</span><br><span class="line">            Arrays.fill(t,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;M;j++)f[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m=scan.nextInt();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)t[(<span class="type">int</span>)((a[i]%m+m)%m)]++;</span><br><span class="line">            f[<span class="number">0</span>][<span class="number">0</span>]=qpow(<span class="number">2</span>,t[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">                Arrays.fill(pre,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=t[i];k++)pre[k%m]=(pre[k%m]+C((<span class="type">int</span>)t[i],k))%mod;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=min(m-<span class="number">1</span>,(<span class="type">int</span>)t[i]);k++)&#123;</span><br><span class="line">                        f[i][(j+i*k)%m]=(f[i][(j+i*k)%m]+f[i-<span class="number">1</span>][j]*pre[k]%mod)%mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(f[m-<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">qpow</span><span class="params">(<span class="type">long</span> x,<span class="type">long</span> k)</span>&#123;</span><br><span class="line">        <span class="type">long</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(k!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((k&amp;<span class="number">1</span>)==<span class="number">1</span>)ans=(ans*x)%mod;</span><br><span class="line">            x=(x*x)%mod;</span><br><span class="line">            k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">C</span><span class="params">(<span class="type">int</span> b,<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (((fac[b]*inv[a])%mod)*(inv[b-a]))%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        fac[<span class="number">0</span>]=<span class="number">1l</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i++)fac[i]=(fac[i-<span class="number">1</span>]*i)%mod;</span><br><span class="line">        inv[N-<span class="number">1</span>]=qpow(fac[N-<span class="number">1</span>],mod-<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=N-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)inv[i]=((i+<span class="number">1</span>)*inv[i+<span class="number">1</span>])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;=b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>比赛解析</category>
      </categories>
      <tags>
        <tag>比赛解析</tag>
      </tags>
  </entry>
  <entry>
    <title>欧拉和莫比乌斯</title>
    <url>/maths/eular-and-m%C3%B6bius/</url>
    <content><![CDATA[<p>简介：欧拉定理，欧拉函数和莫比乌斯函数</p>
<span id="more"></span>

<p>初稿写于2021-10-10，<br>再修改于2022-02-07</p>
<p><strong>Achtung: 本文章使用p来代指“任意质数”，请勿混淆。</strong></p>
<p>首先让我们膜拜一下莱昂哈德·欧拉(Leonhard Euler):</p>
<p><img src="/pics/eular.jpg" alt="eular"></p>
<h1 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h1><p>欧拉函数 $φ(n)$ 的概念是在 $[0,n-1]$ 范围内有多少个整数与 $n$ 互质。</p>
<p>其中，我们规定 $φ(1)&#x3D;1$，</p>
<p>且不难发现，$φ(p)&#x3D;p-1$。</p>
<h2 id="欧拉函数的一些性质"><a href="#欧拉函数的一些性质" class="headerlink" title="欧拉函数的一些性质"></a>欧拉函数的一些性质</h2><h3 id="欧拉函数是积性函数"><a href="#欧拉函数是积性函数" class="headerlink" title="欧拉函数是积性函数"></a>欧拉函数是积性函数</h3><p>即 $φ(mn) &#x3D; φ(m) φ(n)$</p>
<p>并且当 $n \bmod{2} \equiv 1$ 时，$φ(2n) &#x3D; φ(n)$，</p>
<p>而当 $n \bmod{2} \equiv 0$（即 $2|n$)时，$φ(2n) &#x3D; 2 φ(n)$</p>
<h3 id="displaystyle-sum-m-n-n-m-x3D-n-frac-φ-n-2"><a href="#displaystyle-sum-m-n-n-m-x3D-n-frac-φ-n-2" class="headerlink" title="$\displaystyle \sum_{m|n}^{n} m &#x3D; n \frac{φ(n)}{2}$"></a>$\displaystyle \sum_{m|n}^{n} m &#x3D; n \frac{φ(n)}{2}$</h3><p>$$<br>\sum_{m|n}^{n} m &#x3D; n \frac{φ(n)}{2}<br>$$</p>
<p>易证。</p>
<h3 id="displaystyle-sum-d-n-φ-d-x3D-n"><a href="#displaystyle-sum-d-n-φ-d-x3D-n" class="headerlink" title="$\displaystyle \sum_{d|n} φ(d) &#x3D; n$"></a>$\displaystyle \sum_{d|n} φ(d) &#x3D; n$</h3><p>$$<br>\sum_{d|n} φ(d) &#x3D; n<br>$$</p>
<p>我们利用莫比乌斯反演的相关知识可以得出。</p>
<p>或者我们这样考虑：<br>如果 $\gcd(k,n) &#x3D; d$ ，那么 $\gcd(\frac{k}{d} , \frac{n}{d}) &#x3D; 1 (k &lt; n)$ 。<br>我们如果设 $f(x)$ 为满足 $\gcd(k,n) &#x3D; x$ 的数的个数，那么 $n &#x3D; \sum_{i-1}^n f(i)$ 。<br>根据上面的证明，我们可以发现， $f(x) &#x3D; φ(\frac{n}{x})$ ，从而得到 $n &#x3D; \sum_{d|n} φ(\frac{n}{d})$ 。注意此时我们的约数 $d$ 和 $\frac{n}{d}$ 具有对称性，所以上面的式子可以化为 $n &#x3D; \sum_{d|n} φ(d)$ 。</p>
<h3 id="displaystyle-φ-p-k-x3D-p-k-p-k-1"><a href="#displaystyle-φ-p-k-x3D-p-k-p-k-1" class="headerlink" title="$\displaystyle φ(p^k) &#x3D; p^k - p^{k-1}$"></a>$\displaystyle φ(p^k) &#x3D; p^k - p^{k-1}$</h3><p>若 $n &#x3D; p^k$ ，那么 $φ(n) &#x3D; p^k - p^{k-1}$ 。</p>
<p>由定义可知。<br>因为有 $n \perp p^k \iff p \not \mid n$ 。在 ${ 0,1,p,\cdots ,p^k-1 }$ 中， $p$ 的倍数是 ${ 0,p,2p,\cdots ,p^k-p }$ ，共有 $p^{k-1}$ 个。</p>
<h3 id="displaystyle-φ-prod-i-x3D-1-s-p-i-k-i-x3D-prod-i-x3D-1-s-p-i-k-i-1-·-p-i-1"><a href="#displaystyle-φ-prod-i-x3D-1-s-p-i-k-i-x3D-prod-i-x3D-1-s-p-i-k-i-1-·-p-i-1" class="headerlink" title="$\displaystyle φ(\prod_{i&#x3D;1}^s p_i^{k_i}) &#x3D; \prod_{i&#x3D;1}^s p_i^{k_i - 1} · (p_i - 1)$"></a>$\displaystyle φ(\prod_{i&#x3D;1}^s p_i^{k_i}) &#x3D; \prod_{i&#x3D;1}^s p_i^{k_i - 1} · (p_i - 1)$</h3><p>由唯一分解定理，设 $n &#x3D; \prod_{i&#x3D;1}^s p_i^{k_i}$ ，则有 $φ(n) &#x3D; \prod_{i&#x3D;1}^s \frac{p_i - 1}{p_i}$。</p>
<p>证明：</p>
<p>$$<br>\begin{align}<br>φ(n) &amp;&#x3D; \prod_{i&#x3D;1}^s φ(p_i^{k_i}) \\<br>&amp;&#x3D; \prod_{i&#x3D;1}^s p_i^{k_i} - p_i^{k_i - 1} \\<br>&amp;&#x3D; \prod_{i&#x3D;1}^s (p_i - 1) \times p_i^{k_i - 1} \\<br>&amp;&#x3D; \prod_{i&#x3D;1}^s (1 - \frac{1}{p_i}) p_i^{k_i} \\<br>&amp;&#x3D; n \prod_{i&#x3D;1}^s (1 - \frac{1}{p_i})<br>\end{align}<br>$$</p>
<h2 id="计算欧拉函数的值"><a href="#计算欧拉函数的值" class="headerlink" title="计算欧拉函数的值"></a>计算欧拉函数的值</h2><h3 id="单点求值"><a href="#单点求值" class="headerlink" title="单点求值"></a>单点求值</h3><p>我们不难发现，当 $m$ 是一个质数的整数幂 $p^k$ 时，我们有<br>$$<br>φ(p^k)&#x3D;p^k-p^{k-1}<br>$$<br>;<br>如果 $m&gt;1$ 不是一个质数的整数幂，那我们可以把 $m$ 拆分成 $m&#x3D;m_1 m_2$ ，其中 $m_1 \perp m_2$。这样这个数就可以在剩余系里表示为 $(n \bmod m_1 , n \bmod m_2)$ 。如果你不知道什么是剩余系，可以看我的博客：（咕了）。</p>
<p>根据<br>$$<br>k \perp m 且 k \perp n \iff k \perp mn<br>$$<br>和<br>$$<br>\gcd(m,n) &#x3D; \gcd(n \bmod m,m)<br>$$<br>可得<br>$$<br>n \perp m \iff n \bmod m_1 \perp m_1 且 n \bmod m_2 \perp m_2<br>$$<br>，由此，我们可以推得<br>$$<br>φ(m)&#x3D;φ(m_1)φ(m_2),m_1 \perp m_2<br>$$<br>所以，欧拉函数是一个积性函数。</p>
<p>欧拉函数的通项公式是<br>$$<br>φ(m)&#x3D;\prod_{p|m} (p^{m_p}-p^{m_p-1})&#x3D;m \prod_{p|m}(1-\frac{1}{p})<br>$$</p>
<p>上代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">euler_phi</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">int</span>(<span class="built_in">sqrt</span>(n + <span class="number">0.5</span>));</span><br><span class="line">    <span class="type">int</span> ans = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = ans / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) ans = ans / n * (n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果将代码改为下面的形式可以优化一些：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">euler_phi</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = ans / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) ans = ans / n * (n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="区间筛"><a href="#区间筛" class="headerlink" title="区间筛"></a>区间筛</h3><p>而我们可以使用筛法来求连续区间的欧拉函数值：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> phi[N], prime[N / <span class="number">100</span>];</span><br><span class="line"><span class="type">bool</span> visit[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getphi</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visit[i])</span><br><span class="line">        &#123;</span><br><span class="line">            prime[prime[<span class="number">0</span>] + <span class="number">1</span>] = i;</span><br><span class="line">            prime[<span class="number">0</span>]++;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= prime[<span class="number">0</span>] &amp;&amp; i * prime[j] &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            visit[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i % prime[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                phi[i * prime[j]] = phi[i] * prime[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                phi[i * prime[j]] = phi[i] * (prime[j] - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有OI Wiki上提供的代码：</p>
<details class="note default"><summary><p>from OI Wiki</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(is_prime, <span class="number">1</span>, <span class="built_in">sizeof</span>(is_prime));</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    is_prime[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">5000000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_prime[i])</span><br><span class="line">        &#123;</span><br><span class="line">            prime[++cnt] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i * prime[j] &lt;= <span class="number">5000000</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            is_prime[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j])</span><br><span class="line">                phi[i * prime[j]] = phi[i] * phi[prime[j]];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                phi[i * prime[j]] = phi[i] * prime[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<p>复杂度均为线性。</p>
<h1 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h1><p>我们先看一下费马小定理。</p>
<h2 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h2><p>众所周知，费马小定理是：<br>$$<br>a^{p-1} \equiv 1 \pmod{p},a \perp p<br>$$<br>还有另一种形式，是这样的：<br>$$<br>\forall a \in \mathbb{N} ,a^p \equiv a \pmod{p}<br>$$<br>。</p>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>我们首先取一个不为 $p$ 倍数的数 $a$ 。<br>构造一个序列： $A &#x3D; \lbrace 1,2,3, \cdots , p - 1 \rbrace$ ，这个序列拥有这样的一个性质：<br>$$<br>\prod_{i&#x3D;1}^n A_i \equiv \prod_{i&#x3D;1}^n (A_i \times a) \pmod{p}<br>$$</p>
<p>证明：<br>$$<br>\because (A_i,p) &#x3D; 1 , (A_i \times a,p) &#x3D; 1<br>$$<br>又因为每一个 $A_i \times a \pmod{p}$ 都是独一无二的，且 $A_i \times a \pmod{p} &lt; p$ ，得证（每一个 $A_i \times a$ 都对应了一个 $A_i$）。<br>设 $f &#x3D; (p-1)!$，则<br>$$<br>\begin{align}<br>f &amp;\equiv (a \times A_1)(a \times A_2)(a \times A_3) \cdots (a \times A_{p-1}) \pmod{p} \\<br>a^{p-1} · f &amp;\equiv f \pmod{p} \\<br>a^{p-1} &amp;\equiv 1 \pmod{p}<br>\end{align}<br>$$<br>证毕。</p>
<p>或者也可以使用归纳法证明：</p>
<p>显然 $1^p \equiv 1 \pmod{p}$。那么假设 $a^p \equiv a \pmod{p}$ 成立，那么通过二项式定理有<br>$$<br>(a+1)^p &#x3D; a^p + C_p^1 a^{p-1} + C_p^2 a^{p-2} + \cdots + C_p^{p-1} a + 1<br>$$<br>因为 $C_p^k &#x3D; \frac{p!}{(n-k)!k!}$ 对于 $k \in [ 1,p-1 ]$ 成立，在模 $p$ 意义下 $C_p^1 \equiv C_p^2 \equiv \cdots \equiv C_p^{p-1} \equiv 0 \pmod{p}$，那么 $(a+1)^p \equiv a^p + 1 \pmod{p}$，将 $a^p \equiv a \pmod{p}$ 代入得 $(a+1)^p \equiv a+1 \pmod{p}$。<br>证毕。</p>
<h2 id="欧拉定理-1"><a href="#欧拉定理-1" class="headerlink" title="欧拉定理"></a>欧拉定理</h2><p>欧拉定理的内容如下：</p>
<p>若 $\gcd(a,m) &#x3D; 1$，则 $a^{φ(m)} \equiv 1 \pmod{m}$。</p>
<h3 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h3><p>欧拉定理的证明过程与费马小定理的证明过程十分相似。<br>我们同样首先构造一个与 $m$ 互质的序列，再进行操作。</p>
<p>设 $r_1,r_2, \cdots ,r_{φ(m)}$ 为模 $m$ 意义下的一个简化剩余系，则 $ar_1,ar_2, \cdots ,ar_{φ(m)}$ 同样也为模 $m$ 意义下的一个简化剩余系。所以，$\prod_{i&#x3D;1}^{φ(m)} r_i \equiv \prod_{i&#x3D;1}^{φ(m)} ar_i \equiv a^{φ(m)} \prod_{i&#x3D;1}^{φ(m)} r_i \pmod{m}$，约去 $\prod_{i&#x3D;1}^{φ(m)} r_i$ 后可得 $a^{φ(m)} \equiv 1 \pmod{m}$。<br>证毕。</p>
<p>当 $m&#x3D;p$ 时，由于 $φ(m) &#x3D; m-1$，将之代入可得费马小定理。</p>
<h2 id="扩展欧拉定理"><a href="#扩展欧拉定理" class="headerlink" title="扩展欧拉定理"></a>扩展欧拉定理</h2><p>扩展欧拉定理是这个样子的：</p>
<p>$$<br>a^b \equiv \begin{cases}a^{b \ \bmod \ φ(m)}, &amp; \gcd(a,m) &#x3D; 1,\\a^b, &amp; \gcd(a,m) \neq 1, b &lt; φ(m),\\a^{(b \ \bmod \ φ(m))+φ(m)}, &amp; \gcd(a,m) \neq 1,b \geq φ(m). \end{cases} \pmod{m}<br>$$</p>
<p>证明见<span class="exturl" data-url="aHR0cHM6Ly9vaS13aWtpLm9yZy9tYXRoL251bWJlci10aGVvcnkvZmVybWF0LyNfNg==">OI Wiki</span></p>
<h1 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>我们把一个数字分解质因数为 $n&#x3D;p_1^{c_1}p_2^{c_2} \cdots p_k^{c_k}$，则<br>$$<br>μ(n)&#x3D;<br>\begin{cases}<br>1 &amp; n&#x3D;1 \\<br>0 &amp; \forall i \in [1,k] , c_i &gt; 1 \\<br>(-1)^k &amp; \forall i \in [1,k] , c_i &#x3D; 1<br>\end{cases}<br>$$</p>
<p>解释一下：</p>
<ol>
<li>当 $n&#x3D;1$ 时， $μ(n)&#x3D;1$；</li>
<li>当 $n \neq 1$ 时：<ol>
<li>当存在 $i\in [1,k]$，使得 $c_i &gt; 1$ 时，$μ(n)&#x3D;0$，也就是说只要某个质因子出现的次数超过一次，$μ(n)$ 就等于 $0$；</li>
<li>当任意 $i\in[1,k]$，都有 $c_i&#x3D;1$ 时，$μ(n)&#x3D;(-1)^k$，也就是说每个质因子都仅仅只出现过一次时，$μ(n)$ 等于 $-1$ 的 $k$ 次幂，此处 $k$ 指的便是仅仅只出现过一次的质因子的总个数。</li>
</ol>
</li>
</ol>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>莫比乌斯函数不仅是积性函数，还有如下性质：<br>$$<br>\sum_{d|m} μ(d) &#x3D; [m&#x3D;&#x3D;1]<br>$$<br>其中 $[m&#x3D;&#x3D;1]$ 代表 <code>m==1?1:0</code> 。</p>
<h2 id="证明-2"><a href="#证明-2" class="headerlink" title="证明"></a>证明</h2><p>设<br>$$<br>n&#x3D;\prod_{i&#x3D;1}^k{p_i}^{c_i},n’&#x3D;\prod_{i&#x3D;1}^k p_i<br>$$<br>那么<br>$$<br>\sum_{d\mid n}μ(d)&#x3D;\sum_{d\mid n’}μ(d)&#x3D;\sum_{i&#x3D;0}^k C_k^i·(-1)^i&#x3D;(1+(-1))^k<br>$$</p>
<h2 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><p>如果两个的函数 $f(n)$ 与 $g(n)$ 满足<br>$$<br>f(n) &#x3D; \sum_{d|n} g(d)<br>$$<br>则<br>$$<br>g(n) &#x3D; \sum_{d|n} μ(d) f(\frac{n}{d})<br>$$</p>
<h3 id="证明-3"><a href="#证明-3" class="headerlink" title="证明"></a>证明</h3><details class="note info"><summary><p>摘自《混凝土数学》</p>
</summary>
<h4 id="充分性"><a href="#充分性" class="headerlink" title="充分性"></a>充分性</h4><p>$$<br>\begin{align}<br>f(n) &amp;&#x3D; \sum_{d|n} g (d)\\<br>&amp;&#x3D; \sum_{d|n} g (\frac{n}{d})<br>\end{align}<br>$$</p>
<p>$$<br>\sum_{d|n} μ(d) f(\frac{n}{d}) &#x3D; \sum_{d|n} μ(d) \sum_{d_1|\frac{n}{d}} g(d_1)<br>$$</p>
<p>$$<br>\begin{align}<br>\sum_{d|n} \sum_{d_1|\frac{n}{d}} μ(d) g (d_1) &amp;&#x3D; \sum_{d_1|n} g(d_1) \sum_{d|\frac{n}{d_1}} μ(d) \\<br>&amp;&#x3D; g(n)<br>\end{align}<br>$$</p>
<p>考虑到<br>$$<br>\sum_{d|\frac{n}{d_1}} μ(d) &#x3D;<br>\begin{cases}<br>1 &amp; d_1 &#x3D; n \\<br>0 &amp; d_1 &lt; n<br>\end{cases}<br>$$<br>因此<br>$$<br>\begin{align}<br>g(n) &amp;&#x3D; \sum_{d|n} μ(d) f(\frac{n}{d}) \\<br>&amp;&#x3D; \sum_{d|n} μ(\frac{n}{d}) f(d)<br>\end{align}<br>$$</p>
<h4 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h4><p>$$<br>\begin{align}<br>g(n) &amp;&#x3D; \sum_{d|n} μ(d) f(\frac{n}{d}) \\<br>&amp;&#x3D; \sum_{d|n} μ(\frac{n}{d}) f(d)<br>\end{align}<br>$$</p>
<p>$$<br>\begin{align}<br>\sum_{d|n} g(d) &amp;&#x3D; \sum_{d|n}g(\frac{n}{d}) \\<br>&amp;&#x3D; \sum_{d|n} \sum_{d_1|\frac{n}{d}} μ(\frac{n}{d d_1})f(d_1) \\<br>&amp;&#x3D; \sum_{d d_1|n} μ(\frac{n}{d d_1}) f(d_1) \\<br>&amp;&#x3D; \sum_{d_1|n} f(d_1) \sum_{d|\frac{n}{d}} μ(\frac{n}{d d_1}) \\<br>&amp;&#x3D; f(n)<br>\end{align}<br>$$</p>
<p>考虑到</p>
<p>$$<br>\begin{align}<br>\sum_{d|\frac{n}{d_1}} μ(\frac{n}{d d_1}) &amp;&#x3D; \sum_{d|\frac{n}{d_1}} μ(d) \\<br>&amp;&#x3D; \begin{cases} 1 &amp; d_1 &#x3D; n \\ 0 &amp; d_1 &lt; n \end{cases}<br>\end{align}<br>$$</p>
<p>因此</p>
<p>$$<br>\begin{align}<br>f(n) &amp;&#x3D; \sum_{d|n} g(d) \\<br>&amp;&#x3D; \sum_{d|n} g(\frac{n}{d})<br>\end{align}<br>$$</p>

</details>

<h2 id="求莫比乌斯函数的值"><a href="#求莫比乌斯函数的值" class="headerlink" title="求莫比乌斯函数的值"></a>求莫比乌斯函数的值</h2><h3 id="单点求值-1"><a href="#单点求值-1" class="headerlink" title="单点求值"></a>单点求值</h3><p>自己算。</p>
<h3 id="区间筛法"><a href="#区间筛法" class="headerlink" title="区间筛法"></a>区间筛法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getMu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!flg[i]) p[++tot] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            flg[i * p[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % p[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                mu[i * p[j]] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mu[i * p[j]] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="莫比乌斯变换"><a href="#莫比乌斯变换" class="headerlink" title="莫比乌斯变换"></a>莫比乌斯变换</h2><p>设 $f(n)$，$g(n)$ 为两个数论函数。<br>如果有 $f(n) &#x3D; \sum_{d|n} g(d)$ 那么有：</p>
<p>形式1： $g(n) &#x3D; \sum_{d|n} μ(d) f(\frac{n}{d})$。</p>
<p>这种形式下，函数 $f(n)$ 被称为函数 $g(n)$ 的莫比乌斯变换，反之则称之为其的莫比乌斯逆变换（反演）。</p>
<p>形式2： $g(n) &#x3D; \sum_{d|n} μ(\frac{d}{n}) f(d)$。</p>
<p>据说这种形式更常考一点。</p>
<h3 id="证明-4"><a href="#证明-4" class="headerlink" title="证明"></a>证明</h3><ul>
<li>方法一：对原式做数论变换。</li>
</ul>
<p>$$<br>\begin{align}<br>&amp; \sum_{d\mid n}μ(d)f(\frac{n}{d}) \\<br>&#x3D;&amp; \sum_{d\mid n}μ(d)\sum_{k\mid \frac{n}{d}}g(k) \\<br>&#x3D;&amp; \sum_{k\mid n}g(k)\sum_{d\mid \frac{n}{k}}μ(d) \\<br>&#x3D;&amp; g(n)<br>\end{align}<br>$$</p>
<p>用 $\displaystyle\sum_{d\mid n}g(d)$ 来替换 $f(\dfrac{n}{d})$，再变换求和顺序。最后一步变换的依据：$\displaystyle\sum_{d\mid n}μ(d)&#x3D;[n&#x3D;1]$，因此在 $\dfrac{n}{k}&#x3D;1$ 时第二个和式的值才为 $1$。此时 $n&#x3D;k$，故原式等价于 $\displaystyle\sum_{k\mid n}[n&#x3D;k]\cdot g(k)&#x3D;g(n)$</p>
<ul>
<li>方法二：运用卷积。</li>
</ul>
<p>原问题为：已知 $f&#x3D;g * 1$，证明 $g&#x3D;f * μ$</p>
<p>易知如下转化：$f * μ&#x3D;g * 1 * μ\implies f * μ&#x3D;g$（其中 $1 * μ&#x3D;ε$）。</p>
<p>对于第二种形式：</p>
<p>类似上面的方法一，我们考虑逆推这个式子。</p>
<p>$$<br>\begin{align}<br>&amp; \sum_{n|d}{μ(\frac{d}{n})f(d)} \\<br>&#x3D;&amp; \sum_{k&#x3D;1}^{+\infty}{μ(k)f(kn)} \\<br>&#x3D;&amp; \sum_{k&#x3D;1}^{+\infty}{μ(k)\sum_{kn|d}{g(d)}} \\<br>&#x3D;&amp; \sum_{n|d}{g(d)\sum_{k|\frac{d}{n}}{μ(k)}} \\<br>&#x3D;&amp; \sum_{n|d}{g(d)ε(\frac{d}{n})} \\<br>&#x3D;&amp; g(n)<br>\end{align}<br>$$</p>
<p>我们把 $d$ 表示为 $kn$ 的形式，然后把 $f$ 的原定义代入式子。</p>
<p>发现枚举 $k$ 再枚举 $kn$ 的倍数可以转换为直接枚举 $n$ 的倍数再求出 $k$，发现后面那一块其实就是 $ε$, 整个式子只有在 $d&#x3D;n$ 的时候才能取到值。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>《混凝土数学》<br>OI Wiki</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>傅里叶变换</title>
    <url>/maths/fourier-transform/</url>
    <content><![CDATA[<p>简介： 傅里叶变换和FFT、复数、单位根<br>（20220321重修）</p>
<span id="more"></span>

<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>今天AJ给大家留了一个作业：</p>
<p>多项式相乘。</p>
<p>$$<br>\begin{gather}<br>f(x) &#x3D; (x^2 + 3x - 1) \\<br>g(x) &#x3D; (2x^2 + x - 5) \\<br>f(x) \times g(x) &#x3D; ?<br>\end{gather}<br>$$</p>
<p>大家都很认真、很用心地做了出来。</p>
<p>$$<br>\begin{align}<br>f(x) \times g(x) &amp; &#x3D; (x^2 + 3x - 1) (2x^2 + x - 5) \\<br>&amp; &#x3D; x^2 \times g(x) + 3x \times g(x) - g(x) \\<br>&amp; &#x3D; (2x^4 + x^3 - 5x^2) + (6x^3 + 3x^2 - 15x) + (2x^2 + x - 5) \\<br>&amp; &#x3D; 2x^4 + x^3 - 5x^2 + 6x^3 + 3x^2 - 15x + 2x^2 + x - 5 \\<br>&amp; &#x3D; 2x^4 + 7x^3 - 4x^2 - 16x + 5<br>\end{align}<br>$$</p>
<p>看起来很复杂，对吗？</p>
<p>但是，精通数学的王哥在纸上写写画画几十秒钟之后，得出来的答案跟正确答案也是一样的。<br>惊呆了的tüe问王哥他用的是什么办法。<br>王哥回答：“ <strong>傅里叶变换</strong> 。”</p>
<h1 id="多项式乘法的本质"><a href="#多项式乘法的本质" class="headerlink" title="多项式乘法的本质"></a>多项式乘法的本质</h1><p>王哥说：“我们知道，所有多项式都拥有如下的形式：</p>
<p>$$<br>f(x) &#x3D; a_0 x^n + a_1 x^{n-1} + a_2 x^{n-2} + \cdots + a_{n-2} x^2 + a_{n-1} x +a_n<br>$$</p>
<p>我们也可以把一个多项式写成这样的形式：</p>
<p>$$<br>f(x) &#x3D; \sum_{i&#x3D;0}^n a_i x^{n-i}<br>$$</p>
<p>而两个多项式相乘 $f(x) \times g(x) &#x3D; h(x)$ 的时候，相乘的结果的第 $k$ 项系数 $h_{k-1}$ 等于所有 $f_{i}$ 与 $g_{k-i}$ 乘积之和。<br>所以，</p>
<p>$$<br>h_k &#x3D; \sum_{i&#x3D;0}^{k-1} f_i \times g_{k-1-i}<br>$$</p>
<p>这样的方法算出的结果是与两个多项式的次数相关的。”</p>
<p>或者（对于OIer）通俗一点来说，假设两个多项式的次数分别为 $n$ 和 $m$，那么这个算法的时间复杂度是 $O(nm)$ 的。</p>
<p>给个<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM4MDM=">模板题</span>的44分代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> X = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">char</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch &lt; <span class="number">48</span>) || (ch &gt; <span class="number">57</span>))ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>((ch &gt;= <span class="number">48</span>) &amp;&amp; (ch &lt;= <span class="number">57</span>))X = X * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">ll f[N], g[N], s[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mul</span><span class="params">(ll *s, ll *f, ll *g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; n + m - <span class="number">1</span>; k++)</span><br><span class="line">        <span class="built_in">f_or</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">            s[k] += f[i] * g[k - i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m); n++; m++;</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)f[i] = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)g[i] = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">mul</span>(s, f, g);</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n + m - <span class="number">1</span>; i++)<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, s[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$\color[rgb]{1,1,0.0625}{φ}$ （只保证44分）</p>
<h1 id="DFT"><a href="#DFT" class="headerlink" title="DFT"></a>DFT</h1><h2 id="多项式的点值表达"><a href="#多项式的点值表达" class="headerlink" title="多项式的点值表达"></a>多项式的点值表达</h2><p>为了简便表达，我们使用 $f_k$ 来代表 多项式 $f(x)$ 的第 $k+1$ 项系数。</p>
<p>今天AJ的作业是昨天的延伸：<br>给定一个 $n$ 次多项式的 $n+1$ 个点值，要求我们求出这个多项式。<br>（还让武嘉给了样例，而武嘉给的样例是1,3,5,7,9,114514）<br>全班只有王哥和某盒子做了出来。广告：<span class="exturl" data-url="aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vNDcwOTUyMzc5">CoolHezi</span><br>他们用的是什么方法呢？</p>
<p><strong>拉格朗日插值</strong>。</p>
<p>想要了解拉格朗日插值，可以参考我的这个博客：<a href="/maths/lagrange-interpolation">拉格朗日插值</a></p>
<p>现在我们只需要知道，给定了 $n+1$ 个任意点值，可以求出来经过这几个点的一个 $n$ 次多项式。<br>如果两个多项式 $f(x)$ 和 $g(x)$ 在相同纵坐标上取点（设其分别为 $f(x)$  与 $g(x)$） 后相乘所得的结果（$f(x) \times g(x)$）等于两函数相乘后对应纵坐标处的点值（$h(x)$）。</p>
<p>举个栗子：</p>
<p>$$<br>\begin{align}<br>f(x) &amp;&#x3D; x^2 + 3x - 1 \\<br>g(x) &amp;&#x3D; 2x^2 + x -5<br>\end{align}<br>$$</p>
<p>我们分别取 $x \in [-1,1]$ 内的整数点所对应的点值：</p>
<img src="https://i.loli.net/2021/10/17/idm29GlQr7asBTc.png" alt="傅里叶1.png" width="60%" />

<p>我们可以清楚的看到：</p>
<p>$$<br>\begin{align}<br>f(-1) &amp; &#x3D; -3 &amp; f(0) &amp; &#x3D; -1 &amp; f(1) &amp; &#x3D; 3 \\<br>g(-1) &amp; &#x3D; -4 &amp; g(0) &amp; &#x3D; -5 &amp; g(1) &amp; &#x3D; -2<br>\end{align}<br>$$</p>
<p>相乘之后可得：</p>
<p>$$<br>\begin{align}<br>h(-1) &amp; &#x3D; 12 &amp; h(0) &amp; &#x3D; 5 &amp; h(1) &amp; &#x3D; -6<br>\end{align}<br>$$</p>
<p>检验一下：</p>
<img src="https://i.loli.net/2021/10/17/AvSKMrem6QlEtIU.png" alt="傅里叶2.png" width="60%" />

<p>但想要求出 $h(x)$ ，我们至少需要4+1&#x3D;5个点值。</p>
<p>怎么办？</p>
<p>多找几个啊。</p>
<p>于是我们就可以求出最终的多项式。</p>
<p>这就是FT的算法流程。<br>“把<strong>系数</strong>表达转换为<strong>点值</strong>表达”的算法叫做<strong>DFT</strong><br>“把<strong>点值</strong>表达转换为<strong>系数</strong>表达”的算法叫做<strong>IDFT</strong>(DFT的逆运算)</p>
<p>P.S:</p>
<ul>
<li>从一个多项式的系数表达确定其点值表达的过程称为<strong>求值</strong>(毕竟求点值表达的过程就是取了 n 个 x 然后扔进了多项式求了 n 个值出来)；</li>
<li>而求值运算的逆运算(也就是从一个多项式的点值表达确定其系数表达)被称为<strong>插值</strong>。</li>
</ul>
<p>F(Fourier)和T(Transform)有了，那F(Fast)呢？</p>
<h1 id="单位根与复数"><a href="#单位根与复数" class="headerlink" title="单位根与复数"></a>单位根与复数</h1><p>但是最终我们并没有觉得有什么可以加以利用的良好性质啊。<br>我们这些蒟蒻只会利用一些有理数和一些简单的无理数来进行一些简单的计算，再难一点的就不会了。</p>
<p><del>（而且这个多项式的次数和系数稍微一大就bz了）</del><br>准确来说，我们最终还是需要 $n+m$ 个点的求值与相乘，最终得到的时间复杂度与 $O(mn)$ 实际上差不太多，而且很可能在某些情况下更劣一些。</p>
<p>但是，法国数学家 <strong>傅里叶</strong> 横空出世，找了一些毒瘤数据代入，结果发现可以分治而使时间复杂度降低。<br>而他代入的正是单位根 $ω_{n+1}^{0 \to n}$ 。</p>
<h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><p>首先我们需要介绍复数。</p>
<p>已经会了的可以<a href="/maths/fourier-transform/#%E5%8D%95%E4%BD%8D%E6%A0%B9">跳过</a>。</p>
<p>（p.s.:下面我们使用的所有 $\sqrt{\quad}$ 标识都指的是平方根，算术平方根已使用+-来标记。）</p>
<h3 id="复数的概念"><a href="#复数的概念" class="headerlink" title="复数的概念"></a>复数的概念</h3><h4 id="虚数"><a href="#虚数" class="headerlink" title="虚数"></a>虚数</h4><p>我们所学的数轴是一条直线。</p>
<p><img src="https://i.loli.net/2021/10/18/ImBF56rhAYUQ2cL.png" alt="傅里叶3.png"></p>
<p>每一个有理数都能完美地与数轴上的某一个点一一对应。</p>
<p><img src="https://i.loli.net/2021/10/18/GBM34h7yDVjgzSm.png" alt="傅里叶4.png"></p>
<p>$+\sqrt2$ 、 $+\sqrt3$ 等无理数也能很好地对应在数轴上。</p>
<p><img src="https://i.loli.net/2021/10/18/pAs2ObDQ3Mf7Bv1.png" alt="傅里叶5.png"></p>
<p>但是人们说：“那 $+\sqrt{-1}$ 怎么办啊？”</p>
<p>我们找不到与 $+\sqrt{-1}$ 相对应的点。<br>而 $+\sqrt{-1}$ 又的的确确存在。</p>
<p>怎么办？</p>
<p>于是人们发明了一个概念：虚数。<br>而 $+\sqrt{-1}$ 在虚数里面叫做<strong>虚数单位</strong>，用 $i$ 表示。<br>所以，$i^2&#x3D;-1$ 。</p>
<p>但是又有人会问：“那 $-\sqrt{-1}$ 又怎么办？”</p>
<p>用 $-i$ 呗。</p>
<p>但是在数轴上，人们仍然找不到对应虚数的点。数轴上的每一个点都对应了一个实数，没有办法找到任何一个新的点来对应虚数了。<br>所以，人们就在数轴的 0 处添加了一条新的数轴，来代表虚数。这条新的数轴垂直于代表实数的数轴，单位是 $i$ 。</p>
<h3 id="复数及其运算"><a href="#复数及其运算" class="headerlink" title="复数及其运算"></a>复数及其运算</h3><p>复数形似 $a+bi$ 。<br>其中 $a$ 称为实部( $\Re$ )， $b$ 称为虚部( $\Im $ )。<br>复数也有加减乘除等运算。<br>复数加减时实部虚部分别加减：</p>
<p>$$<br>(a+bi) \pm (c+di) &#x3D; (a \pm c) + (b \pm d)i<br>$$</p>
<p>复数相乘时实部虚部分别相乘：</p>
<p>$$<br>\begin{align}<br>(a+bi) \times (c+di) &amp; &#x3D; a \times (c+di) + bi \times (c+di) \\<br>&amp; &#x3D; ac + adi + bci - bd \\<br>&amp; &#x3D; (ac - bd) + (ad + bc)i<br>\end{align}<br>$$</p>
<p>复数相除时就有点难办了。<br>直觉告诉我们 $\dfrac{a+bi}{c+di}$ 不会好化简。</p>
<p>这里需要引入一个概念：复数的共轭。<br>$a+bi$ 的共轭是 $a-bi$ 。<br>一个复数乘以其共轭最终得到的是一个实数。（ $(a+bi) \times (a-bi) &#x3D; a^2 + b^2$ ）</p>
<p>所以当我们化简 $\dfrac{a+bi}{c+di}$ 的时候，我们只需要上下同乘分母的共轭就可以了：<br>$$<br>\begin{align}<br>\frac{a+bi}{c+di} &amp; &#x3D; \frac{(a+bi)(c-di)}{(c+di)(c-di)} \\<br>&amp; &#x3D; \frac{(ac+bd) + (bc-ad)i}{c^2+d^2} \\<br>&amp; &#x3D; \frac{ac+bd}{c^2+d^2} + \frac{bc-ad}{c^2+d^2} i<br>\end{align}<br>$$</p>
<h3 id="复数在数轴上的表示"><a href="#复数在数轴上的表示" class="headerlink" title="复数在数轴上的表示"></a>复数在数轴上的表示</h3><p>那我们怎么在数轴上表示复数呢？</p>
<p>之前我们说过了，虚数单位 $i$ 找不到一个合适的与其对应的数轴上的点。</p>
<p>那我们到底怎么办呢？</p>
<p>于是有人加了一条垂直于原本数轴的轴，用来表示复数的虚部。</p>
<p>就像这样：</p>
<img src="https://i.loli.net/2021/10/18/L9kKUvWyAhiconp.png" alt="傅里叶6.png" width="60%" />

<p>于是我们举几个例子：</p>
<p><img src="https://i.loli.net/2021/10/19/cgUE58lZkOQJ17G.png" alt="傅里叶7.png"></p>
<p>此时我们关注一下两个虚数的积：</p>
<img src="https://i.loli.net/2021/10/19/RlLhAeVbzxXkHQf.png" alt="傅里叶8.png" width="60%" />

<p>如果我们连接表示复数的点和原点，我们可以看见这三条线的长度分别是 $\sqrt{3^2+4^2}&#x3D;\sqrt{25}&#x3D;5$ ，$\sqrt{5^2+2^2}&#x3D;\sqrt{29}$ 与 $\sqrt{14^2+23^2}&#x3D;\sqrt{725} &#x3D;5\sqrt{29}$ 。<br>凭借大家做几何题的直觉，我们可以看到， $5+2i$ 与 $x$ 轴的夹角与 $3+4i$ 与 $x$ 轴的夹角之和等于 $14+23i$ 与 $x$ 轴的夹角。<br>而且，通过刚才的例子，我们也可以看见 $5+2i$ 与原点的连线的长度与 $3+4i$ 与原点的连线的长度之积等于 $14+23i$ 与原点连线的长度。<br>数学家们为了简便地表示这些东西，发明了两个名词：<strong>幅角</strong>和<strong>模长</strong>。<br>所以，我们可以说，<strong>两个复数相乘时，幅角相加，模长相乘。</strong></p>
<p>证明：</p>
<p>我们设三个点分别为 $A$  ，$B$ 与 $C$ 。</p>
<img src="https://i.loli.net/2021/10/19/bVRTm4gy9dDhWnE.png" alt="傅里叶9.png" width="40%" />

<p>我们分别连接 $AO$ ， $BO$ 与 $CO$ 。</p>
<img src="https://i.loli.net/2021/10/19/TpDc6xyqOth5r8l.png" alt="傅里叶10.png" width="40%" />

<p>因为 $C$ 点代表的是 $(ac-bd)+(ad+bc)i$ ，所以 $AO$ ， $BO$ 与 $CO$ 的长度分别是：</p>
<p>$$<br>\begin{align}<br>AO &amp;&#x3D; \sqrt{a^2 + b^2} \\<br>BO &amp;&#x3D; \sqrt{c^2 + d^2} \\<br>CO &amp;&#x3D; \sqrt{(ac - bd)^2 + (ad+bc)^2}<br>\end{align}<br>$$</p>
<p>我们化简一下 $CO$ 的表达式，可得：</p>
<p>$$<br>\begin{align}<br>CO &amp; &#x3D; \sqrt{(ac-bd)^2+(ad+bc)^2} \\<br>&amp; &#x3D; \sqrt{a^2 c^2 - 2abcd + b^2 d^2 + a^2 d^2 + 2abcd + b^2 c^2} \\<br>&amp; &#x3D; \sqrt{a^2 (c^2 + d^2) + b^2 (c^2 + d^2)} \\<br>&amp; &#x3D; \sqrt{(a^2 + b^2) (c^2 + d^2)} \\<br>&amp; &#x3D; \sqrt{a^2 + b^2} \times \sqrt{c^2 + d^2} \\<br>&amp; &#x3D; AO \times BO<br>\end{align}<br>$$</p>
<p>我们可以得出， $CO&#x3D;AO \times BO$ 这一结论。</p>
<p>我们再连接 $BC$ 与 $AD$ ，$D$ 点代表 $1+0i$ 。</p>
<img src="https://i.loli.net/2021/10/19/81gGbRmnowh5IpK.png" alt="傅里叶11.png" width="40%" />

<p>凭借你做几何题的直觉，你应该知道 $\triangle AOD$ 与 $\triangle COB$ 看上去是相似的。</p>
<p>没错，他们就是相似的。</p>
<p>证明：</p>
<p>我们先算出来 $AD$ 和 $BC$ 的模长：</p>
<p>$$<br>\begin{align}<br>AD &amp; &#x3D; \sqrt{(a-1)^2 + b^2} \\<br>BC &amp; &#x3D; \sqrt{(ac-bd-c)^2 + (ad+bc-d)^2} \\<br>&amp; &#x3D; \sqrt{[(a-1)c-bd]^2 +[(a-1)d + bc]^2} \\<br>&amp; &#x3D; \sqrt{(a-1)^2 c^2 - 2(a-1)bcd + b^2 d^2 + (a-1)^2 d^2 + 2(a-1)bcd + b^2 c^2} \\<br>&amp; &#x3D; \sqrt{(a-1)^2 (c^2 + d^2) + b^2 (c^2 + d^2)} \\<br>&amp; &#x3D; \sqrt{[(a-1)^2 + b^2] (c^2 + d^2)} \\<br>&amp; &#x3D; \sqrt{(a-1)^2 + b^2} \times \sqrt{c^2 + d^2} \\<br>&amp; &#x3D; AD \times BO<br>\end{align}<br>$$</p>
<p>接下来我们证明两三角形相似：</p>
<p>$$<br>\begin{gather}<br>\because<br>CO &#x3D; AO \times BO , DO &#x3D; 1 \\<br>\therefore \frac{CO}{AO} &#x3D; \frac{BO}{DO} \\<br>\because BC &#x3D; AD \times BO\\<br>\therefore \frac{BC}{AD} &#x3D; BO \\<br>\therefore \frac{CO}{AO} &#x3D; \frac{BO}{DO} &#x3D; \frac{BC}{AD} \\<br>\therefore \triangle COB \sim \triangle AOD \\<br>\therefore \angle DOA &#x3D; \angle BOC \\<br>\because \angle DOC &#x3D; \angle DOB + \angle BOC \\<br>\therefore \angle DOC &#x3D; \angle DOB + \angle DOA<br>\end{gather}<br>$$</p>
<p>证毕。</p>
<h2 id="单位根"><a href="#单位根" class="headerlink" title="单位根"></a>单位根</h2><p>现在我们来介绍单位根。</p>
<p>单位根的意义是 $n$ 次方为 1 的复数，也就是 $x^n&#x3D;1$ 的复数解。</p>
<p>如果你学过三角函数的话你应该十分清楚什么是单位圆。<br>而单位圆可以帮我们更好地理解什么是单位根和单位根为什么能够代入之后能实现分治。</p>
<p>我们先画出一个单位圆：</p>
<img src="https://i.loli.net/2021/10/20/Eg1hOysmtHIK7YZ.png" alt="傅里叶12.png" width="60%" />

<p>我们知道， $1^n&#x3D;1$ ，所以单位根的其中一个一定是 $1$ 。</p>
<p>我们连接 $1$ 和 $0$ 。</p>
<img src="https://i.loli.net/2021/10/20/ewkq5Hsl2Xh8iDn.png" alt="傅里叶13.png" width="60%" />

<p>我们在这里举一个 $n&#x3D;4$ 的栗子来帮助我们理解单位根。</p>
<p>首先，我们知道， $(\pm i)^2 &#x3D; -1$ ，而 $-1^2&#x3D;1$ ，<br>所以 $i$ 和 $-i$ 也是 $n&#x3D;4$ 时的两个单位根。<br>当然，因为 $(-1)^2&#x3D;1$ ，所以我们不能丢下-1。</p>
<img src="https://i.loli.net/2021/10/20/ZgXGK4ioqftFAHa.png" alt="傅里叶14.png" width="60%" />

<p>至此，我们就找齐了 $n&#x3D;4$ 时的所有单位根。<br>我们记单位根分别为 $ω^0_4 , ω^1_4 , ω^2_4 , ω^3_4$ 。</p>
<p>但哪个对应哪个呢？</p>
<img src="https://i.loli.net/2021/10/20/pRgxdBbhqrAvweP.png" alt="傅里叶15.png" width="60%" />

<p>当我们观察图像的时候，我们可以发现这四个点与原点的连线可以平分这一个单位圆。<br>每相邻两条线之间的夹角都是 $90^{\circ}$ 。</p>
<p>当我们推广到 $n&#x3D;8$ 的时候。我们可以另外得到 $\frac{1}{\sqrt2}+\frac{1}{\sqrt2}i , \frac{1}{\sqrt2}-\frac{1}{\sqrt2}i , -\frac{1}{\sqrt2}+\frac{1}{\sqrt2}i , -\frac{1}{\sqrt2}-\frac{1}{\sqrt2}i$ 四个单位根。</p>
<p>我们把他们表示在复平面上之后会是这样一个情况：</p>
<img src="https://i.loli.net/2021/10/20/jXxYvVbk6ITR5Fc.png" alt="傅里叶16.png" width="60%" />

<p>我们会发现，新增的这四个单位根所对应的点也在圆上，且所有的这几个点与圆心\原点的连线平分这个单位圆为8份。</p>
<p>所以我们可以这样理解，所有的 $ω_n^{0 \to n-1}$ 与原点的连线可以平分单位圆为 $n$ 份，且每相邻两条线之间的夹角都是 $\frac{2π}{n}$ （即 $\frac{360}{n}^{\circ}$ ）</p>
<p>这样就好编号了：从 $1$ 开始，逆时针编号。</p>
<p>举个栗子：</p>
<p>$ω_8^{0 \to 7}$ 的值分别为 $1 , \frac{1}{\sqrt2} + \frac{1}{\sqrt2}i , i , -\frac{1}{\sqrt2} + \frac{1}{\sqrt2}i , -1 , -\frac{1}{\sqrt2} - \frac{1}{\sqrt2}i , -i , \frac{1}{\sqrt2} - \frac{1}{\sqrt2}$ 。</p>
<p>p.s.:虽然我们只承认 $ω_n^k$ 中的 $0\leq k &lt; n$ 的情况，但是 $k\geq n$ 和 $k&lt;0$ 的情况还是有的，这就跟 $\geq 2π$ （即 $360^{\circ}$ ）和 $&lt;0$ （即 $0^{\circ}$ ）的角一样。</p>
<h3 id="单位根的性质"><a href="#单位根的性质" class="headerlink" title="单位根的性质"></a>单位根的性质</h3><p>单位根有很多性质，这里会列举几个。其中，最后一个是最重要的，也是我们选择代入单位根的原因。</p>
<ol>
<li>$ω^a_n + ω^b_n &#x3D; ω_n^{a+b}$</li>
</ol>
<p>  可以从把单位根类比成切蛋糕的方法去理解。</p>
<ol start="2">
<li>$(ω^1_n)^k &#x3D; ω^k_n$</li>
</ol>
<p>  可以理解成把 $k$ 块蛋糕拼起来。</p>
<ol start="3">
<li>$ω_{λn}^{λk} &#x3D; ω_n^k$</li>
</ol>
<p>  同可以理解成把一块蛋糕平均切成 $\lambda$ 块。</p>
<ol start="4">
<li>$ω^k_{2n} &#x3D; - ω_{2n}^{(k+n)\bmod{n}}$</li>
</ol>
<p>  这是最重要的一条。<br>  这条的证明可以在复平面上清晰的看出。</p>
<img src="https://i.loli.net/2021/10/20/Huv9WglE7MbLTAj.png" alt="傅里叶17.png" width="60%" />

<p>这一条性质是我们选择代入单位根的原因。但为什么呢？</p>
<h1 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h1><h2 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h2><p>傅里叶把多项式 $f(x)$ 按照次数分成奇偶两部分。（忘了的向前翻再看一遍）</p>
<p>即，<br>$$<br>\begin{align}<br>f(x) &amp;&#x3D; \sum^n_{i&#x3D;0} a_i x^{n-i} \\<br>&amp;&#x3D; \sum_{i&#x3D;0}^{\frac{n}{2}} a_i x^{n-2i} + \sum_{i&#x3D;0}^{\frac{n}{2}} a_{i+1} x^{n-2i-1}<br>\end{align}<br>$$<br>我们称 $\displaystyle \sum_{i&#x3D;0}^{\frac{n}{2}} a_{i+1} x^{n-2i-1}$ 为 $f_o(x)$ ， 称 $\displaystyle \sum_{i&#x3D;0}^{\frac{n}{2}} a_i x^{n-2i}$ 为 $f_e(x)$ 。</p>
<p>此时我们把式子化简一下，可得<br>$$<br>f(x) &#x3D; f_e(x^2) + x f_o(x^2)<br>$$</p>
<p>所以，我们想要计算 $f(x)$ 的话，只需要计算 $f_e(x)$ 与 $f_o(x)$ 即可。<br>当然，我们计算 $f_e(x)$ 与 $f_o(x)$ 的时候，也像刚才我们分解 $f(x)$ 一样，把它们分解掉。<br>最终我们可以达到分治的效果。</p>
<p>而我们不可能对于所有的点都进行实际的代入求值运算，那样会爆精度。</p>
<h2 id="代入求值"><a href="#代入求值" class="headerlink" title="代入求值"></a>代入求值</h2><p>我们刚刚介绍了单位根的性质，所以我们可以代入单位根来简化运算。</p>
<p>怎么简化？</p>
<p>我们尝试过代入几个整数来求值，但是那样子复杂度会爆掉。</p>
<p>然后我们就想到了代入相反数。<br>这样的话，我们只需要求出一半的值，就可以得到另外的所有值了。</p>
<p>我们还可以再快，即进行分治。</p>
<p>但是，分治要求我们每一次分治代入的值都为相反数，这要求了一对相反数的平方仍为相反数。<br>于是我们就找到了单位根。</p>
<p>我们代入 $ω^k_n$ （$0 \leq k &lt; \dfrac{n}{2}$），可得：<br>$$<br>\begin{align}<br>f(ω^k_n) &amp;&#x3D; f_e((ω^k_n)^2) + ω^k_n f_o((ω^k_n)^2) \\<br>&amp;&#x3D; f_e (ω^k_{\frac{n}{2}}) + ω^k_n f_o(ω^k_{\frac{n}{2}})<br>\end{align}<br>$$</p>
<p>此时我们对这个式子进行稍稍的变动，可得：<br>$$<br>\begin{align}<br>f(ω^k_n) &amp;&#x3D; f_e((ω^k_n)^2) + ω^k_n f_o((ω^k_n)^2) \\<br>f(ω_n^{k+\frac{n}{2}}) &amp;&#x3D; f_e((ω_n^{k+\frac{n}{2}})^2) + ω_n^{k+\frac{n}{2}} f_o((ω_n^{k+\frac{n}{2}})^2) \\<br>&amp;&#x3D; f_e (ω_n^{2k+n}) + ω_n^{k+\frac{n}{2}} f_o(ω_n^{2k+n}) \\<br>&amp;&#x3D; f_e (ω_n^{2k}) + ω_n^{k+\frac{n}{2}} f_o(ω_n^{2k}) \\<br>&amp;&#x3D; f_e (ω_{\frac{n}{2}}^k) + ω_n^{k+\frac{n}{2}} f_o(ω_{\frac{n}{2}}^k) \\<br>&amp;&#x3D; f_e (ω_{\frac{n}{2}}^k) - ω^k_n f_o(ω_{\frac{n}{2}}^k)<br>\end{align}<br>$$</p>
<p>通过 $\begin{cases} f(ω_n^k)&#x3D;f_e(ω_{\frac{n}{2}}^k)+ω^k_nf_o(ω_{\frac{n}{2}}^k) \\ f(ω_n^{k+\frac{n}{2}})&#x3D;f_e (ω_{\frac{n}{2}}^k) - ω_n^k f_o(ω_{\frac{n}{2}}^k)\end{cases}$ 这两个式子，我们理论上是可以求出所有点值的。因为 $f_e(x)$ 与 $f_o(x)$ 理论上只有 $f(x)$ 次数的一半，只能得到完整地求出 $f(x)$ 所需要的点值的一半。而两个式子分别能求出一半且互不重复，合起来就是我们所需要的所有点值了。</p>
<p>但是当我们遇到某一层的 $f(x)$ 是奇数次的时候，我们应该怎么办呢？</p>
<p>答案是：自己补。</p>
<p>我们可以手动为这个多项式补成2的整数次幂次。当然，是在不影响多项式整体的值得前提下，所以我们选择补0，即我们补上去的所有的 $a_k$ 都是0。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="DFT-1"><a href="#DFT-1" class="headerlink" title="DFT"></a>DFT</h2><h3 id="复数结构体"><a href="#复数结构体" class="headerlink" title="复数结构体"></a>复数结构体</h3><p>为了表示方便，我们使用结构体来表示复数。</p>
<p>我们同时重载一下运算符，以便做复数之间的四则运算。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> str;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Comp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Comp</span>(<span class="type">double</span> xx = <span class="number">0</span>, <span class="type">double</span> yy = <span class="number">0</span>) &#123; x = xx, y = yy; &#125;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    Comp <span class="keyword">operator</span> + (Comp <span class="type">const</span> &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Comp</span>(x + B.x, y + B.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Comp <span class="keyword">operator</span> - (Comp <span class="type">const</span> &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Comp</span>(x - B.x, y - B.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Comp <span class="keyword">operator</span> * (Comp <span class="type">const</span> &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Comp</span>(x * B.x - y * B.y, x * B.y + y * B.x);</span><br><span class="line">    &#125;</span><br><span class="line">    Comp <span class="keyword">operator</span> / (Comp <span class="type">const</span> &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> t = B.x * B.x + B.y * B.y;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Comp</span>((x * B.x + y * B.y) / t, (y * B.x - x * B.y) / t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a, b;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(Comp n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(n.x &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; n.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n.x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        cout &lt;&lt; n.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n.y &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n.x != <span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;+&#x27;</span>);</span><br><span class="line">        cout &lt;&lt; n.y;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n.x == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; n.y;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)<span class="built_in">putchar</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; a.x &gt;&gt; a.y &gt;&gt; b.x &gt;&gt; b.y;</span><br><span class="line">    Comp c;</span><br><span class="line">    c = a + b;</span><br><span class="line">    <span class="built_in">write</span>(a), <span class="built_in">putchar</span>(<span class="string">&#x27;+&#x27;</span>), <span class="built_in">write</span>(b), <span class="built_in">putchar</span>(<span class="string">&#x27;=&#x27;</span>), <span class="built_in">write</span>(c), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    c = a - b;</span><br><span class="line">    <span class="built_in">write</span>(a), <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), <span class="built_in">write</span>(b), <span class="built_in">putchar</span>(<span class="string">&#x27;=&#x27;</span>), <span class="built_in">write</span>(c), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    c = a * b;</span><br><span class="line">    <span class="built_in">write</span>(a), <span class="built_in">putchar</span>(<span class="string">&#x27;*&#x27;</span>), <span class="built_in">write</span>(b), <span class="built_in">putchar</span>(<span class="string">&#x27;=&#x27;</span>), <span class="built_in">write</span>(c), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    c = a / b;</span><br><span class="line">    <span class="built_in">write</span>(a), <span class="built_in">putchar</span>(<span class="string">&#x27;/&#x27;</span>), <span class="built_in">write</span>(b), <span class="built_in">putchar</span>(<span class="string">&#x27;=&#x27;</span>), <span class="built_in">write</span>(c), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$\color[rgb]{1,1,0.0625}{φ}$</p>
<h3 id="预处理单位根"><a href="#预处理单位根" class="headerlink" title="预处理单位根"></a>预处理单位根</h3><p>我们之前应该提到过什么是单位根。但是怎么快速求出我们需要用的所有单位根呢？<br>开根号的方法太慢了，打表又太难。<br>所以我们使用三角函数。<br>没学过三角函数的可以自己先学一下<del>（话说为什么你会先学傅里叶变换？）</del><br>我们首先求出 $ω^1_n$ 。</p>
<p>[anime here]</p>
<p>C++的三角函数采用的是弧度制。而刚才我们已经介绍过什么是弧度了。</p>
<p>所以， $ω^1_n$ 就等于 $\cos(\dfrac{2π}{n})+\sin(\dfrac{2π}{n})i$ 。</p>
<p>把得到的结果依次乘起来就是所有的单位根。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Maxn 1000500</span></span><br><span class="line"><span class="comment">//用这句话能得到得到精确的π</span></span><br><span class="line"><span class="comment">//但是实际上并没有自己手动打更精确</span></span><br><span class="line"><span class="comment">//比如说下一个代码就是我自己手打的</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> Pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CP</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CP</span>(<span class="type">double</span> xx = <span class="number">0</span>, <span class="type">double</span> yy = <span class="number">0</span>) &#123; x = xx, y = yy; &#125;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    CP <span class="keyword">operator</span> + (CP <span class="type">const</span> &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CP</span>(x + B.x, y + B.y);</span><br><span class="line">    &#125;</span><br><span class="line">    CP <span class="keyword">operator</span> - (CP <span class="type">const</span> &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CP</span>(x - B.x, y - B.y);</span><br><span class="line">    &#125;</span><br><span class="line">    CP <span class="keyword">operator</span> * (CP <span class="type">const</span> &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CP</span>(x * B.x - y * B.y, x * B.y + y * B.x);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//除法没用</span></span><br><span class="line">&#125;w[Maxn];</span><br><span class="line"><span class="comment">//w长得是不是很像ω?</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="function">CP <span class="title">sav</span><span class="params">(cos(<span class="number">2</span> * Pi / n), sin(<span class="number">2</span> * Pi / n))</span>, <span class="title">buf</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        w[i] = buf;</span><br><span class="line">        buf = buf * sav;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;w[%d][n]=(%.4lf,%.4lf)\n&quot;</span>, i, w[i].x, w[i].y);</span><br><span class="line">    <span class="comment">//由于精度问题会出现-0.0000的情况,将就看吧</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL2Jsb2cvY29tbWFuZC1ibG9jay9mZnQteHVlLXhpLWJpLWpp">$\blacktriangleright$</span></p>
<h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Maxn 1350000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> Pi = <span class="number">3.1415926535897932394626433832795</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CP</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CP</span>(<span class="type">double</span> xx = <span class="number">0</span>, <span class="type">double</span> yy = <span class="number">0</span>) &#123; x = xx, y = yy; &#125;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    CP <span class="keyword">operator</span> + (CP <span class="type">const</span> &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CP</span>(x + B.x, y + B.y);</span><br><span class="line">    &#125;</span><br><span class="line">    CP <span class="keyword">operator</span> - (CP <span class="type">const</span> &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CP</span>(x - B.x, y - B.y);</span><br><span class="line">    &#125;</span><br><span class="line">    CP <span class="keyword">operator</span> * (CP <span class="type">const</span> &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CP</span>(x * B.x - y * B.y, x * B.y + y * B.x);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//除法这里没用</span></span><br><span class="line">&#125;f[Maxn &lt;&lt; <span class="number">1</span>], sav[Maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dft</span><span class="params">(CP *f, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>)<span class="keyword">return</span>;<span class="comment">//边界</span></span><br><span class="line">    <span class="comment">//指针的使用比较巧妙 </span></span><br><span class="line">    CP *fl = f, *fr = f + len / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; len; k++)sav[k] = f[k];</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; len / <span class="number">2</span>; k++)<span class="comment">//分奇偶打乱</span></span><br><span class="line">    &#123;</span><br><span class="line">        fl[k] = sav[k &lt;&lt; <span class="number">1</span>]; fr[k] = sav[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dft</span>(fl, len / <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">dft</span>(fr, len / <span class="number">2</span>);<span class="comment">//处理子问题</span></span><br><span class="line">    <span class="comment">//由于每次使用的单位根次数不同(len次单位根),所以要重新求。</span></span><br><span class="line">    <span class="function">CP <span class="title">tG</span><span class="params">(cos(<span class="number">2</span> * Pi / len), sin(<span class="number">2</span> * Pi / len))</span>, <span class="title">buf</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; len / <span class="number">2</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//这里buf = (len次单位根的第k个) </span></span><br><span class="line">        sav[k] = fl[k] + buf * fr[k];<span class="comment">//(1)</span></span><br><span class="line">        sav[k + len / <span class="number">2</span>] = fl[k] - buf * fr[k];<span class="comment">//(2)</span></span><br><span class="line">        <span class="comment">//这两条语句具体见上面的式子</span></span><br><span class="line">        buf = buf * tG;<span class="comment">//得到下一个单位根。</span></span><br><span class="line">    &#125;<span class="built_in">f_or</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; len; k++)f[k] = sav[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;f[i].x);</span><br><span class="line">    <span class="comment">//一开始都是实数,虚部为0</span></span><br><span class="line">    <span class="built_in">f_or</span>(m = <span class="number">1</span>; m &lt; n; m &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//把长度补到2的幂,不必担心高次项的系数,因为默认为0</span></span><br><span class="line">    <span class="built_in">dft</span>(f, m);</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(%.4f,%.4f)\n&quot;</span>, f[i].x, f[i].y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL2Jsb2cvY29tbWFuZC1ibG9jay9mZnQteHVlLXhpLWJpLWpp">$\blacktriangleright$</span></p>
<p>好了，我相信你已经学会了利用DFT把多项式拆成一系列点值了。</p>
<p>但是我们怎么把这些点值还原为多项式呢？</p>
<h1 id="IDFT"><a href="#IDFT" class="headerlink" title="IDFT"></a>IDFT</h1><p>IDFT只需要改变DFT中的一点东西就可以得到。</p>
<p>因为我们代入的时候，得到了一个点值序列，我们在此称其为 $u$ ，而 $\displaystyle u[k]&#x3D;\sum_{i&#x3D;0}^{n-1} (ω^k_n)^i f(i)$ ，所以 $\displaystyle f(i) &#x3D; \frac{\sum\limits_{i&#x3D;0}^{n-1} (ω_n^{-k})^i u[i]}{n}$ 。</p>
<p>具体的证明过程目前请见<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL2Jsb2cvY29tbWFuZC1ibG9jay9mZnQteHVlLXhpLWJpLWpp">这里</span> 。这个证明涉及到了单位根反演，可以再写一篇博客，所以我等写到的时候再补全证明。</p>
<p>上代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1350010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> Pi = <span class="number">3.1415926535897932384626433832795</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CP</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CP</span>(<span class="type">double</span> xx = <span class="number">0</span>, <span class="type">double</span> yy = <span class="number">0</span>) &#123; x = xx, y = yy; &#125;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    CP <span class="keyword">operator</span> + (CP <span class="type">const</span> &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CP</span>(x + B.x, y + B.y);</span><br><span class="line">    &#125;</span><br><span class="line">    CP <span class="keyword">operator</span> - (CP <span class="type">const</span> &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CP</span>(x - B.x, y - B.y);</span><br><span class="line">    &#125;</span><br><span class="line">    CP <span class="keyword">operator</span> * (CP <span class="type">const</span> &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CP</span>(x * B.x - y * B.y, x * B.y + y * B.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;f[N &lt;&lt; <span class="number">1</span>], p[N &lt;&lt; <span class="number">1</span>], sav[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> tr[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(CP *f, <span class="type">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span>(i &lt; tr[i])<span class="built_in">swap</span>(f[i], f[tr[i]]);</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> p = <span class="number">2</span>; p &lt;= n; p &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> len = p &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="function">CP <span class="title">tG</span><span class="params">(cos(<span class="number">2</span> * Pi / p), sin(<span class="number">2</span> * Pi / p))</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!flag)tG.y *= <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">f_or</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k += p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">CP <span class="title">buf</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="built_in">f_or</span>(<span class="type">int</span> l = k; l &lt; k + len; l++)</span><br><span class="line">            &#123;</span><br><span class="line">                CP tt = buf * f[len + l];</span><br><span class="line">                f[len + l] = f[l] - tt;</span><br><span class="line">                f[l] = f[l] + tt;</span><br><span class="line">                buf = buf * tG;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;f[i].x);</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;p[i].x);</span><br><span class="line">    <span class="built_in">f_or</span>(m += n, n = <span class="number">1</span>; n &lt;= m; n &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        tr[i] = (tr[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) ? n &gt;&gt; <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">fft</span>(f, <span class="number">1</span>); <span class="built_in">fft</span>(p, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)f[i] = f[i] * p[i];</span><br><span class="line">    <span class="built_in">fft</span>(f, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">f_or</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ( <span class="type">int</span> )(f[i].x / n + <span class="number">0.49</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL2Jsb2cvY29tbWFuZC1ibG9jay9mZnQteHVlLXhpLWJpLWpp">$\blacktriangleright$</span></p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>拉格朗日插值</title>
    <url>/maths/lagrange-interpolation/</url>
    <content><![CDATA[<p>拉格朗日插值。</p>
<span id="more"></span>

<p>在学完函数以后，AJ想让我们求出一个函数，使得其带入自然数时生成的序列时给定的，并让武嘉给出了一个数列。</p>
<p>崇尚<ruby>野獣<rt>やじゅう</rt></ruby><ruby>先輩<rt>せんぱい</rt></ruby>的武嘉给出了这样的一个序列：</p>
<p>$$<br>1,3,5,7,9,114514<br>$$</p>
<p>光看前五项貌似可以构建出 $f(x)&#x3D;2x-1$ 来糊过去，但是第6项就不好办了。</p>
<p>王哥说：“这都不会，快用<strong>拉格朗日插值</strong>！”<br>(P.S.: 其实我们班里初三的时候真的有讲拉插)</p>
<hr>
<p>引入完毕。</p>
<p>拉格朗日插值法可以很快地将一系列的点值转化为一个经过所有给定点值的函数（或者称多项式）。</p>
<p>拉格朗日给出的方法是这样的：</p>
<p>首先我们给出两个二次多项式，分别称之为 $f(x)$ 与 $g(x)$。<br>两者的系数分别为 $a_f,b_f,c_f$ 与 $a_g,b_g,c_g$。</p>
<p>假设有一个函数 $h(x)$ ，它等于 $f(x)+g(x)$，那么</p>
<p>$$<br>\begin{align}<br>h(x) &amp;&#x3D; f(x)+g(x) \\<br>&amp;&#x3D; a_fx^2+b_fx+c_f + a_gx^2+b_gx+c_g \\<br>&amp;&#x3D; (a_f+a_g)x^2 + (b_f+b_g)x + (c_f+c_g)<br>\end{align}<br>$$</p>
<p>$h(x)$ 的每一项系数竟然是 $f(x)$ 与 $g(x)$ 该项系数之和。</p>
<p>我们再来看代入数值之后的结果。</p>
<p>我们不难看出，对于每一个 $x$ ，其对应的函数值 $f(x)$，$g(x)$ 与 $h(x)$ 满足 $h(x)&#x3D;f(x)+g(x)$。</p>
<p>然后拉格朗日就想，对于每一个点值，我们分别构造一个函数，使得其刚好经过当前点值代表的点，而其他点值处均为 $0$。<br>我们最后将所有的函数加起来，就得到了完美经过每个点值的函数了。</p>
<p>而每一个函数又怎么求呢？</p>
<p>我们先想个简单一点的，让这个函数在当前 $x$ 处为 $1$，其他 $x$ 处都为 $0$。</p>
<p>首先，我们为了表示这些点值且与自由元 $x$ 区分，设其分别为 $(X_i,Y_i)$，总共有 $n$ 个，当前函数为 $F_k(x)$，代表着第 $k$ 个点值。</p>
<p>那么，我们让函数为 $\displaystyle \prod_{i&#x3D;1,i \neq k}^n (x - X_i)$，这样可以使除当前点之外的数都是 $0$。</p>
<p>然后，我们将整个函数除以代入 $X_k$ 时的值，使 $F_k(X_k)&#x3D;1$。<br>那么整个函数就变为了 $\displaystyle \prod_{i&#x3D;1,i \neq k}^n \frac{x - X_i}{X_k - X_i}$。</p>
<p>最后再乘上 $Y_k$，就可以得出我们当前的函数：$\displaystyle F_k(x) &#x3D; Y_k \prod_{i&#x3D;1,i \neq k}^n \frac{x - X_i}{X_k - X_i}$</p>
<p>再把所有的东西加起来，得到</p>
<p>$$<br>G(x) &#x3D; \sum_{k&#x3D;1}^n \bigg( Y_k \prod_{i&#x3D;1,i \neq k}^n \frac{x - X_i}{X_k -X_i} \bigg)<br>$$</p>
<hr>
<p>或者说，我们对于每一个点值列一个方程，将所有的系数作为未知量来求解。</p>
<p>对于一个 $n$ 次多项式，我们一共有 $n+1$ 个系数。我们设这些系数分别为 $a_0,a_1,a_2,a_3,\cdots ,a_n$。</p>
<p>我们如果有一个点值 $(x,y)$，那么我们就可以根据其列出一个方程：</p>
<p>$$<br>a_0 + a_1 x + a_2 x^2 + a_3 x^3 + \cdots + a_n x^n &#x3D; y<br>$$</p>
<p>首先，众所周知，我们需要不少于 $n$ 个方程才能求出 $n$ 个未知数。<br>其次，我们利用克拉默法则来接方程式的时候，也需要形成行列式才能解出来值。</p>
<p>所以说，我们给定 $n+1$ 个点值，能唯一地确定一个 $n$ 次多项式。</p>
<hr>
<p>所以，我们如果用拉格朗日插值法来计算AJ的课后作业的话，得到的式子就是这个样子的：</p>
<p>$$<br>\begin{align}<br>G(x) &amp;&#x3D; 1·\frac{(x-2)(x-3)(x-4)(x-5)(x-6)}{(1-2)(1-3)(1-4)(1-5)(1-6)}<br>\\ &amp;+ 3·\frac{(x-1)(x-3)(x-4)(x-5)(x-6)}{(2-1)(2-3)(2-4)(2-5)(2-6)}<br>\\ &amp;+ 5·\frac{(x-1)(x-2)(x-4)(x-5)(x-6)}{(3-1)(3-2)(3-4)(3-5)(3-6)}<br>\\ &amp;+ 7·\frac{(x-1)(x-2)(x-3)(x-5)(x-6)}{(4-1)(4-2)(4-3)(4-5)(4-6)}<br>\\ &amp;+ 9·\frac{(x-1)(x-2)(x-3)(x-4)(x-6)}{(5-1)(5-2)(5-3)(5-4)(5-6)}<br>\\ &amp;+ 114514·\frac{(x-1)(x-2)(x-3)(x-4)(x-5)}{(6-1)(6-2)(6-3)(6-4)(6-5)} \\<br>&amp;&#x3D; \frac{114503}{120} x^5 - \frac{114503}{8} x^4 + \frac{1946551}{24} x^3 - \frac{1717545}{8} x^2 + \frac{15687031}{60} x - 114504<br>\end{align}<br>$$</p>
<p>这里有一个 $O(n^2)$ 求出最后得出的多项式的系数的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long </span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5050</span>;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll t = mod - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t &amp; <span class="number">1</span>)ans = ans * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        t &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll x[N], y[N], c[N], fs[N], g[N], f[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;x[i], &amp;y[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span>(i != j)</span><br><span class="line">                c[i] = c[i] * (x[i] - x[j]) % mod;</span><br><span class="line">        c[i] = <span class="built_in">qpow</span>(c[i]) * y[i] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    fs[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = n; j; j--)</span><br><span class="line">            fs[j] = (fs[j - <span class="number">1</span>] + fs[j] * (mod - x[i])) % mod;</span><br><span class="line">        fs[<span class="number">0</span>] = fs[<span class="number">0</span>] * (mod - x[i]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll buf = <span class="built_in">qpow</span>(mod - x[i]);</span><br><span class="line">        g[<span class="number">0</span>] = fs[<span class="number">0</span>] * buf % mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            g[j] = (fs[j] - g[j - <span class="number">1</span>]) * buf % mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            f[j] = (f[j] + c[i] * g[j]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, (f[i] + mod) % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL2Jsb2cvY29tbWFuZC1ibG9jay96b25nLWxhLWNoYS1kYW8ta3VhaS1zdS1jaGEtemhpLXFpdS16aGk=">$\blacktriangleright$</span></p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>数学杂项整理</title>
    <url>/maths/mathematics/</url>
    <content><![CDATA[<p>这里是一个数学杂项（也就是太短暂时写不成博客）的整理。</p>
<span id="more"></span>

<h1 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h1><p>参见 <strong>陈卓裕质数三大公理</strong> (<span class="exturl" data-url="aHR0cHM6Ly9rYW1vbWUubW9lL2luZGV4LnBocC8yMDIxLzA5LzI2L3RoZXlfY2hhbmdlZF9tYXRoLw==">Link is here</span>) 。</p>
<p>在 $[1,n]$范围内，质数个数的数量级是 $\dfrac{n}{\log n}$ 的，</p>
<p>即， $\pi(n) \sim O(\dfrac{n}{\log n})$</p>
<p>（此处的$\log$指的是$\ln$）</p>
<h1 id="组合计数"><a href="#组合计数" class="headerlink" title="组合计数"></a>组合计数</h1><h2 id="排列数"><a href="#排列数" class="headerlink" title="排列数"></a>排列数</h2><p>排列数，通常用 $A$ (Arrangement)来表示。<br>公式为：</p>
<p>$$<br>\begin{equation}<br>A^n_m &#x3D; \frac{n!}{(n-m)!}<br>\end{equation}<br>$$</p>
<p>还有以下递推式：</p>
<p>$$<br>A_n^m &#x3D; m \times A_{n-1}^{m-1} + A_{n-1}^m<br>$$</p>
<h2 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h2><p>组合数，通常用 $C$ (Conbination)来表示。</p>
<p>常见的表示方法有$\binom{m}{n}$ 和 $C^n_m$ 两种。</p>
<p>我这里用的是后者。<br>（据说这个是苏联写法，已经在机房里面成为梗了）</p>
<p>公式为：</p>
<p>$$<br>\begin{equation}<br>C^n_m &#x3D; \frac{A^n_m}{A^n_n} &#x3D; \frac{n!}{(n-m)!m!}<br>\end{equation}<br>$$</p>
<p>还有以下递推式：</p>
<p>$$<br>C_n^m &#x3D; C_{n-1}^{m-1} + C_{n-1}^m<br>$$</p>
<h3 id="快速计算组合数"><a href="#快速计算组合数" class="headerlink" title="快速计算组合数"></a>快速计算组合数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m &gt; n || m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[n] * ifac[m] % mod * ifac[n - m] % mod;</span><br><span class="line">&#125;<span class="comment">//组合数</span></span><br></pre></td></tr></table></figure>

<h3 id="常见组合恒等式"><a href="#常见组合恒等式" class="headerlink" title="常见组合恒等式"></a>常见组合恒等式</h3><ul>
<li>$\displaystyle C_n^m &#x3D; C_n^{n-m}$</li>
</ul>
<p>因为</p>
<p>$$<br>C_n^m &#x3D; \frac{n!}{(n-m)!m!} &#x3D; \frac{n!}{(n-(n-m))!(n-m)!} &#x3D; C_n^{n-m}<br>$$</p>
<ul>
<li>$\displaystyle m \times C_n^m &#x3D; n \times C_{n-1}^{m-1}$</li>
</ul>
<p>因为</p>
<p>$$<br>m \times C_n^m &#x3D; \frac{n!}{(n-m)!(m-1)!} &#x3D; n \times \frac{(n-1)!}{(n-m)!(m-1)!} &#x3D; n \times C_{n-1}^{m-1}<br>$$</p>
<ul>
<li>$\displaystyle \sum_{i&#x3D;0}^n C_n^i &#x3D; 2^n$</li>
</ul>
<p>就类似于考虑每一个物品到底是选还是不选。</p>
<ul>
<li>$\displaystyle C_n^0 + C_n^2 + \cdots &#x3D; C_n^1 + C_n^3 + \cdots &#x3D; 2^{n-1} (n \geq 1)$</li>
</ul>
<p>跟上面的那个差不多。</p>
<ul>
<li>$\displaystyle \sum_{i&#x3D;0}^n (-1)^i C_n^i &#x3D; C_n^0 - C_n^1 + C_n^2 - C_n^3 + \cdots &#x3D; [ n&#x3D;&#x3D;0 ]$</li>
</ul>
<p>上面那个的衍生。</p>
<ul>
<li>$\displaystyle \sum_{i&#x3D;0}^k C_n^i \times C_m^{k-i} &#x3D; C_{n+m}^k$</li>
</ul>
<p>考虑将 $n+m$ 的一堆物品分为一堆 $n$ 的和一堆 $m$ 的，分别从两堆里面取。<br>然后分别考虑从两堆里面各挑出来几个物品。</p>
<ul>
<li>$\displaystyle \sum_{i&#x3D;0}^n (C_n^i)^2 &#x3D; C_{2n}^n$</li>
</ul>
<p>上面的那个的特殊化。<br>因为 $C_n^i &#x3D; C_n^{n-i}$，所以我们可以将其替换为这样的形式。</p>
<h1 id="上升幂与下降幂"><a href="#上升幂与下降幂" class="headerlink" title="上升幂与下降幂"></a>上升幂与下降幂</h1><h2 id="上升幂"><a href="#上升幂" class="headerlink" title="上升幂"></a>上升幂</h2><p>$$<br>x^{\bar{k}} &#x3D; \prod_{i&#x3D;i}^k (x+i-1)<br>$$</p>
<h2 id="下降幂"><a href="#下降幂" class="headerlink" title="下降幂"></a>下降幂</h2><p>$$<br>x^{\underline{k}} &#x3D; \prod_{i&#x3D;1}^k (x-i+1)<br>$$</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵</title>
    <url>/maths/matrix/</url>
    <content><![CDATA[<p>矩阵与矩阵相关运算。</p>
<span id="more"></span>

<p>在数学中，矩阵是一种很重要的表现形式；在OI中，矩阵也是一种很重要的数据结构。<br>矩阵通常可以用在线性齐次递推式的加速上，比如说加速斐波那契数列的递推过程。<br>矩阵还可以让多个数据关联起来，并简便地进行区间维护。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>为了更好地区分矩阵与其他量，我们这里将代表矩阵的符号进行了特殊处理，就像这个样子：</p>
<p>$A \to \mathbf{A}$</p>
<h2 id="矩阵是什么"><a href="#矩阵是什么" class="headerlink" title="矩阵是什么"></a>矩阵是什么</h2><p>由 $n \times m$ 个元素组成的，形如<br>$$<br>\mathbf{A} &#x3D;<br>\begin{bmatrix}<br>a_{1,1} &amp; a_{1,2} &amp; a_{1,3} &amp; \dots &amp; a_{1,m} \\<br>a_{2,1} &amp; a_{2,2} &amp; a_{2,3} &amp; \dots &amp; a_{2,m} \\<br>a_{3,1} &amp; a_{3,2} &amp; a_{3,3} &amp; \dots &amp; a_{3,m} \\<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>a_{n,1} &amp; a_{n,2} &amp; a_{n,3} &amp; \dots &amp; a_{n,m}<br>\end{bmatrix}<br>$$<br>的 $n$ 行 $m$ 列的数表，我们称之为大小为 $n \times m$ 的矩阵，可以简记为 $\mathbf{A_{\mathcal{n \times m}}}$ 。</p>
<h2 id="特殊的矩阵"><a href="#特殊的矩阵" class="headerlink" title="特殊的矩阵"></a>特殊的矩阵</h2><p>特殊的矩阵由很多种，比如单位矩阵、上三角矩阵等等。</p>
<h3 id="行矩阵与列矩阵"><a href="#行矩阵与列矩阵" class="headerlink" title="行矩阵与列矩阵"></a>行矩阵与列矩阵</h3><p>行矩阵就是只有一行的矩阵，列矩阵就是只有一列的矩阵。</p>
<h3 id="零矩阵"><a href="#零矩阵" class="headerlink" title="零矩阵"></a>零矩阵</h3><p>元素全为 $0$ 的矩阵。<br>零矩阵简记为 $\mathbf{0}$。</p>
<h3 id="负矩阵"><a href="#负矩阵" class="headerlink" title="负矩阵"></a>负矩阵</h3><p>对于一个矩阵 $\mathbf{A}$ 的负矩阵 $-\mathbf{A}$，其中每个元素都与矩阵 $\mathbf{A}$ 内相同位置的元素互为相反数。</p>
<h3 id="方阵"><a href="#方阵" class="headerlink" title="方阵"></a>方阵</h3><p>方阵指的就是正方形的矩阵，其行数与列数相等。<br>此时，其行数（或列数，反正他们相等）就可以被称作该矩阵的阶。</p>
<p>简单来说，一个 $n$ 阶方阵 $\mathbf{A_{\mathcal{n}}}$ 其实就是相当于一个 $n \times n$ 的矩阵 $\mathbf{A_{\mathcal{n \times n}}}$。</p>
<h3 id="单位矩阵"><a href="#单位矩阵" class="headerlink" title="单位矩阵"></a>单位矩阵</h3><p>单位矩阵就是指，在主对角线上的元素都是 $1$，其余元素都为 $0$ 的矩阵。<br>主对角线就是指 $(1,1)$ 到 $(n,n)$。这也说明单位矩阵都是正方形的。</p>
<p>单位矩阵简记为 $\mathbf{I}$。</p>
<p>单位矩阵也有其相应的阶，比如1到4阶的单位矩阵分别是这个样子的：$\mathbf{I_{\mathrm{1}}}&#x3D;\begin{bmatrix}1\end{bmatrix}$，$\mathbf{I_{\mathrm{2}}}&#x3D;\begin{bmatrix}1&amp;\\&amp;1\end{bmatrix}$，$\mathbf{I_{\mathrm{3}}}&#x3D;\begin{bmatrix}1&amp;&amp;\\&amp;1&amp;\\&amp;&amp;1\end{bmatrix}$，$\mathbf{I_{\mathrm{4}}}&#x3D;\begin{bmatrix}1&amp;&amp;&amp;\\&amp;1&amp;&amp;\\&amp;&amp;1&amp;\\&amp;&amp;&amp;1\end{bmatrix}$。</p>
<p>形象一点，就是这样：<br>（为 $0$ 的元素太多时一般将其省略）</p>
<p>$$<br>\mathbf{I} &#x3D;<br>\begin{bmatrix}<br>1&amp; &amp; &amp; \\<br> &amp;1&amp; &amp; \\<br> &amp; &amp; \ddots &amp; \\<br> &amp; &amp; &amp;1<br>\end{bmatrix}<br>$$</p>
<p>单位矩阵的一个很重要的性质就是，任何矩阵乘以单位矩阵的结果还是其本身，即 $\mathbf{AI} &#x3D; \mathbf{IA} &#x3D; \mathbf{A}$。</p>
<p>有时候还可能将单位矩阵称为 $\mathbf{E}$，但是很少见，我目前还没有见过。</p>
<h2 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h2><p>矩阵可以进行四则运算，但是与正常的数字还是有所不同。</p>
<h3 id="加减"><a href="#加减" class="headerlink" title="加减"></a>加减</h3><p>矩阵的加减要求两个矩阵必须行数列数均相同才可以进行。</p>
<p>加减的时候，每一对位置相同的元素相加或者相减。</p>
<p>形象一点就是这个样子：</p>
<p>$$<br>\mathbf{A} \pm \mathbf{B}<br>&#x3D;<br>\begin{bmatrix}<br>a &amp; b &amp; c \\<br>d &amp; e &amp; f<br>\end{bmatrix}<br>\pm<br>\begin{bmatrix}<br>g &amp; h &amp; i \\<br>j &amp; k &amp; l<br>\end{bmatrix}<br>&#x3D;<br>\begin{bmatrix}<br>a \pm g &amp; b \pm h &amp; c \pm i \\<br>d \pm j &amp; e \pm k &amp; f \pm l<br>\end{bmatrix}<br>$$</p>
<p>矩阵的加法满足交换律和结合律。</p>
<h3 id="数乘"><a href="#数乘" class="headerlink" title="数乘"></a>数乘</h3><p>就是一个矩阵乘以一个数。</p>
<p>乘起来的时候，矩阵内的每一个元素都要乘以这个数。</p>
<p>形象一点就是这样：</p>
<p>$$<br>λ\mathbf{A}<br>&#x3D;<br>λ \times<br>\begin{bmatrix}<br>a &amp; b &amp; c \\<br>d &amp; e &amp; f<br>\end{bmatrix}<br>&#x3D;<br>\begin{bmatrix}<br>λa &amp; λb &amp; λc \\<br>λd &amp; λe &amp; λf<br>\end{bmatrix}<br>$$</p>
<p>矩阵的数乘满足交换律、结合律和分配律。</p>
<p>如果将刚才这个过程反过来的话，就叫做矩阵提公因子。</p>
<h3 id="点乘"><a href="#点乘" class="headerlink" title="点乘"></a>点乘</h3><p>点乘是矩阵运算中很重要的一部分。</p>
<p>点乘又叫做矩阵乘法，（基本上）是OI中矩阵的精髓。</p>
<p>矩阵乘法不满足交换律，是因为其需要满足左侧矩阵的列数与右侧矩阵的行数相等。</p>
<p>形象一点，就是 $\mathbf{A_{\mathcal{n \times p}}} \times \mathbf{B_{\mathcal{p \times m}}} &#x3D; \mathbf{C_{\mathcal{n \times m}}}$。</p>
<p>具体操作的时候是这个样子的：</p>
<p>我们以 $\mathbf{A_{\mathrm{3 \times 3}}} \times \mathbf{B_{\mathrm{3 \times 2}}}$ 为例。</p>
<p>$$<br>\begin{align}<br>&amp; \mathbf{A_{\mathrm{3 \times 3}}} \times \mathbf{B_{\mathrm{3 \times 2}}} \\<br>&#x3D;{} &amp;<br>\begin{bmatrix}<br>a_{1,1} &amp; a_{1,2} &amp; a_{1,3} \\ a_{2,1} &amp; a_{2,2} &amp; a_{2,3} \\ a_{3,1} &amp; a_{3,2} &amp; a_{3,3}<br>\end{bmatrix}<br>\times<br>\begin{bmatrix}<br>b_{1,1} &amp; b_{1,2} \\ b_{2,1} &amp; b_{2,2} \\ b_{3,1} &amp; b_{3,2}<br>\end{bmatrix}\\<br>&#x3D;{} &amp;<br>\begin{bmatrix}<br>a_{1,1}b_{1,1}+a_{1,2}b_{2,1}+a_{1,3}b_{3,1} &amp; a_{2,1}b_{1,1}+a_{2,2}b_{2,1}+a_{2,3}b_{3,1} &amp; a_{3,1}b_{1,1}+a_{3,2}b_{2,1}+a_{3,3}b_{3,1} \\<br>a_{1,1}b_{1,2}+a_{1,2}b_{2,2}+a_{1,3}b_{3,2} &amp; a_{2,1}b_{1,2}+a_{2,2}b_{2,2}+a_{2,3}b_{3,2} &amp; a_{3,1}b_{1,2}+a_{3,2}b_{2,2}+a_{3,3}b_{3,2}<br>\end{bmatrix}<br>\end{align}<br>$$</p>
<p>除了交换律以外，矩阵乘法只满足结合律和左、右分配律。</p>
<h3 id="幂"><a href="#幂" class="headerlink" title="幂"></a>幂</h3><p>矩阵的幂运算与正常的幂运算一样，都是自乘多少次，但是由于矩阵乘法的特殊性质，我们只能给方阵求幂。</p>
<p>$\mathbf{A^{\mathcal{k}}} &#x3D; \underbrace{\mathbf{AAAA \cdots AA}}_{\text{k of}}$</p>
<p>根据这种性质，我们可以像对数字一样进行快速幂，逻辑与之前一样。</p>
<h3 id="转置"><a href="#转置" class="headerlink" title="转置"></a>转置</h3><p>转置就是将一个矩阵顺时针旋转90度。</p>
<p>例：<br>$$<br>\begin{bmatrix}<br>1&amp;1&amp;4\\5&amp;1&amp;4<br>\end{bmatrix}^T<br>&#x3D;<br>\begin{bmatrix}<br>5&amp;1\\1&amp;1\\4&amp;4<br>\end{bmatrix}<br>$$</p>
<p>我们使用 $\mathbf{A}^T$ 来表示矩阵 $\mathbf{A}$ 的转置。</p>
<p>转置满足以下法则：<br>$$<br>\begin{align}<br>(\mathbf{A}^T)^T &amp;&#x3D; \mathbf{A} \\<br>(\lambda \mathbf{A})^T &amp;&#x3D; \lambda \mathbf{A}^T \\<br>(\mathbf{AB})^T &amp;&#x3D; \mathbf{B}^T \mathbf{A}^T<br>\end{align}<br>$$</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>我们可以使用一个二维数组来存储矩阵。</p>
<p>就像这个样子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="type">int</span> a[N][N];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>定义一个初始化函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Matrix</span>() &#123;&#125;;</span><br><span class="line"><span class="built_in">Matrix</span>(<span class="type">int</span> n, <span class="type">int</span> m) : <span class="built_in">n</span>(n), <span class="built_in">m</span>(m) &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a)) &#125;;</span><br></pre></td></tr></table></figure>

<p>重载一下运算符：</p>
<p>加：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> Matrix <span class="keyword">operator</span> + (<span class="type">const</span> Matrix &amp;lhs, <span class="type">const</span> Matrix &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Matrix <span class="title">res</span><span class="params">(lhs.n, lhs.m)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lhs.n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lhs.m; j++)</span><br><span class="line">            res.a[i][j] = lhs.a[i][j] + rhs.a[i][j];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>乘：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> Matrix <span class="keyword">operator</span> * (<span class="type">const</span> Matrix &amp;lhs, <span class="type">const</span> Matrix &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Matrix <span class="title">res</span><span class="params">(lhs.n, rhs.m)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lhs.n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= rhs.m; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= lhs.m; k++)</span><br><span class="line">                res.a[i][j] += lhs.a[i][k] * rhs.a[k][j];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>乘方（快速幂）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> Matrix <span class="keyword">operator</span> ^ (Matrix rhs, <span class="type">int</span> x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Matrix <span class="title">res</span><span class="params">(rhs.n, rhs.n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= rhs.n; i++)res.a[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x &amp; <span class="number">1</span>) res = res * rhs;</span><br><span class="line">        rhs = rhs * rhs;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再继续加一些其他的重载运算符之后就是这个样子：</p>
<details class="note default"><summary><p>矩阵结构体</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="type">int</span> a[N][N];</span><br><span class="line">    <span class="built_in">Matrix</span>() &#123;&#125;;</span><br><span class="line">    <span class="built_in">Matrix</span>(<span class="type">int</span> n, <span class="type">int</span> m) : <span class="built_in">n</span>(n), <span class="built_in">m</span>(m) &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a)) &#125;;</span><br><span class="line">    <span class="keyword">friend</span> Matrix <span class="keyword">operator</span> + (<span class="type">const</span> Matrix &amp;lhs, <span class="type">const</span> Matrix &amp;rhs)</span><br><span class="line">    &#123;<span class="comment">//加</span></span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(lhs.n, lhs.m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lhs.n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lhs.m; j++)</span><br><span class="line">                res.a[i][j] = lhs.a[i][j] + rhs.a[i][j];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Matrix <span class="keyword">operator</span> - (<span class="type">const</span> Matrix &amp;lhs, <span class="type">const</span> Matrix &amp;rhs)</span><br><span class="line">    &#123;<span class="comment">//减</span></span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(lhs.n, lhs.m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lhs.n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lhs.m; j++)</span><br><span class="line">                res.a[i][j] = lhs.a[i][j] - rhs.a[i][j];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> -() <span class="type">const</span></span><br><span class="line">    &#123;<span class="comment">//取反</span></span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                res.a[i][j] = -a[i][j];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Matrix <span class="keyword">operator</span> * (<span class="type">const</span> Matrix &amp;lhs, <span class="type">const</span> Matrix &amp;rhs)</span><br><span class="line">    &#123;<span class="comment">//点乘</span></span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(lhs.n, rhs.m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lhs.n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= rhs.m; j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= lhs.m; k++)</span><br><span class="line">                    res.a[i][j] += lhs.a[i][k] * rhs.a[k][j];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Matrix <span class="keyword">operator</span> * (<span class="type">const</span> Matrix &amp;lhs, <span class="type">int</span> k)</span><br><span class="line">    &#123;<span class="comment">//数乘</span></span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(lhs.n, lhs.m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lhs.n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lhs.m; j++)</span><br><span class="line">                res.a[i][j] = lhs.a[i][j] * k;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Matrix <span class="keyword">operator</span> ^ (Matrix lhs, <span class="type">int</span> n)</span><br><span class="line">    &#123;<span class="comment">//快速幂</span></span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(lhs.n, lhs.n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lhs.n; i++)res.a[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n &amp; <span class="number">1</span>) res = res * lhs;</span><br><span class="line">            lhs = lhs * lhs;</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>

<p>但其实更常见的是这样子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="type">int</span> a[N][N];</span><br><span class="line">    <span class="built_in">Matrix</span>() &#123;&#125;;</span><br><span class="line">    <span class="built_in">Matrix</span>(<span class="type">int</span> n, <span class="type">int</span> m) : <span class="built_in">n</span>(n), <span class="built_in">m</span>(m) &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a)) &#125;;</span><br><span class="line">    <span class="keyword">friend</span> Matrix <span class="keyword">operator</span> + (<span class="type">const</span> Matrix &amp;lhs, <span class="type">const</span> Matrix &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(lhs.n, lhs.m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lhs.n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lhs.m; j++)</span><br><span class="line">                res.a[i][j] = lhs.a[i][j] + rhs.a[i][j];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Matrix <span class="keyword">operator</span> * (<span class="type">const</span> Matrix &amp;lhs, <span class="type">const</span> Matrix &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(lhs.n, rhs.m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lhs.n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= rhs.m; j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= lhs.m; k++)</span><br><span class="line">                    res.a[i][j] += lhs.a[i][k] * rhs.a[k][j];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Matrix <span class="keyword">operator</span> ^ (Matrix lhs, <span class="type">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(lhs.n, lhs.n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lhs.n; i++)res.a[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n &amp; <span class="number">1</span>) res = res * lhs;</span><br><span class="line">            lhs = lhs * lhs;</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="矩阵加速递推"><a href="#矩阵加速递推" class="headerlink" title="矩阵加速递推"></a>矩阵加速递推</h2><p>就以矩阵加速斐波那契数列递推为例吧。</p>
<p>我们将第 $n$ 项斐波那契数简写为 $F_n$。</p>
<p>我们知道 $F_n &#x3D; F_{n-1} + F_{n-2}$，我们就考虑把斐波那契数列的相邻两项放在一个行（或者列，根据个人习惯）矩阵里面，就像这个样子：$\begin{bmatrix}F_i&amp;F_{i-1}\end{bmatrix}$。</p>
<p>我们需要把 $\begin{bmatrix}F_i&amp;F_{i-1}\end{bmatrix}$ 变成 $\begin{bmatrix}F_{i-1}+F_i&amp;F_i\end{bmatrix}$，同时需要用到矩阵乘法。</p>
<p>因为<br>$$<br>\begin{bmatrix}<br>a &amp; b<br>\end{bmatrix}<br>\times<br>\begin{bmatrix}<br>x &amp; y\\<br>z &amp; w<br>\end{bmatrix}<br>&#x3D;<br>\begin{bmatrix}<br>ax+bz &amp; ay+bw<br>\end{bmatrix}<br>$$</p>
<p>所以我们如果想让 $\begin{bmatrix}a&amp;b\end{bmatrix}$ 变成 $\begin{bmatrix}a+b&amp;a\end{bmatrix}$ 的话，我们就需要将其乘以 $\begin{bmatrix}1&amp;1\\1&amp;0\end{bmatrix}$。</p>
<p>然后就是矩阵快速幂了。<br>因为我们一开始的 $\begin{bmatrix}1&amp;1\end{bmatrix}$ 是 $\begin{bmatrix}F_2&amp;F_1\end{bmatrix}$，所以我们只需要将其乘以 $\begin{bmatrix}1&amp;1\\1&amp;0\end{bmatrix}^{n-2}$ 即可得到 $F_n$。</p>
<h3 id="如何构建转移矩阵"><a href="#如何构建转移矩阵" class="headerlink" title="如何构建转移矩阵"></a>如何构建转移矩阵</h3><p>我们考虑我们是如何从一个状态转移到下一个状态的。</p>
<p>对于一个函数 $f(x)$，我们假定它具有这样的转移式子：</p>
<p>$$<br>f(x) &#x3D; f(x-1) + 2f(x-2) + 2^x + 2<br>$$</p>
<p>我们的状态矩阵就是这个样子的：$\begin{bmatrix}f(x)&amp;f(x-1)&amp;2^x&amp;1\end{bmatrix}$。</p>
<p>然后我们考虑我们如何从 $\begin{bmatrix}f(x-1)&amp;f(x-2)&amp;2^{x-1}&amp;1\end{bmatrix}$ 变为 $\begin{bmatrix}f(x)&amp;f(x-1)&amp;2^x&amp;1\end{bmatrix}$</p>
<p>我们将 $\begin{bmatrix}f(x)&amp;f(x-1)&amp;2^x&amp;1\end{bmatrix}$ 展开，得</p>
<p>$$<br>\begin{align}<br>f(x) &amp;&#x3D; f(x-1) \times 1 + f(x-2) \times 2 + 2^{x-1} \times 2 + 1 \times 2 \\<br>f(x-1) &amp;&#x3D; f(x-1) \times 1 + f(x-2) \times 0 + 2^{x-1} \times 0 + 1 \times 0 \\<br>2^x &amp;&#x3D; f(x-1) \times 0 + f(x-2) \times 0 + 2^{x-1} \times 2 + 1 \times 0 \\<br>1 &amp;&#x3D; f(x-1) \times 0 + f(x-2) \times 0 + 2^{x-1} \times 0 + 1 \times 1<br>\end{align}<br>$$</p>
<p>然后我们就可以得到我们的转移矩阵了：</p>
<p>$$<br>\begin{bmatrix}<br>1&amp;1&amp;0&amp;0\\<br>2&amp;0&amp;0&amp;0\\<br>2&amp;0&amp;2&amp;0\\<br>2&amp;0&amp;0&amp;1<br>\end{bmatrix}<br>$$</p>
<h2 id="矩阵辅助维护信息"><a href="#矩阵辅助维护信息" class="headerlink" title="矩阵辅助维护信息"></a>矩阵辅助维护信息</h2><p>这种一般就是对于那种同时需要维护多种信息，还需要支持一大堆复杂的操作，但是推式子的时候不会超过一次的那种题，就比如说这一个：</p>
<p><a href="/solutions/solution-l2980/">THUSC 大魔法师</a></p>
<p>我们可以发现其操作（$A_i &#x3D; A_i + k$，$B_i &#x3D; B_i \times k$，$C_i &#x3D; k$）均未出现两个未知量相乘的情况，即可判定其可以利用矩阵乘法来维护。</p>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>特殊的数</title>
    <url>/maths/special-numbers/</url>
    <content><![CDATA[<p>简介： 卡特兰数，斯特林数，欧拉数，调和级数</p>
<span id="more"></span>

<h1 id="卡特兰数-Catalan-Numbers"><a href="#卡特兰数-Catalan-Numbers" class="headerlink" title="卡特兰数(Catalan Numbers)"></a>卡特兰数(Catalan Numbers)</h1><p>卡特兰数 (<del>Català</del>Catalan Numbers) 十分常用，序列的开头是 $1,1,2,5,14,42,\cdots$。</p>
<p>卡特兰数的主要应用是再括号序列上面，很多题目都可以转化成为括号序列的问题，就比如下面这个：</p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>有关卡特兰数的例题有很多，其中最经典的是<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDEwNDQ=">下面这个</span>：</p>
<p>我们有 $n$ 个元素和一个栈。这 $n$ 各元素是 $[1,n]$ 的所有整数，并且以升序排列。</p>
<p>现在我们将所有的元素放入栈中，并最终让所有元素都出栈。栈的<code>pop()</code>和<code>push()</code>的顺序由你自己来决定，问有多少种可能的出栈顺序。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们显然可以看出，我们不能对着一个空的栈疯狂<code>pop()</code>，也不能对着一个空的进栈序列疯狂<code>push()</code>。<br>所以，每一个<code>pop()</code>操作必定对应着之前的一个<code>pop()</code>操作，且所有<code>pop()</code>操作的次数与<code>push()</code>操作的次数相等。</p>
<p>我们尝试将<code>push()</code>和<code>pop()</code>抽象为前缀和的形式。<br>我们可以将<code>push()</code>转化为<code>+1</code>，<code>pop()</code>转化为<code>-1</code>。<br>那么，我们的要求就是：</p>
<p>该序列的每一个前缀和必定大于等于0，且整个序列的和必定为0。</p>
<p>这就需要我们使用卡特兰数。</p>
<h2 id="求值"><a href="#求值" class="headerlink" title="求值"></a>求值</h2><p>我们这里使用 $C_n$ 来代表第 $n$ 项卡特兰数。</p>
<p>我们通常使用的都是单个的卡特兰数（除非有多组测试数据），所以这里首先给出了通项公式。</p>
<p>卡特兰数的通项公式是这个样子的：</p>
<p>$$<br>C_n&#x3D;\frac{C_{2n}^n}{n+1}<br>$$</p>
<p>如果需要生成卡特兰数数列，那么我们可以进行递推：</p>
<p>首先，$C_0&#x3D;C_1&#x3D;1$，这两个我们先自己手动输入进去。<br>之后我们可以根据这个递推公式来计算：</p>
<p>$$<br>C_n &#x3D; C_{n-1} \frac{4n-2}{n+1}<br>$$</p>
<p>我们需要注意，在 $n \in [ 0,16 ] $ 的时候可以只开<code>int</code>；在 $n \in [ 17,35 ] $ 的时候就需要开<code>long long</code>了；而当 $n \geq 36$ 的时候就只能使用高精度或者用 Python 来求了。</p>
<p>递推代码示例：</p>
<p>Python：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ans = <span class="number">1</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;项数：&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1:&quot;</span> + <span class="built_in">str</span>(ans))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">    ans = ans * (<span class="number">4</span> * i - <span class="number">2</span>) // (i + <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(i) + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(ans))</span><br></pre></td></tr></table></figure>

<p>例题 <span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDEwNDQ=">Luogu P1044</span> 代码示例：</p>
<p>Python：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ans = <span class="number">1</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">    ans = ans * (<span class="number">4</span> * i - <span class="number">2</span>) // (i + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(ans))</span><br></pre></td></tr></table></figure>

<p>C++：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        ans = ans * (<span class="number">4</span> * i - <span class="number">2</span>) / (i + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="斯特林数-Stirling-Numbers"><a href="#斯特林数-Stirling-Numbers" class="headerlink" title="斯特林数(Stirling Numbers)"></a>斯特林数(Stirling Numbers)</h1><p>斯特林数 (Stirling Numbers) 分为第一类斯特林数和第二类斯特林数。</p>
<p>我们使用 $S_1(n,k)$ 来表示第一类斯特林数，使用 $S_2(n,k)$ 来表示第二类斯特林数。<br>通常的表达方式是这样的：<br>使用 $\begin{bmatrix} n \\ k \end{bmatrix}$ 来表示第一类斯特林数，使用 $\begin{Bmatrix} n \\ k \end{Bmatrix}$ 来表示第二类斯特林数。<br>但是因为这个样子在 $ \LaTeX $ 里面并不好打，所以我就索性换了个表达方式，以便我能够打出来。</p>
<h2 id="第二类斯特林数"><a href="#第二类斯特林数" class="headerlink" title="第二类斯特林数"></a>第二类斯特林数</h2><p>第二类斯特林数比第一类更加常用（其实是所有这些数里除了组合数外最常用的），所以我们先介绍第二类斯特林数。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>第二类斯特林数 $S_2(n,k)$ $(n \geq k)$ 表示讲一个有 $n$ 件互不相同的物品的集合划分为 $k$ 个非空子集的方法数。</p>
<p>例：</p>
<p>$S_2(4,2)$ 有下列几种情况：</p>
<p>$$<br>\begin{align}<br>\{ 1 , 2 , 3 \} &amp; \cup \{ 4 \} \\<br>\{ 1 , 2 , 4 \} &amp; \cup \{ 3 \} \\<br>\{ 1 , 3 , 4 \} &amp; \cup \{ 2 \} \\<br>\{ 2 , 3 , 4 \} &amp; \cup \{ 1 \} \\<br>\{ 1 , 2 \} &amp; \cup \{ 3 , 4 \} \\<br>\{ 1 , 3 \} &amp; \cup \{ 2 , 4 \} \\<br>\{ 1 , 4 \} &amp; \cup \{ 2 , 3 \}<br>\end{align}<br>$$</p>
<p>所以 $S_2(4,2)&#x3D;7$ 。</p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ol>
<li><p>显而易见的，$S_2(n,1)&#x3D;1$ ，$S_2(n,n)&#x3D;1$ 。</p>
</li>
<li><p>特别的，我们规定 $S_2(0,0)&#x3D;1$ ，$S_2(n,0)&#x3D;0$ 。</p>
</li>
</ol>
<h3 id="求值-1"><a href="#求值-1" class="headerlink" title="求值"></a>求值</h3><p>我们从较小的 $k$ 来入手。</p>
<p>当 $k \leq 1$ 时 比较好办，我们可以通过上面两个显而易见的性质推出来。</p>
<p>而当 $k&#x3D;2$ 时，我们可以这样想：<br>一个物品不是放在一个篮子里面就是放在另一个篮子里面，所以 $n$ 个物品一共有 $n^2$ 中不同的划分方式。<br>而因为两个篮子不区分，且有着非空的要求，所以最终的划分方式就只有 $2^{n-1}-1$ 种了。<br>所以，</p>
<p>$$<br>S_2(n,k) &#x3D; 2^{n-1}-1 \quad (n&gt;0)<br>$$</p>
<p>或者使用更难打出来但更眼熟的方式：</p>
<p>$$<br>\begin{Bmatrix}<br>n \\ 2<br>\end{Bmatrix}<br>&#x3D; 2^{n-1}-1<br>$$</p>
<p>再来看 $k&gt;2$ 的情况。</p>
<p>我们仍然对每一个物品进行分析，只不过我们这次是倒序分析的。</p>
<p>对于最后的一个物品，我们可以将其单独分成一堆，也可以将其放入之前的 $n-1$ 个物品组成的 $k$ 堆中的一堆中。</p>
<p>对于前一个选择，我们有 $S_2(n-1,k-1)$ 中排列的方法；而对于后一种，我们有 $S_2(n-1,k)$ 中方法，最后还需乘以我们可以做出的选择数 $k$。</p>
<h4 id="递推式"><a href="#递推式" class="headerlink" title="递推式"></a>递推式</h4><p>所以总结一一下，我们有以下递推式：</p>
<p>$$<br>S_2(n,k) &#x3D; k · S_2(n-1,k) + S_2(n-1,k-1)<br>$$</p>
<p>或者使用更难打出来但更眼熟的表达方式：</p>
<p>$$<br>\begin{Bmatrix}<br>n \\ k<br>\end{Bmatrix}<br>&#x3D;<br>k<br>\begin{Bmatrix}<br>n-1 \\ k<br>\end{Bmatrix}<br>+<br>\begin{Bmatrix}<br>n-1 \\ k-1<br>\end{Bmatrix}<br>$$</p>
<h4 id="通项式"><a href="#通项式" class="headerlink" title="通项式"></a>通项式</h4><p>还有一种直接求的通项公式，是这个样子的：</p>
<p>$$<br>S_2(n,m)&#x3D;\sum_{i&#x3D;0}^m \frac{(-1)^{m-i} i^n}{i! (m-i)!}<br>$$</p>
<h2 id="第一类斯特林数"><a href="#第一类斯特林数" class="headerlink" title="第一类斯特林数"></a>第一类斯特林数</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>第一类斯特林数 $S_1(n,k) (n \geq k)$ 也是一种描述将 $n$ 个互不相同的物品划分为 $k$ 个不同的轮换的方案。</p>
<p>所谓轮换，就是指像项链一样的环形排列，可以类比成把所有的元素像珠子一样穿到项链上。</p>
<p>比如说一个轮换 $[A,B,C,D]$，它有4种异构体：</p>
<p>$$<br>[A,B,C,D]&#x3D;[B,C,D,A]&#x3D;[C,D,A,B]&#x3D;[D,A,B,C]<br>$$</p>
<p>所以说对于 $S_1(4,2)$，有下列几种情况：</p>
<p>$$<br>\begin{align}<br>[ 1,2,3 ] [ 4 ] \quad [ 1,3,2 ] [ 4 ] \\<br>[ 1,2,4 ] [ 3 ] \quad [ 1,4,2 ] [ 3 ] \\<br>[ 1,3,4 ] [ 2 ] \quad [ 1,4,3 ] [ 2 ] \\<br>[ 2,3,4 ] [ 1 ] \quad [ 2,4,3 ] [ 1 ]<br>\end{align}<br>$$<br>$$<br>[ 1,2 ] [ 3,4 ] \quad<br>[ 1,3 ] [ 2,4 ] \quad<br>[ 1,4 ] [ 2,3 ]<br>$$</p>
<p>一共11种。</p>
<p>所以， $S_1(4,2)&#x3D;11$。</p>
<p>我们不难看出，$S_1(n,k) \geq S_2(n,k)$。</p>
<h3 id="求值-2"><a href="#求值-2" class="headerlink" title="求值"></a>求值</h3><p>我们仍然从较小的 $k$ 开始。</p>
<p>当 $k&#x3D;1$ 时，我们对于每一个空位考虑。第 $i$ 个空位可以随意选择 $n-i+1$ 个物品，总体就是 $\displaystyle \prod_{i&#x3D;1}^n (n-i+1)$，显而易见是 $(n-1)!$。<br>所以：</p>
<p>$$<br>S_1(n,1)&#x3D;(n-1)!<br>$$</p>
<p>当所有的轮换都至多含两个物品的时候，我们就会发现，此时的轮换与子集是等价的。<br>这种情况只能在 $k&#x3D;n-1$ 的时候成立，也就是说，<br>$$<br>\begin{align}<br>S_1(n,n) &amp;&#x3D; S_2(n,n) &#x3D; 1 \\<br>S_1(n,n-1) &amp;&#x3D; S_2(n,n-1) &#x3D; C^2_n<br>\end{align}<br>$$</p>
<h4 id="递推式-1"><a href="#递推式-1" class="headerlink" title="递推式"></a>递推式</h4><p>我们考虑一般的情况。</p>
<p>还是类似之前考虑 $S_2$ 时的方法，我们还是考虑最后一个元素。</p>
<p>对于这个元素，我们可以将其单独成堆，也可以将其放在之前的任意一个轮换里面。</p>
<p>显然，对于前者，我们有 $S_1(n-1,k-1)$ 种方案；对于后者，我们有 $S_1(n-1,k)$ 种方案，而这个物品有 $n-1$ 种放置的位置（指插在任意一个元素的后面），所以总共是这样的式子：</p>
<p>$$<br>S_1(n,k) &#x3D; (n-1) · S_1(n-1,k) + S_1(n-1,k-1)<br>$$</p>
<p>或者使用更难打出来但更眼熟的表达方式：</p>
<p>$$<br>\begin{bmatrix}<br>n \\ k<br>\end{bmatrix}<br>&#x3D;<br>(n-1)<br>\begin{bmatrix}<br>n-1 \\ k<br>\end{bmatrix}<br>+<br>\begin{bmatrix}<br>n-1 \\ k-1<br>\end{bmatrix}<br>$$</p>
<p>第一类斯特林数没有实用的通项公式。</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数</title>
    <url>/notes/linar-algebra/</url>
    <content><![CDATA[<p>线性代数。</p>
<span id="more"></span>

<p>2022年7月暑假推倒重写。</p>
<hr>
<h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><p>线性代数基本上可以说是基于向量的。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>向量可以被描述成一条有向线段。</p>
<p>决定一个向量的两个量是其长度和其方向。<br>这就意味着，在保证其长度和方向不变的情况下，我们可以将其随意地平移而不改变其本身。</p>
<p>我们用一个有序数列来描述一个向量。</p>
<p>比如说下面的这个向量，我们就可以用 $\begin{bmatrix}2\\1\end{bmatrix}$ 来表示。</p>
<p>[pic here]</p>
<p>这个 $2$ 和 $1$ 分别代表的是，这个向量可以被表示为 $2 {\color[RGB]{125,180,100}\hat{\imath}} + 1 {\color[RGB]{255,100,80}\hat{\jmath}}$。<br>这样，每一个向量都可以与一个有序数列一一对应了。</p>
<h2 id="向量的运算"><a href="#向量的运算" class="headerlink" title="向量的运算"></a>向量的运算</h2><p>这里先介绍两种重要的向量运算：加法和数乘。</p>
<p>我们这里首先以二维向量做例子。</p>
<h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>向量加法，就是高中课本里面的向量加法，可以用平行四边形法则的那个。</p>
<p>其满足交换律和结合律，所以我们可以将两个向量拆开来看。</p>
<p>对于两个向量 $\vec{a}$ 和 $\vec{b}$，我们将其表示为 $\begin{bmatrix}{\color[RGB]{125,180,100}x_a}\\{\color[RGB]{255,110,80}y_a}\end{bmatrix}$ 和 $\begin{bmatrix}{\color[RGB]{125,180,100}x_b}\\{\color[RGB]{255,110,80}y_b}\end{bmatrix}$。<br>那么如果令 $\vec{c} &#x3D; \vec{a} + \vec{b}$ 的话，$\vec{c}$ 就可以表示为 $\begin{bmatrix}{\color[RGB]{125,180,100}x_a}\\{\color[RGB]{255,110,80}y_a}\end{bmatrix} + \begin{bmatrix}{\color[RGB]{125,180,100}x_b}\\{\color[RGB]{255,110,80}y_b}\end{bmatrix}$。<br>将两式拆分的话，可以得到 $\vec{c} &#x3D; ({\color[RGB]{125,180,100}x_a \hat{\imath}} + {\color[RGB]{255,110,80}y_a \hat{\jmath}}) + ({\color[RGB]{125,180,100}x_b \hat{\imath}} + {\color[RGB]{255,110,80}y_b \hat{\jmath}})$，合并同类项可得 $\vec{c} &#x3D; \begin{bmatrix}{\color[RGB]{125,180,100}x_a+x_b}\\{\color[RGB]{255,110,80}y_a+y_b}\end{bmatrix}$。</p>
<p>[pic here]</p>
<h3 id="数乘"><a href="#数乘" class="headerlink" title="数乘"></a>数乘</h3><p>向量的数乘可以看作是对这个向量进行缩放。</p>
<p>还是对于向量 $\begin{bmatrix}2\\1\end{bmatrix}$，我们让他乘以一个数 $\lambda$，就相当于是将其缩放了 $\lambda$ 倍，最终得到的向量是 $\begin{bmatrix}2\lambda\\\lambda\end{bmatrix}$。</p>
<p>推广到一般情况下，对于一个向量 $\begin{bmatrix}{\color[RGB]{125,180,100}x}\\{\color[RGB]{255,110,80}y}\end{bmatrix}$，我们将其乘以 $\lambda$，得到的向量是 $\begin{bmatrix}{\color[RGB]{125,180,100}\lambda x}\\{\color[RGB]{255,110,80}\lambda y}\end{bmatrix}$。</p>
<p>[pic here]</p>
<h2 id="基底，张成空间与线性相关"><a href="#基底，张成空间与线性相关" class="headerlink" title="基底，张成空间与线性相关"></a>基底，张成空间与线性相关</h2><h3 id="基底"><a href="#基底" class="headerlink" title="基底"></a>基底</h3><p>我们刚才提到的东西里面有两个没有解释，是 $\color[RGB]{125,180,100}\hat{\imath}$ 和 $\color[RGB]{255,100,80}\hat{\jmath}$。<br>$\color[RGB]{125,180,100}\hat{\imath}$ 长度为1，方向沿 $x$ 轴；$\color[RGB]{255,100,80}\hat{\jmath}$ 长度为1，方向沿 $y$ 轴。</p>
<p>[pic here]</p>
<p>我们在数学书上面可以看到，这两个向量叫做 $x$ 轴和 $y$ 轴上的单位向量。<br>根据刚才的例子可以看出，我们可以使用这两个向量组成二维平面内的所有向量，也就是说，所有的向量都可以表示为 $a{\color[RGB]{125,180,100}\hat{\imath}} + b{\color[RGB]{255,100,80}\hat{\jmath}}$ 的形式。</p>
<p>我们就称这样的一组向量为这个二维平面的一组<strong>基底</strong>。</p>
<p>当前这个二维平面的基底不止有这一种，只要我们选定的一组向量可以<strong>张成</strong>这个二维平面的话，这组向量也可以算是一组基底。</p>
<h3 id="张成空间"><a href="#张成空间" class="headerlink" title="张成空间"></a>张成空间</h3><p>“张成”这个术语其实很简单。</p>
<p>我们随便考虑两个向量，比如说 $\color[RGB]{210,100,110}\vec{u} &#x3D; \begin{bmatrix}2\\1\end{bmatrix}$ 和 $\color[RGB]{80,150,220}\vec{v} &#x3D; \begin{bmatrix}3\\-1\end{bmatrix}$。</p>
<p>[pic here]</p>
<p>对于二维平面中的任意一个向量，如果我们都能将其写成 $a{\color[RGB]{210,100,110}\vec{u}} + b{\color[RGB]{80,150,220}\vec{v}}$ 的形式的话，我们就可以说 $\color[RGB]{210,100,110}\vec{u}$ 和 $\color[RGB]{80,150,220}\vec{v}$ 所张成的空间就是当前我们这个二维平面，$\color[RGB]{210,100,110}\vec{u}$ 和 $\color[RGB]{80,150,220}\vec{v}$ 就是当前二维平面的一组基底。<br>我们称这个让一个向量等于 $a{\color[RGB]{210,100,110}\vec{u}} + b{\color[RGB]{80,150,220}\vec{v}}$ 的组成向量的方式为<strong>“线性组合”</strong>或者<strong>“线性表出”</strong>。也就是说，由$\color[RGB]{210,100,110}\vec{u}$ 和 $\color[RGB]{80,150,220}\vec{v}$ 所张成的空间中的所有向量都是 $\color[RGB]{210,100,110}\vec{u}$ 和 $\color[RGB]{80,150,220}\vec{v}$ 的线性组合，或可以由 $\color[RGB]{210,100,110}\vec{u}$ 和 $\color[RGB]{80,150,220}\vec{v}$ 线性表出。</p>
<p>二维平面的一组基底最少需要两个向量。<br>但这两个向量可不是随便两个就可以的。</p>
<p>假如说选中的两个向量共线的话，这两个向量所能线性组合而成的向量就（相对）少多了。这些向量只会存在在这两个向量所在的直线上。那么，这两个向量所张成的空间就是这一条直线。</p>
<p>为什么两个共线的向量就不行了呢？</p>
<p>因为他们<strong>线性相关</strong>。</p>
<h3 id="线性相关"><a href="#线性相关" class="headerlink" title="线性相关"></a>线性相关</h3><p>我们定义一组向量 ${\bf{A}}:\{ \vec{a_1},\vec{a_2},\vec{a_3},\cdots,\vec{a_m} \}$ 线性相关，当且仅当存在一组不全为 $0$ 的数 $k_1,k_2,k_3,\cdots,k_m$，使得:</p>
<center>$k_1\vec{a_1} + k_2\vec{a_2} + k_3\vec{a_3} + \cdots + k_m\vec{a_m} = \vec{0}$</center>

<p>换句话说，这一组向量里面有至少一个向量可以被组内其他向量线性表出。</p>
<p>在我们刚才举的第一个例子中，两个向量不能被对方线性表出，我们就称其为<strong>线性无关</strong>的。<br>而在第二个例子中，两个共线的向量可以被对方线性表出，我们就称其为<strong>线性相关</strong>的。</p>
<h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><p>矩阵可以看作是一系列向量的组合。</p>
<p>一般我们在学矩阵的时候，我们首先认识到的是矩阵的代数意义。<br>这样不是很直观，且死记硬背的成分较多。</p>
<p>这里我们通过矩阵与线性变换的结合，可以将矩阵的几何意义表示出来。<br>这样就较为直观，并且可能可以加深对某些操作的理解。</p>
<h2 id="矩阵与线性变换"><a href="#矩阵与线性变换" class="headerlink" title="矩阵与线性变换"></a>矩阵与线性变换</h2><p>何为<strong>线性变换</strong>？</p>
<p>我们仍然以二维平面为例。</p>
<p>对于这样一个平面直角坐标系，我们可以搞出来一个映射，使得这个二维平面内的每一个点都可以映射到二维平面内的一个点。<br>将点转化成为向量，我们的这个映射就相当于是对于一个向量的函数，其输入值和输出值的类型都是二维向量。</p>
<p>这就称为一个<strong>变换</strong>。</p>
<p>而<strong>线性</strong>代表的就是，我们需要保证，在原先平面内的每一条直线，在变换后的平面内其仍然为一条直线；同时原点位置不变。</p>
<p>在上面这两条要求的约束下，我们就可以利用基底来对变换进行定量的描述了。</p>
<p>我们仍然利用 $\color[RGB]{125,180,100}\hat{\imath}$ 和 $\color[RGB]{255,100,80}\hat{\jmath}$ 来说明。</p>
<p>我们对一个平面直角坐标系进行线性变换的同时，其基底 $\color[RGB]{125,180,100}\hat{\imath}$ 和 $\color[RGB]{255,100,80}\hat{\jmath}$ 同时也会发生变化。</p>
<p>[pic here]</p>
<p>基于这两个新的基底，我们按照原来的数量关系构建出来的向量和直接拿向量去变换得到的结果是吻合的。</p>
<p>[pic here]</p>
<p>基于上面这个结论，我们就可以用 $\color[RGB]{125,180,100}\hat{\imath}$ 和 $\color[RGB]{255,100,80}\hat{\jmath}$ 经过变换后的位置来描述这个变换了。</p>
<p>假设我们变换之后的 $\color[RGB]{125,180,100}\hat{\imath}$ 和 $\color[RGB]{255,100,80}\hat{\jmath}$ 分别为 $\color[RGB]{125,180,100}\begin{bmatrix}2\\1\end{bmatrix}$ 和 $\color[RGB]{255,100,80}\begin{bmatrix}1\\3\end{bmatrix}$。<br>我们将两个向量写到一块：$\begin{bmatrix}{\color[RGB]{125,180,100}2}&amp;{\color[RGB]{255,100,80}1}\\{\color[RGB]{125,180,100}1}&amp;{\color[RGB]{255,100,80}3}\end{bmatrix}$。</p>
<p>假设我们要对向量 $\begin{bmatrix}-1\\2\end{bmatrix}$ 做这个变换的话，其变换后可以看作是 $-1{\color[RGB]{125,180,100}\begin{bmatrix}2\\1\end{bmatrix}} + 2{\color[RGB]{255,100,80}\begin{bmatrix}1\\3\end{bmatrix}}$，也就是 $\begin{bmatrix}0\\5\end{bmatrix}$。</p>
<h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><p>（这里有一个矩阵乘法的<span class="exturl" data-url="aHR0cDovL21hdHJpeG11bHRpcGxpY2F0aW9uLnh5ei8=">可视化工具</span>）</p>
<p>将上面的东西推广到一般，可以得到下面的式子：</p>
<center>$\begin{bmatrix}{\color[RGB]{125,180,100}a}&{\color[RGB]{255,100,80}b}\\{\color[RGB]{125,180,100}c}&{\color[RGB]{255,100,80}d}\end{bmatrix} \begin{bmatrix}e\\f\end{bmatrix} = \begin{bmatrix}{\color[RGB]{125,180,100}a}e+{\color[RGB]{255,100,80}b}f\\{\color[RGB]{125,180,100}c}e+{\color[RGB]{255,100,80}d}f\end{bmatrix}$</center>

<p><del>根据矩阵乘法的定义</del>，我们可以知道这样就相当于是给一个向量左乘了一个方阵。<del>（其实上面写的就是）</del></p>
<p>对于一次做多种变换，比如说对于向量 $\vec{v}&#x3D;\begin{bmatrix}-1\\2\end{bmatrix}$，我们先做一个 ${\bf{U}}_1&#x3D;\begin{bmatrix}{\color[RGB]{125,180,100}2}&amp;{\color[RGB]{255,100,80}1}\\{\color[RGB]{125,180,100}1}&amp;{\color[RGB]{255,100,80}3}\end{bmatrix}$，再做一个 ${\bf{U}}_2&#x3D;\begin{bmatrix}{\color[RGB]{125,180,100}2}&amp;{\color[RGB]{255,100,80}1}\\{\color[RGB]{125,180,100}0}&amp;{\color[RGB]{255,100,80}1}\end{bmatrix}$。<br>根据上面的式子，我们可以推出来结果是这个：$\begin{bmatrix}{\color[RGB]{125,180,100}2}&amp;{\color[RGB]{255,100,80}1}\\{\color[RGB]{125,180,100}0}&amp;{\color[RGB]{255,100,80}1}\end{bmatrix} \begin{bmatrix}{\color[RGB]{125,180,100}2}&amp;{\color[RGB]{255,100,80}1}\\{\color[RGB]{125,180,100}1}&amp;{\color[RGB]{255,100,80}3}\end{bmatrix} \begin{bmatrix}-1\\2\end{bmatrix}$。</p>
<p>按照我们上面的描述，我们的运算顺序是这个样子的：${\bf{U}}_2({\bf{U}}_1\vec{v})$。<br>如果我们将 ${\bf{U}}_2{\bf{U}}_1$ 合并成为一个矩阵的话，结果是</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈论（广义）学习笔记</title>
    <url>/notes/game-strategy/</url>
    <content><![CDATA[<p>简介： 博弈论</p>
<span id="more"></span>

<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>我们先举一个栗子：</p>
<p>假如你和李zen一起玩一个游戏；<br>你们面前都有一个开关，你们都可以选择让这个开关处于断开或闭合两种状态的其中任意一种。<br>而我会根据开关的状态给你们评级：<br>当两个开关都闭合时，你们都得 $C$ ；<br>当两个开关都断开时，你们都得 $B$ ；<br>当两个开关一开一断时，断开的得 $D$ ，闭合的得 $A$ 。<br>十分简单。</p>
<p>你会怎么选呢？</p>
<p>首先我们列一个表格，表示出所有结果：</p>
<p><img src="https://i.loli.net/2021/09/22/PugFZ2BDdAqo5zw.png" alt="博弈1.png"></p>
<p>现在你会做出什么选择呢？</p>
<p>你犹豫了一下，然后闭合了开关。<br>毕竟这样你可以<del>迫害李zen</del>得到更高的评级。<br>但是你的内心深处还是有一个声音：<br>“断开开关吧，毕竟李zen之前被迫害太多次了，他会<del>开始反围剿</del>伤心的”<br>驱使着你断开开关。<br>是不是？</p>
<p>你仍然在犹豫。</p>
<p>那么，如果现在我们规定，本次游戏结果计入今年的期末考试，只有拿到 $C$ 级才能及格，而你又不想挂科，怎么样？</p>
<p>为了更直观一点，我们用 $[-1,2]$ 范围内的整数来代替评级，是不是会更好一些？</p>
<p><img src="https://i.loli.net/2021/09/22/OSmtUF89Hs5covl.png" alt="博弈2.png"></p>
<p>这时候，你就可以进行一下比较：</p>
<p>如果你闭合开关，那么无论李zen干什么，你都可以拿到更高的分数<del>（除非他直接来找你）</del> ：<br>$0&gt;-1,2&gt;1$</p>
<p>此时，如果有两个策略 $α$ 与 $β$ ，无论他人选择什么，我们选 $α$ 得到的结果都严格优于选 $β$ ，那我们就称 $α$ 相对于 $β$ 是一个 <strong>严格优势策略(Strictly dominant strategy)</strong> 。</p>
<p>比如这道题里的“闭合开关”就是个相对于“断开开关”的严格优势策略。</p>
<p>假如你选择了断开开关，而李zen选择闭合开关，你挂科了。<br>这时候你就会得到一条重要的结论：</p>
<h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论 1"></a>结论 1</h3><p><strong>永远，永远不要选择劣势策略。</strong><br>这里的 <strong>“严格劣势策略(Strictly dominated strategy)”</strong> 是相对于 <strong>“严格优势策略”</strong> 而说的，指有一个策略，不管别人选择什么，你选它的结果都严格劣于选其他的策略。</p>
<p>懂的都懂。</p>
<hr>
<p>所以说，你们两个人都选择断开开关，都得B，不是很好的吗？</p>
<p>这时候需要引入另一条重要的结论：</p>
<h3 id="结论-2"><a href="#结论-2" class="headerlink" title="结论 2"></a>结论 2</h3><p><strong>理性的选择最终一定导致非最优结果。</strong></p>
<p>对于zen来说，不管你怎么选，选择闭合开关总是对他有利的。但你不知道他会选什么，也不可以与它交流，所以你不能与他一起约好了选择断开开关。</p>
<hr>
<p>现在，我们更改一下游戏的结果。</p>
<p>假如你考砸了，你就会受到家长的诘问，因而变得伤心，这一部分也要算在期望收益里；</p>
<p>假如你让李zen考砸了，你就会心生愧疚<del>同时被愤怒的zen反围剿</del>，也会变得伤心，这一部分也要算在期望收益里。</p>
<p>于是，我们的表格变成了：</p>
<p><img src="https://i.loli.net/2021/09/22/16dpGnyJa9uB3vM.png" alt="博弈3.png"></p>
<p>在这种情况下，你就不会有任何优势策略或劣势策略。</p>
<p>这个博弈叫做 <strong>“协和谬误(Coordination problem)”</strong> 。</p>
<p>这个时候你就不知道怎么办了。</p>
<p>你不知道李zen会怎么做，你们两个人也无法交流，因此你就无法做出决定。</p>
<p>这就引出了另外一条很好的结论：</p>
<h3 id="结论-3"><a href="#结论-3" class="headerlink" title="结论 3"></a>结论 3</h3><p><strong>汝欲求之，必先知之。</strong></p>
<p>你在做出决定之前，最好先了解一下你的对手的基本信息。</p>
<p>在这局游戏里，你的对手是李zen。</p>
<p>碰巧，你知道李zen富有爱心，他总会考虑你的感受。如果他闭合了开关但你没有而使得你输了，他会不开心的。</p>
<p>这就导致他之前和鳖玩的时候被邪恶的鳖打到自闭。（之前的不计入期末成绩awa）</p>
<p>你们两个会玩的十分愉快。（你输了他会安慰你awa）</p>
<p>但是如果你跟鳖玩呢？</p>
<p>鳖不会有情感损伤的减益よ。</p>
<p>那么，你的期望收益就变成了这样：</p>
<p><img src="https://i.loli.net/2021/09/22/ElJjYIQzXW8mtdO.png" alt="博弈4.png"></p>
<p>此时，你就需要对你的策略进行一些改变：</p>
<p>因为无论你选择什么，鳖总会闭合开关，因为这相对于他来说是一种优势策略。</p>
<p>所以，你应当闭合开关，使得鳖的收益最小。</p>
<p>这时候，你就学会了一条重要的结论：</p>
<h3 id="结论-4"><a href="#结论-4" class="headerlink" title="结论 4"></a>结论 4</h3><p><strong>站在他人的立场上去分析他们会做出的决策</strong> ，或者， <strong>学会换位思考</strong> 。</p>
<p>现在，你大概就可以与鳖这样的人友好地游玩了，甚至能跟tue、zhua过上几招了。</p>
<p>但是，如果这个游戏的结果与你的期末考试成绩挂钩呢？<br>那么，就连zen也会闭合开关，来防止挂科的。</p>
<p>所以记住：</p>
<h3 id="结论-5"><a href="#结论-5" class="headerlink" title="结论 5"></a>结论 5</h3><p><strong>人是自私的。人都想偷懒。</strong></p>
<p>至此，你就基本上开始接触了博弈论。</p>
<hr>
<p>大家应该都听说过囚徒困境罢。<br>不出意外的话，两个囚徒都会选择供出对方。<br>那么，如何改变这个博弈的结果呢？</p>
<h3 id="如何改变博弈结果"><a href="#如何改变博弈结果" class="headerlink" title="如何改变博弈结果"></a>如何改变博弈结果</h3><p>我们有三种方法：</p>
<p><strong>1. 签订条约，制定规章制度等；</strong><br><strong>2. 多次重复博弈；</strong><br><strong>3. 教育。（如集体主义教育）</strong></p>
<p>不管哪一条，本质上都是改变了参与者的收益或参与者的动机。</p>
<hr>
<h2 id="更深的层次"><a href="#更深的层次" class="headerlink" title="更深的层次"></a>更深的层次</h2><p>我们刚才通过举例子知道了什么是博弈，但我们真的知道什么是博弈吗？</p>
<h3 id="博弈的组成"><a href="#博弈的组成" class="headerlink" title="博弈的组成"></a>博弈的组成</h3><p>一个博弈由三部分组成：</p>
<h4 id="1-参与人-Players"><a href="#1-参与人-Players" class="headerlink" title="1. 参与人(Players)"></a>1. 参与人(Players)</h4><p>在这里，我们使用小写字母 $i$ , $j$ 等来代表参与人。</p>
<h4 id="2-策略-Strategy"><a href="#2-策略-Strategy" class="headerlink" title="2. 策略(Strategy)"></a>2. 策略(Strategy)</h4><p>在这里，我们使用带有下标的小写字母 $s_i$ 来代表参与人 $i$ 的某一个策略。</p>
<p>我们使用带有下标的大写字母 $S_i$ 来代表参与人 $i$ 的所有可能的策略集合。</p>
<p>我们使用小写字母 $s_{-i}$ 来表示除参与人 $i$ 之外的所有参与人的策略。</p>
<h4 id="3-收益-Payoff"><a href="#3-收益-Payoff" class="headerlink" title="3. 收益(Payoff)"></a>3. 收益(Payoff)</h4><p>在这里，我们使用带有下标的大写字母 $U_i (s)$ 来代表参与人 $i$ 在所有参与者使用的策略为 $s$ 时所能得到的收益。（这一段好长啊）</p>
<p>另外的，我们使用小写字母 $s$ 来表示一个博弈。</p>
<p>好了，现在让我们来使用我们刚刚学会的表示方法来表示我们之前学过的东西。</p>
<p>那么，如果策略 $s_i$ 相对于策略 $s_i’$ 是一个严格优势策略的话，那么我们就可以写下</p>
<p>$$<br>\begin{equation}<br>U_i (s_i , s_{-i}) &gt; U_i (s_i’ , s_{-i})<br>\end{equation}<br>$$</p>
<p>类似的，如果策略 $s_i$ 相对于策略 $s_i’$ 是一个严格劣势策略的话，那么我们就可以写下</p>
<p>$$<br>\begin{equation}<br>U_i (s_i , s_{-i}) &lt; U_i (s_i’ , s_{-i})<br>\end{equation}<br>$$</p>
<h3 id="弱优与弱劣"><a href="#弱优与弱劣" class="headerlink" title="弱优与弱劣"></a>弱优与弱劣</h3><p>如果策略 $s_i$ 相对于策略 $s_i’$ 是一个严格优势策略，那么无论他人选择何种策略，那么我们选 $s_i$ 得到的结果都严格优于选 $s_i’$。</p>
<p>但有时候我们并不能总见到这样的策略。</p>
<p>那我们定义一个策略 $s_i$ 为相对于另一个策略 $s_i’$ 为 <strong>弱优策略(Weakly dominant strategy)</strong> ，此时只需要将大于号填上等于即可。<br>就像下面这样：</p>
<p>$$<br>\begin{equation}<br>U_i (s_i , s_{-i}) \leq U_i (s_i’ , s_{-i})<br>\end{equation}<br>$$</p>
<p>类似的， <strong>弱劣策略(Weakly dominated strategy)</strong> 的定义如下：</p>
<p>$$<br>\begin{equation}<br>U_i (s_i , s_{-i}) \geq U_i (s_i’ , s_{-i})<br>\end{equation}<br>$$</p>
<p>所以说，对于刚才你和李zen做的游戏，我们可以用这些表示来替换之前的说法：</p>
<p>（先放图）</p>
<p><img src="https://i.loli.net/2021/09/22/OSmtUF89Hs5covl.png" alt="博弈2.png"></p>
<p>其中，<br>$S_{you} &#x3D; \lbrace 1,0 \rbrace $<br>$S_{zen} &#x3D; \lbrace 1,0 \rbrace $<br>$U_{you} (1,1) &#x3D; 0 $<br>$U_{zen} (1,1) &#x3D; 0 $<br>$U_{you} (1,0) &#x3D; 2 $<br>$U_{zen} (1,0) &#x3D; -1 $<br>$U_{you} (0,1) &#x3D; -1 $<br>$U_{zen} (0,1) &#x3D; 2 $<br>$U_{you} (0,0) &#x3D; 1 $<br>$U_{zen} (0,0) &#x3D; 1 $<br>$U_{zen} (1,s_{-zen}) &gt; U_{zen} (0,s_{-zen}) $<br>$U_{you} (1,s_{-you}) &gt; U_{you} (0,s_{-you}) $</p>
<p>现在你就可以理解刚才我们讲的符号是什么意思了。</p>
<h3 id="迭代剔除劣势策略"><a href="#迭代剔除劣势策略" class="headerlink" title="迭代剔除劣势策略"></a>迭代剔除劣势策略</h3><p>让我们来做一个新的游戏。</p>
<p>你，李zen，鳖，tue，zhua，还有广大四班人民群众一起做一个游戏。每一个人都需要从范围为 $[1,100]$ 的整数里面选一个数。<br>AJ将会统计大家的结果，并进行总结。<br>总结后取平均数的 $\dfrac{2}{3}$ 作为基准数（向上取整）。基准数减去（你的结果与基准数的差）再除以基准数，得到一个百分数。这个百分数再乘以120就是你本次期末的数学成绩。</p>
<p>同时，AJ指定你和李zen为挑战对象。这意味着你如果比不过他，你就得承包他明年的巧克力供应了。</p>
<p>所以，你会选择哪一个数呢？</p>
<ul>
<li>首先，你知道即使大家都选择100，基准数也是 $67\dfrac{1}{3}$ ，所以说选择67以上的数字是不明智的选择。</li>
</ul>
<p>现在你把目光聚集到了 $[1,67]$ 范围内的整数上。</p>
<ul>
<li>其次，即使大家都选择67，那么基准数也将会是 $44$ ，所以选择44以上的数字也是不太明智的选择。</li>
</ul>
<p> 现在你把目光聚集到了 $[1,44]$ 范围内的整数上。</p>
<ul>
<li>然后，即使大家都选择了44，那么基准数也将会是 $28$ ，所以选择28以上的数字也是不很明智的选择。</li>
</ul>
<p>……</p>
<p>最后，这个基准数字将会迭代到1。<br>不断剔除明显看起来劣势的策略，找出来此时新出现的劣势策略并予以剔除，这就叫 <strong>迭代剔除劣势策略(Iterative deletion of dominated strategies)</strong> 。</p>
<h3 id="公共知识与相互知识"><a href="#公共知识与相互知识" class="headerlink" title="公共知识与相互知识"></a>公共知识与相互知识</h3><p>所以1是个明智的选择吗？</p>
<p>其实不是的。</p>
<p>大家都选择1的前提是，同学们都认为自己会选择1，且他人会选择1，且他人知道自己会选择1，且自己知道他人知道自己会选择1，且他人知道自己知道他人知道自己会选择1……</p>
<p>是不是绕起来了？</p>
<p>有一个相似的东西叫做 <strong>猜疑链</strong> 。</p>
<p>长度为2n+1的猜疑链大概是这样的：</p>
<p>你不知道我不知道你不知道我不知道你不知道……我不知道你不知道我不知道你在想什么。</p>
<p>省略的部分就不写出来了。</p>
<p>刚才我们遇见的东西看起来很像猜疑链，只不过“不知道”换成了“知道”。这就叫做 <strong>公共知识(Common knowledge)</strong> 。</p>
<p>但是在这个情况下，同学们们无法和对方沟通，无法知道别人的结果，所以这个东西是不能成立的。</p>
<p>AJ在统计完结果后让挑战对象互相看了对方的答案，但是你不知道李zen看了你的答案，同时李zen也不知道你看了他的答案。</p>
<p>这时候，公共知识的构建就停止在了某一层。这时候，我们就称其为 <strong>相互知识(Mutual knowledge)</strong> 。</p>
<p>是不是很简单？</p>
<h3 id="中位选民定理"><a href="#中位选民定理" class="headerlink" title="中位选民定理"></a>中位选民定理</h3><p>班长轮换时间到！</p>
<p>现在我们有两位班长候选人：bobo与武嘉。</p>
<p>而班级内将会产生十个不同的小团体，每个团体投一票。他们只会投给自己理想中的班长——也就是与自己交集最多的人。</p>
<p>小团体之间互无交集。<br>bobo和武嘉需要将自己定位到某一个小团体内，以计算选票。</p>
<p>现在我们将这些小团体分别命名为 $α,β,γ,δ,ε,ζ,η,θ,ι,κ$ 。</p>
<p>假如bobo选了η，而武嘉选了γ，那么他们两个人分别得到 $5.5$ 票与 $4.5$ 票。bobo会赢。</p>
<p>现在我们来模拟一下所有可能的结果。</p>
<p><img src="https://i.loli.net/2021/09/24/7rGpuJPQ4eTLN6n.png" alt="博弈5.png"></p>
<p>很明显，策略 $α$ 劣势于策略 $β$ ；去除策略 $α$ 后，策略 $β$ 劣势于策略 $γ$ ；去除策略 $β$ 后，策略 $γ$ 劣势于策略 $δ$ ；去除策略 $γ$ 后，策略 $δ$ 劣势于策略 $ε$ 。</p>
<p>同样的，策略 $κ$ 劣势于策略 $ι$ ；去除策略 $κ$ 后，策略 $ι$ 劣势于策略 $θ$ ；去除策略 $ι$ 后，策略 $θ$ 劣势于策略 $η$ ；去除策略 $θ$ 后，策略 $η$ 劣势于策略 $ζ$ 。</p>
<p>而策略 $ε$ 与策略 $ζ$ 没有优劣关系。</p>
<p>所以说，最后bobo和武嘉在进行玩迭代剔除劣势策略后，只能选择融入 $ε$ 和 $ζ$ 两个小团体之一了。</p>
<p>这就是著名的 <strong>中位选民定理(Median Voter Theorem)</strong> 了。</p>
<h3 id="最佳对策与期望收益"><a href="#最佳对策与期望收益" class="headerlink" title="最佳对策与期望收益"></a>最佳对策与期望收益</h3><p>现在让我们玩一个随机的游戏。<br>题面如下：</p>
<p><img src="https://i.loli.net/2021/09/24/ftmEhcYzuSdZkyI.png" alt="博弈6.png"></p>
<p>现在我们可以看到，没有明显的优势策略或劣势策略。</p>
<p>那我们该怎么办呢？</p>
<p>首先，我们可以看到，当李zen选择←时，选↑是我们的最佳对策；当李zen选择→时，选↓是我们的最佳对策。</p>
<p>但是你并不知道zen会选择什么。</p>
<p>你开始用AJ教你的数学知识来对每一个选项的期望收益进行一个模拟。</p>
<p>假设李zen选择←和→的几率是相等的，那么我们的期望收益如下：</p>
<p>$$<br>\begin{align}<br>U_{top} \  vs \  (\frac{1}{2} , \frac{1}{2} ) &amp; &#x3D; 5 \times \frac{1}{2} + 0 \times \frac{1}{2} &#x3D; 2 \frac{1}{2} \\<br>U_{middle} \  vs \  (\frac{1}{2} , \frac{1}{2} ) &amp; &#x3D; 1 \times \frac{1}{2} + 4 \times \frac{1}{2} &#x3D; 2 \frac{1}{2} \\<br>U_{down} \  vs \  (\frac{1}{2} , \frac{1}{2} ) &amp; &#x3D; 4 \times \frac{1}{2} + 2 \times \frac{1}{2} &#x3D; 3<br> \end{align}<br>$$</p>
<p>此时我们可以看到，选择↓是我们的最佳对策（也是最安全的对策），因为 $2 \dfrac{1}{2} &lt; 3 $ 。</p>
<p>但是如果你知道了李zen选择←或→的概率呢？</p>
<p>上图。</p>
<p><img src="https://i.loli.net/2021/09/24/mroUEi69tjgV1Cu.png" alt="博弈7.png"></p>
<p>图中的横轴代表李zen选←的概率，同时选→的概率是（1-选←的概率）。纵轴代表不同选择的期望收益。</p>
<p>所以，我们可以看到，在李zen选择某一策略的概率不同时，我们的最佳对策是不一样的。</p>
<p>在这里，我们可以这样定义 <strong>最佳对策(Best Responce)</strong> :<br>当</p>
<p>$$<br>U_i ( \hat{s_i} ,s_{-i} ) \geq U_i ( s_i’ ,s_{-i} ) \quad (s_i’ \in S_i )<br>$$</p>
<p>或</p>
<p>$$<br>U_i ( \hat{s_i} ,s_{-i} ) &#x3D; max( U_i ( S_i , s_{-i}))<br>$$</p>
<p>或</p>
<p>$$<br>EU_i ( \hat{s_i} ,p ) \geq max( EU_i ( s_i’ , p)) \quad (s_i’ \in S_i )<br>$$</p>
<p>时，我们称 $ \hat{s_i} $ 是策略 $s_{-i} $ 的最佳对策。</p>
<p>其中， $EU_i ( s_i , p ) $ 指的是策略 $s_i$ 在参与人 $i$ 持信念 $p$ 时的期望收益。</p>
<p>同时，我们需要注意一下，对于不同的策略集合 $s_{-i}$ ，其最佳对策的数量可能是不同的，且可能不为一（就是最佳对策不会只有一个）。</p>
<h2 id="纳什均衡"><a href="#纳什均衡" class="headerlink" title="纳什均衡"></a>纳什均衡</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>假设你需要和李zen一起完成一个项目。你将会付出 $s_y$ 个小时的时间，而zen将会付出 $s_z$ 个小时，其中 $s_y , s_z \in [0,10] $ 。</p>
<p>你们的收益为：</p>
<p>$$<br>\begin{align}<br>U_y &amp; &#x3D; 2 ( s_y + s_z + b s_y s_z ) - s_y^2 \\<br>U_z &amp; &#x3D; 2 ( s_y + s_z + b s_y s_z ) - s_z^2<br>\end{align}<br>$$</p>
<p>此时让我们来算一下我们怎么最大化我们的收益。</p>
<p>首先求一下导，把 $s_z$ 当做常数：</p>
<p>$$<br>\begin{align}<br>U_y’ &amp; &#x3D; 2 ( 1 + b s_z ) - 2 s_y \\<br>U_y’’ &amp; &#x3D; -2 &lt; 0<br>\end{align}<br>$$</p>
<p>此时令 $U_y’ &#x3D; 0 $ ，可以求出最佳对策：</p>
<p>$$<br>\begin{align}<br>2 ( 1 + b s_z ) - 2 s_y &amp; &#x3D; 0 \\<br>1 + b s_z &amp; &#x3D; s_y \\<br>s_y &amp; &#x3D; \frac{1}{1-b}<br>\end{align}<br>$$</p>
<p>此时画一下图：</p>
<p><img src="https://i.loli.net/2021/09/25/mwYX56SC4WaQtcT.png" alt="博弈8.png"></p>
<p>此时我们可以看到，两个人的最佳对策函数交于了一点。</p>
<p>在实际情况中，因为你们两个都想偷懒，所以你们会不断剔除掉双方付出过多的策略，最终直到选择那个交点。</p>
<p>这个就叫做 <strong>纳什均衡(Nash Equilibrium)</strong> 。</p>
<p>其定义是：</p>
<p>对于一个已选对策的集合$ \lbrace s_1^* , s_2^* , s_3^* , \dots , s_m^* \rbrace $ ，其纳什均衡是满足下列条件的策略集合：</p>
<p>对于 $ \forall $ 参与人 $i$ 来说，其策略 $ s_i^* $ 是 $ s_{-i}^* $ 的最佳对策。</p>
<p>要实现纳什均衡，我们需要几个动机。</p>
<h4 id="动机-1"><a href="#动机-1" class="headerlink" title="动机 1"></a>动机 1</h4><p><strong>人们永不反悔。</strong></p>
<p>或者说，在所有人都已经选定好每个人的策略了之后，改变自己的策略并不会有额外收益。</p>
<h4 id="动机-2"><a href="#动机-2" class="headerlink" title="动机 2"></a>动机 2</h4><p><strong>纳什均衡可以被看做一种自我实施的信念。</strong></p>
<h4 id="动机-3"><a href="#动机-3" class="headerlink" title="动机 3"></a>动机 3</h4><p>tbc</p>
<h3 id="找出博弈中的纳什均衡"><a href="#找出博弈中的纳什均衡" class="headerlink" title="找出博弈中的纳什均衡"></a>找出博弈中的纳什均衡</h3><p>假设我们现在与李zen玩一个新的游戏，题面如下：</p>
<p><img src="https://i.loli.net/2021/09/26/Qlx73OLrFZEYH9K.png" alt="博弈9.png"></p>
<p>现在，我们用绿色的圆圈和红色的方框来分别表示你和李zen的最佳对策：</p>
<p><img src="https://i.loli.net/2021/09/26/wo6Lc3VPdbTRvsX.png" alt="博弈10.png"></p>
<p>那么，这个博弈里的纳什均衡是什么呢？</p>
<p>我们可以看到，当你选择↓时，zen的最佳对策是选择→； 当李zen选择→时，你的最佳对策是选择↓。</p>
<p>一旦你们两个人中的其中一个选定了之后，另一个人就不会轻易跳出这个循环。</p>
<p>所以说， $(↓,→)$ 就是这场博弈里的纳什均衡。</p>
<p>当然，一场博弈的纳什均衡也可能不只有一个。<br>比如下图：</p>
<p><img src="https://i.loli.net/2021/09/26/NLsOb3oUgT26yM7.png" alt="博弈11.png"></p>
<p>很简单是不是？</p>
<p>这时你们会发现，在这场博弈中，虽然看起来 $(←,↑)$ 明显是纳什均衡 <del>（其实也真的是）</del> ，但是如果你仔细看的话，右下角的那个零零也符合纳什均衡的定义，虽然两个人什么都得不到且傻子也会知道选择有收益的那个策略而不是一点收益都没有的，但是一旦两个人知道对方会选择这个零零，那就不会轻易更改自己的策略，不要忘了<a href="/game_strategy/#%E5%8A%A8%E6%9C%BA-1">动机1</a>、<a href="/game_strategy/#%E5%8A%A8%E6%9C%BA-2">动机2</a>和<a href="/game_strategy/#%E7%BB%93%E8%AE%BA-5">结论5</a>。</p>
<p>这就类似全局最优解和局部最优解。</p>
<h3 id="帕累托优势"><a href="#帕累托优势" class="headerlink" title="帕累托优势"></a>帕累托优势</h3><p>在刚才上面那个博弈中，我们可以清楚的看到，左上的那个纳什均衡的收益是严格大于右下的那个的。</p>
<p>如果我们重复这次博弈。那么最终选择左上的几率会是百分之百。</p>
<p>这就叫做 <strong>帕累托优势(Pareto Dominate)</strong> 。</p>
<hr>
<p>咕了。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ABC253F Operations on a Matrix 题解</title>
    <url>/solutions/solution-abc253f/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Operations on a Matrix</div>
<div id="problem-info-from">ABC 253</div>
<div id="problem-info-difficulty">none</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly9hdGNvZGVyLmpwL2NvbnRlc3RzL2FiYzI1My90YXNrcy9hYmMyNTNfZg==">ABC 253 F</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zanplem9qLmNvbS9wcm9ibGVtLzE1ODQ=">S2OJ #1584</span></li></ul></div>

<hr>
<p>题目要求我们维护一个矩阵，并支持对其在纵向的区间加、横向的单点修改和对于某一个元素当前值的查询。</p>
<p>直接维护矩阵可以让我们以最劣 $O(n^2q)$ 的时间复杂度黯然离场。</p>
<p>考虑这些修改对于当前格子的影响。<br>或者进一步说，我们需要求出来对于我们被询问的格子受到了哪些修改的影响，并将这些修改的影响叠加起来给出一个值。</p>
<p>因为横向是单点推平，我们在进行了一次推平之后，其之前的所有纵向上的区间加对其的影响就可以忽略了。<br>所以我们每次单点推平的时候记录一个时间戳，每一次询问到该点的时候把当前该点处区间加的影响减去时间戳对应的时间该点处区间加的影响，再加上推平的那个值，就是当前点的值了。</p>
<p>题外话：<br>场上以为横向的是区间推平，于是就写了一个线段树上去。<br>后面发现不是区间推平，于是把线段树的区间推平改成了单点推平。<br>然后发现不需要区间查询。<br>那我写个线段树有个啥子用处？<br>果断改成了数组。</p>
<p>然后就是可以随时拿出历史版本的线段树了，也就是可持久化线段树。<br>我们之间学的可持久化线段树是单点修改的，不需要懒标记，也没有pushdown什么的。十分简单。<br>这里我们需要支持区间修改，也就需要支持懒标记了。<br>但此时我们的标记不支持pushdown，因为很可能把后面的标记下放到过去的某个状态中。即使我们pushdown的时候为两个子节点新开两个节点记录状态，最终也会发现任何形式的pushdown都不是正确的。</p>
<p>正确的方式是标记永久化。</p>
<p>我实现的方式是，每一次修改的时候只累加懒标记，查询的时候因为是单点查询，在回溯的时候直接把一路上的懒标记加起来就可以了。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><figcaption><span>位于ChmTree结构体内</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">segadd</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> q = ++idx;</span><br><span class="line">    tr[q] = tr[p];</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[q].tag += k;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)tr[q].ls = <span class="built_in">segadd</span>(tr[p].ls, l, r, k);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)tr[q].rs = <span class="built_in">segadd</span>(tr[p].rs, l, r, k);</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">segsum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l == tr[p].r)<span class="keyword">return</span> tr[p].tag;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid)<span class="keyword">return</span> <span class="built_in">segsum</span>(tr[p].ls, pos) + tr[p].tag;</span><br><span class="line">    <span class="keyword">if</span>(pos &gt; mid)<span class="keyword">return</span> <span class="built_in">segsum</span>(tr[p].rs, pos) + tr[p].tag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就是主席树的其他基本操作了。</p>
<p>总体的代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ChmTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="type">int</span> ls, rs;</span><br><span class="line">        <span class="type">int</span> tag;</span><br><span class="line">    &#125;;</span><br><span class="line">    Node tr[N * <span class="number">64</span>];</span><br><span class="line">    <span class="type">int</span> root[N];</span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = ++idx;</span><br><span class="line">        tr[p] = &#123; l,r,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span>(l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        tr[p].ls = <span class="built_in">build</span>(l, mid);</span><br><span class="line">        tr[p].rs = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">segadd</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> q = ++idx;</span><br><span class="line">        tr[q] = tr[p];</span><br><span class="line">        <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            tr[q].tag += k;</span><br><span class="line">            <span class="keyword">return</span> q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid)tr[q].ls = <span class="built_in">segadd</span>(tr[p].ls, l, r, k);</span><br><span class="line">        <span class="keyword">if</span>(r &gt; mid)tr[q].rs = <span class="built_in">segadd</span>(tr[p].rs, l, r, k);</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">segsum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[p].l == tr[p].r)<span class="keyword">return</span> tr[p].tag;</span><br><span class="line">        <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt;= mid)<span class="keyword">return</span> <span class="built_in">segsum</span>(tr[p].ls, pos) + tr[p].tag;</span><br><span class="line">        <span class="keyword">if</span>(pos &gt; mid)<span class="keyword">return</span> <span class="built_in">segsum</span>(tr[p].rs, pos) + tr[p].tag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">ChmTree col;</span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; row[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    col.root[<span class="number">0</span>] = col.<span class="built_in">build</span>(<span class="number">1</span>, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op, l, r, k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;op, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;k);</span><br><span class="line">            col.root[i] = col.<span class="built_in">segadd</span>(col.root[i - <span class="number">1</span>], l, r, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            row[l] = <span class="built_in">make_pair</span>(r, i);</span><br><span class="line">            col.root[i] = col.root[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            col.root[i] = col.root[i - <span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> sum = col.<span class="built_in">segsum</span>(col.root[i], r);</span><br><span class="line">            sum -= col.<span class="built_in">segsum</span>(col.root[row[l].second], r);</span><br><span class="line">            sum += row[l].first;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>可持久化</tag>
        <tag>可持久化线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>CF102428F Fabricating Sculptures 题解</title>
    <url>/solutions/solution-cf102428f/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Fabricating Sculptures</div>
<div id="problem-info-from">2019-2020 ACM-ICPC Latin American Regional Programming Contest</div>
<div id="problem-info-difficulty">none</div>
<div id="problem-info-color">none</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9neW0vMTAyNDI4L3Byb2JsZW0vRg==">CF Gym 102428 F</span></li></ul></div>

<hr>
<p>题目大意是，给定两个整数 $n$ 和 $m$，我们需要统计出长度为 $n$ 的序列的数量，其中序列满足两个条件：</p>
<ol>
<li>$\sum_{i&#x3D;1}^n a_i &#x3D; m$</li>
<li>$\forall i \in (1,n), a_i \geq \min(a_{i-1},a_{i+1})$</li>
</ol>
<p>形象一点来说，我们不能出现三个相邻的元素按照“高-低-高”的顺序排列。</p>
<p>我们考虑最终得到的序列的大致形状。<br>因为我们上面的约束条件，我们每一行必须是连续的，同时长度必须不小于其下面的那一行。</p>
<p>那么我们考虑对行的状态进行DP，而不是列的状态。<br>那我们可以设一个 $f_{i,j}$，表示当前DP了 $i$ 列，总和为 $j$ 的合法方案数。<br>我们考虑对其进行转移：<br>我们可以枚举一个 $k$，代表当前我们的下一行会在这一行的基础上增加 $k$，可以得到如下的式子：</p>
<p>$$<br>f_{i,j}&#x3D; f_{i,j-i} + \sum_{k&#x3D;1}^{i-1} f_{i-k,j-i} \times (k+1)<br>$$</p>
<p>两种情况分别代表直接把上一行复制过来的情况，此时只有一种可能的排布；还有比上一行多 $k$ 个的情况，此时我们可以枚举多出来的这 $k$ 个分别怎样分布，其中左边填充个数的取值为 $[0,k]$ 范围内的整数，总共有 $k+1$ 种可能性。</p>
<p>这样转移会超时，考虑使用前缀和来优化。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">ll sum[N * <span class="number">2</span>], psum[N];</span><br><span class="line">ll f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    m -= n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            psum[j] = (psum[j] + sum[j]) % mod;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">0</span>)f[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> f[i][j] = psum[j];</span><br><span class="line">            sum[i + j] = (sum[i + j] + f[i][j]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, f[n][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>分类讨论</tag>
      </tags>
  </entry>
  <entry>
    <title>CF102428J Jumping Grasshoper 题解</title>
    <url>/solutions/solution-cf102428j/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Jumping Grasshoper</div>
<div id="problem-info-from">2019-2020 ACM-ICPC Latin American Regional Programming Contest</div>
<div id="problem-info-difficulty">none</div>
<div id="problem-info-color">none</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9neW0vMTAyNDI4L3Byb2JsZW0vSg==">CF Gym 102428 J</span></li></ul></div>

<hr>
<p>题目大意是，我们需要维护一个数列，支持对其进行修改和查询。<br>修改就是正常的单点修改，查询的话就有点不一样。<br>每一次查询的时候，我们会指定一个开始的位置和开始的方向。每一轮，我们向指定的方向找到第一个比当前位置高的地方，跳到那里，并将方向变为当前方向相反的那一个方向。<br>如果当前方向没有找到能够跳到的地方，那就停下。我们需要找到最后会停在哪里，并输出之。<br>题目保证每一时刻都没有两个高度是相同的。</p>
<p>我们设当前的这个位置为 $p$。</p>
<p>首先我们可以猜测，这个停下的位置一定会是起点左右的某一个最大值。<br>因为我们每一次查询的过程一定是在反复在起点的两侧跳跃。</p>
<p>为了分析方便，我们把这两个值的下标都取出来，分别称作 $maxl$ 和 $maxr$。</p>
<p>然后我们开始分类讨论：</p>
<p>首先要考虑到的一种情况就是当前的位置已经是哪里都不能去了，即 $a_{maxl} &lt; a_p$ 且 $a_{maxr} &lt; a_p$。<br>那就直接输出 $p$ 就好了。</p>
<p>然后是两种次级情况。</p>
<p>一是左边没有比当前高的，但是右边有；二是右边没有比当前高的，但是左边有。</p>
<p>这两种情况的决策与开始时的方向有关，这里只拿第一种情况做例子。</p>
<p>如果开始时的方向是向左，那我们跳一次之后方向就会变成向右。<br>我们设这个位置是 $minl$。<br>因为有 $a_p &gt; a_{maxr}$，所以有 $a_{minl} &gt; a_{maxr}$，这就意味着我们需要在 $minl$ 停下。</p>
<p>如果开始时的方向是向右，因为右边已经没有比当前高的地方了，直接停下就可以了。</p>
<p>另一种情况类似。</p>
<p>然后就是最后一种情况了，两者都比当前要高。</p>
<p>因为我们一直跳的话迟早会落在 $maxl$ 或 $maxr$ 两者之一上面，只需要判断两者大小关系即可。<br>因为我们已经确定了这两个位置是跳了一段时间之后再到达的，那么落在 $maxl$ 位置上的时候肯定是向右，因为其肯定是从右面向左跳过去的；落在 $maxr$ 的位置同理。</p>
<p>那么如果 $a_{maxl} &lt; a_{maxr}$，那么我们最终会从 $maxl$ 出发向右跳到 $p$ 右面第一个大于 $a_{maxl}$ 的位置，另一种情况同理。</p>
<p>回头看一眼我们的讨论，可以发现已经覆盖了所有的情况了。</p>
<p>那么我们需要找到一种算法，可以支持单点修改、区间查询最大值和区间查询大于（等于）某一个数的最靠左（或右）的位置。</p>
<p>我们可以选择线段树和线段树上二分来解决。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> maxn;</span><br><span class="line">&#125;;</span><br><span class="line">SegTree tr[N &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].maxn = <span class="built_in">max</span>(tr[p &lt;&lt; <span class="number">1</span>].maxn, tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].maxn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].l = l, tr[p].r = r;</span><br><span class="line">    tr[p].maxn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].maxn = a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">segchg</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pos, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l == tr[p].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].maxn = k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid)<span class="built_in">segchg</span>(p &lt;&lt; <span class="number">1</span>, pos, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pos &gt; mid)<span class="built_in">segchg</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, pos, k);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">segmax</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)<span class="keyword">return</span> tr[p].maxn;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)res = <span class="built_in">max</span>(res, <span class="built_in">segmax</span>(p &lt;&lt; <span class="number">1</span>, l, r));</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)res = <span class="built_in">max</span>(res, <span class="built_in">segmax</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getposl</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].maxn &lt;= k)<span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l == tr[p].r)<span class="keyword">return</span> tr[p].l;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[p &lt;&lt; <span class="number">1</span>].maxn &lt;= k)<span class="keyword">return</span> <span class="built_in">getposl</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">getposl</span>(p &lt;&lt; <span class="number">1</span>, l, r, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> res = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)res = <span class="built_in">min</span>(res, <span class="built_in">getposl</span>(p &lt;&lt; <span class="number">1</span>, l, r, k));</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)res = <span class="built_in">min</span>(res, <span class="built_in">getposl</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getposr</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].maxn &lt;= k)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l == tr[p].r)<span class="keyword">return</span> tr[p].l;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].maxn &lt;= k)<span class="keyword">return</span> <span class="built_in">getposr</span>(p &lt;&lt; <span class="number">1</span>, l, r, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">getposr</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)res = <span class="built_in">max</span>(res, <span class="built_in">getposr</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k));</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)res = <span class="built_in">max</span>(res, <span class="built_in">getposr</span>(p &lt;&lt; <span class="number">1</span>, l, r, k));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="type">int</span> p, k;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="string">&quot;U&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;p, &amp;k);</span><br><span class="line">            <span class="built_in">segchg</span>(<span class="number">1</span>, p, k);</span><br><span class="line">            a[p] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">bool</span> flag = (s == <span class="string">&quot;R&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p);</span><br><span class="line">            <span class="type">int</span> maxr = <span class="built_in">segmax</span>(<span class="number">1</span>, p + <span class="number">1</span>, n);</span><br><span class="line">            <span class="type">int</span> maxl = <span class="built_in">segmax</span>(<span class="number">1</span>, <span class="number">1</span>, p - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(maxl &lt; a[p] &amp;&amp; maxr &lt; a[p])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(maxl &gt; a[p] &amp;&amp; maxr &lt; a[p])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">getposr</span>(<span class="number">1</span>, <span class="number">1</span>, p - <span class="number">1</span>, a[p]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(maxr &gt; a[p] &amp;&amp; maxl &lt; a[p])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!flag)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">getposl</span>(<span class="number">1</span>, p + <span class="number">1</span>, n, a[p]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(maxl &lt; maxr)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">getposl</span>(<span class="number">1</span>, p + <span class="number">1</span>, n, maxl));</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">getposr</span>(<span class="number">1</span>, <span class="number">1</span>, p - <span class="number">1</span>, maxr));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>分类讨论</tag>
      </tags>
  </entry>
  <entry>
    <title>CF102452E Erasing Numbers 题解</title>
    <url>/solutions/solution-cf102452e/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Erasing Numbers</div>
<div id="problem-info-from">2019-2020 ICPC Asia Hong Kong Regional Contest</div>
<div id="problem-info-difficulty">none</div>
<div id="problem-info-color">none</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9neW0vMTAyNDUyL3Byb2JsZW0vRQ==">CF Gym 102452 E</span></li></ul></div>

<hr>
<p>题目大意是，给定我们一个序列，我们每次可以选择相邻的三个数，去掉一个最高分，去掉一个最低分，留下三个数中的中位数，操作之后产生的空位会被左右的元素填充。<br>我们需要对于序列中的每一个数，判断其是否能够在若干次操作之后留下来。</p>
<p>考虑对于每一个数，设其为 $x$，我们将小于其的数字设为 $0$，大于其的数字设为 $1$，可以发现这样是不会对最终结果产生影响的。</p>
<p>那我们考虑我们三消之后会留下什么：</p>
<table>
<thead>
<tr>
<th align="center">原序列</th>
<th align="center">剩下的数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">000</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">001</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">010</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">011</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">100</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">101</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">110</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">111</td>
<td align="center">1</td>
</tr>
</tbody></table>
<p>可以发现消除的结果只跟数字的个数有关。<br>简要总结就是，三个 $0$ 会变成 $0$，三个 $1$ 会变成 $1$，剩下的情况就会消去一对 $0$ 和 $1$。</p>
<p>那么我们执行这个策略，能消除则消除，最后只会剩下如下的几种情况：</p>
<ol>
<li>空</li>
<li>$0$</li>
<li>$1$</li>
<li>$00$</li>
<li>$11$</li>
</ol>
<p>然后对两侧分类讨论即可。</p>
<p>时间复杂度 $O(n^2)$，可以通过。</p>
<p>但是实际上实现的时候需要麻烦一点，采用不同的策略。</p>
<p>具体来说，因为成对的 $0$ 和 $1$ 对答案是没有影响的，我们就可以考虑把 $0$ 和 $1$ 的数量消到尽量相同。</p>
<p>我们统计出来较多的那一个数字，忽略成对的 $0$ 和 $1$，然后逮住三个连续的该数字就消除，直到两者差最小为止。</p>
<p>这个差值是全局统计的，但是我们消除的时候只能对左右两边分别做。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chq</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> les = <span class="number">0</span>, gre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[x] == <span class="number">1</span> || a[x] == n)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == x)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt; a[x])</span><br><span class="line">        &#123;</span><br><span class="line">            gre++;</span><br><span class="line">            b[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            les++;</span><br><span class="line">            b[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>, c = <span class="number">0</span>, del;</span><br><span class="line">    <span class="keyword">if</span>(les &lt; gre)c = <span class="number">1</span>;</span><br><span class="line">    del = <span class="built_in">abs</span>(les - gre);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; x; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i] == c)sum++;</span><br><span class="line">        <span class="keyword">else</span> sum = <span class="built_in">max</span>(sum - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">3</span>)</span><br><span class="line">            sum = <span class="number">1</span>, del -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i] == c)sum++;</span><br><span class="line">        <span class="keyword">else</span> sum = <span class="built_in">max</span>(sum - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">3</span>)</span><br><span class="line">            sum = <span class="number">1</span>, del -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> del &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">chq</span>(i))<span class="built_in">putchar</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>分类讨论</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1288F Red-Blue Graph 题解</title>
    <url>/solutions/solution-cf1288f/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Red-Blue Graph</div>
<div id="problem-info-from">Educational Codeforces Round 80</div>
<div id="problem-info-difficulty">NOI / NOI+ / CTSC</div>
<div id="problem-info-color">#0e1d69</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vQ0YxMjg4Rg==">Luogu CF1288F</span></li><li><span class="exturl" data-url="aHR0cDovL2NvZGVmb3JjZXMuY29tL3Byb2JsZW1zZXQvcHJvYmxlbS8xMjg4L0Y=">CF 1288 F</span></li></ul></div>

<hr>
<p>不知道怎么就有思路了（</p>
<p>首先看数据范围，$1 \leq n,m \leq 200$，应该是给网络流的复杂度。</p>
<p>对于一个红色的点，我们将其连接着的边中颜色不同的边一对对地消除了之后还剩一些红边，对于蓝点这样消除之后还剩一些蓝边。<br>那么红点应该对于红边有贡献，蓝点应该对于蓝边有贡献。</p>
<p>把这个绑定到流上面，就可以认为红点有流出，蓝点有流入，而没有颜色的点既可以流出也可以流入。而红边从左往右，蓝边从右往左，没有染色的边不走，所以既不往左也不往右。<br>我们需要保证这个“不少于”，那么二分图的点连向源（汇）点的边就有了下界，需要使用有源汇上下界最小费用可行流。<br>其实现思路与有源汇上下界可行流是一样的，同时也需要将bfs函数改为spfa来实现费用流。</p>
<hr>
<p>具体实现的时候，我们将每一个原图中的边拆成两条边，一条红，一条蓝，容量为 $[0,1]$。<br>对于每一个点，如果其是红色点，那么连接源点，容量为 $[1,\infty]$；如果其是蓝色点，那么连接汇点，容量为 $[1,\infty]$；如果其没有颜色，那么其既连接源点，又连接汇点，容量都是 $[0,\infty]$。</p>
<p>然后就直接跑就可以了。</p>
<p>参考代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>, M = <span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> m, n1, n2;</span><br><span class="line"><span class="type">int</span> S, T, s, t;</span><br><span class="line"><span class="type">int</span> R, B;</span><br><span class="line"><span class="type">int</span> h[N], e[M], f[M], w[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> A[N], tot;</span><br><span class="line"><span class="type">int</span> q[N], d[N], pre[N], incf[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A[a] -= l, A[b] += l;</span><br><span class="line">    e[idx] = b, f[idx] = r - l, w[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">    e[idx] = a, f[idx] = <span class="number">0</span>, w[idx] = -c, ne[idx] = h[b], h[b] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    <span class="built_in">memset</span>(incf, <span class="number">0</span>, <span class="built_in">sizeof</span>(incf));</span><br><span class="line">    q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, incf[S] = INF;</span><br><span class="line">    <span class="keyword">while</span>(hh != tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh++];</span><br><span class="line">        <span class="keyword">if</span>(hh == N) hh = <span class="number">0</span>;</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span>(f[i] &amp;&amp; d[v] &gt; d[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[v] = d[t] + w[i];</span><br><span class="line">                pre[v] = i;</span><br><span class="line">                incf[v] = <span class="built_in">min</span>(f[i], incf[t]);</span><br><span class="line">                <span class="keyword">if</span>(!st[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[tt++] = v;</span><br><span class="line">                    <span class="keyword">if</span>(tt == N) tt = <span class="number">0</span>;</span><br><span class="line">                    st[v] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> incf[T] &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EK</span><span class="params">(<span class="type">int</span> &amp;flow, <span class="type">int</span> &amp;cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flow = cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">spfa</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = incf[T];</span><br><span class="line">        flow += t, cost += t * d[T];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = T; i != S; i = e[pre[i] ^ <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            f[pre[i]] -= t;</span><br><span class="line">            f[pre[i] ^ <span class="number">1</span>] += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>, &amp;n1, &amp;n2, &amp;m, &amp;R, &amp;B);</span><br><span class="line">    s = <span class="number">0</span>, t = n1 + n2 + <span class="number">1</span>;</span><br><span class="line">    S = n1 + n2 + <span class="number">2</span>, T = n1 + n2 + <span class="number">3</span>;</span><br><span class="line">    string lc, rc;</span><br><span class="line">    cin &gt;&gt; lc &gt;&gt; rc;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a, b + n1, <span class="number">0</span>, <span class="number">1</span>, R);</span><br><span class="line">        <span class="built_in">add</span>(b + n1, a, <span class="number">0</span>, <span class="number">1</span>, B);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(lc[i - <span class="number">1</span>] == <span class="string">&#x27;R&#x27;</span>)<span class="built_in">add</span>(s, i, <span class="number">1</span>, INF, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(lc[i - <span class="number">1</span>] == <span class="string">&#x27;B&#x27;</span>)<span class="built_in">add</span>(i, t, <span class="number">1</span>, INF, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(lc[i - <span class="number">1</span>] == <span class="string">&#x27;U&#x27;</span>)<span class="built_in">add</span>(s, i, <span class="number">0</span>, INF, <span class="number">0</span>), <span class="built_in">add</span>(i, t, <span class="number">0</span>, INF, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(rc[i - <span class="number">1</span>] == <span class="string">&#x27;R&#x27;</span>)<span class="built_in">add</span>(i + n1, t, <span class="number">1</span>, INF, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(rc[i - <span class="number">1</span>] == <span class="string">&#x27;B&#x27;</span>)<span class="built_in">add</span>(s, i + n1, <span class="number">1</span>, INF, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(rc[i - <span class="number">1</span>] == <span class="string">&#x27;U&#x27;</span>)<span class="built_in">add</span>(s, i + n1, <span class="number">0</span>, INF, <span class="number">0</span>), <span class="built_in">add</span>(i + n1, t, <span class="number">0</span>, INF, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add</span>(t, s, <span class="number">0</span>, INF, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = s; i &lt;= t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] &gt; <span class="number">0</span>)tot += A[i], <span class="built_in">add</span>(S, i, <span class="number">0</span>, A[i], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(A[i] &lt; <span class="number">0</span>)<span class="built_in">add</span>(i, T, <span class="number">0</span>, -A[i], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> flow, cost;</span><br><span class="line">    <span class="built_in">EK</span>(flow, cost);</span><br><span class="line">    <span class="keyword">if</span>(flow != tot)<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cost);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m * <span class="number">4</span>; i += <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!f[i])<span class="built_in">putchar</span>(<span class="string">&#x27;R&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!f[i + <span class="number">2</span>])<span class="built_in">putchar</span>(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">&#x27;U&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>CF103861L Fenwick Tree 题解</title>
    <url>/solutions/solution-cf103861l/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Fenwick Tree</div>
<div id="problem-info-from">2021 ICPC Asia East Continent Final</div>
<div id="problem-info-difficulty">none</div>
<div id="problem-info-color">none</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9neW0vMTAzODYxL3Byb2JsZW0vTA==">CF Gym 103861 L</span></li></ul></div>

<hr>
<p>题目大意是，给定我们一个树状数组，我们只知道每一个位置上是否为 $0$，我们需要求出可能的最小操作次数使得一个全零的树状数组在经过这些次数的操作之后各位置上元素的状态符合题目给定的状态。<br>操作的数字和树状数组内的数字都可以是任意实数。</p>
<p>首先我们按照树状数组更新的顺序建立一片森林，可以发现在某一个节点更新之后会影响到的是其到根的一条链。<br>同时，这样也确保了一个位置只能被其子树内的位置上的修改影响。<br>那我们考虑在这个树上进行DP。</p>
<p>首先，我们可以确定，一个位置上如果非零的话，其一定需要子树内的至少一次操作。</p>
<p>然后我们考虑当前位置怎么从子树中转移。</p>
<p>枚举每一个儿子的时候，我们对当前位置在完成转移后将要成为的颜色进行分类讨论。</p>
<p>如果当前位置是零，那么要求要么其之前为零且儿子为零，要么其之前非零且儿子非零。<br>如果当前位置非零，那么要求要么其之前为零且儿子非零，要么其本身为零而儿子随便。</p>
<p>具体式子如下：</p>
<p>$$<br>\begin{align}<br>f_{u,0}&amp;&#x3D;\min(f_{u,0}+f_{v,0},f_{u,1},f_{v,1}) \\<br>f_{u,1}&amp;&#x3D;\min(f_{u,0}+f_{v_1},f_{u,1}+f_{v,0},f_{u,1}+f_{v,1})<br>\end{align}<br>$$</p>
<p>因为我们只知道最终的状态，操作中间的状态是不可预知的，所以我们只能在最终转移完之后，考虑其节点最终的颜色，选取对应的DP值继续向上转移。</p>
<p>最后统计每一棵树的根节点的DP值即可。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x)&amp;(-(x))</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> tag[N];</span><br><span class="line">ll f[N][<span class="number">2</span>];</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[p][<span class="number">0</span>] = <span class="number">0</span>, f[p][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="built_in">dfs</span>(j, p);</span><br><span class="line">        <span class="type">int</span> tmp0 = INT_MAX, tmp1 = INT_MAX;</span><br><span class="line">        tmp0 = <span class="built_in">min</span>(f[p][<span class="number">0</span>] + f[j][<span class="number">0</span>], f[p][<span class="number">1</span>] + f[j][<span class="number">1</span>]);</span><br><span class="line">        tmp1 = <span class="built_in">min</span>(<span class="built_in">min</span>(f[p][<span class="number">0</span>] + f[j][<span class="number">1</span>], f[p][<span class="number">1</span>] + f[j][<span class="number">0</span>]), f[p][<span class="number">1</span>] + f[j][<span class="number">1</span>]);</span><br><span class="line">        f[p][<span class="number">0</span>] = tmp0, f[p][<span class="number">1</span>] = tmp1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tag[p])f[p][<span class="number">0</span>] = INT_MAX;</span><br><span class="line">    <span class="keyword">else</span> f[p][<span class="number">1</span>] = INT_MAX;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        h[i] = <span class="number">-1</span>;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        tag[i] = s[i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = i + <span class="built_in">lowbit</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(k &gt; n)v.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">add</span>(i, k), <span class="built_in">add</span>(k, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(i, <span class="number">0</span>);</span><br><span class="line">        ans += <span class="built_in">min</span>(f[i][<span class="number">0</span>], f[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>分类讨论</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1530E Minimax 题解</title>
    <url>/solutions/solution-cf1530e/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Minimax</div>
<div id="problem-info-from">Codeforces Round #733 (Div. 1 + Div. 2)</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vQ0YxNTMwRQ==">Luogu CF1530E</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9wcm9ibGVtc2V0L3Byb2JsZW0vMTUzMC9F">CF 1530 E</span></li></ul></div>

<hr>
<p>题目大意是，给定我们一个字符串，我们需要对其进行重排，使得对重排后的字符串跑一遍KMP得到的next数组的最大值最小。如果有多种答案可以使得这个最大值最小，我们需要给出字典序最小的那一个。</p>
<p>大分类讨论中构造题。</p>
<p>首先我们考虑，如何才能让我们得到的next数组最小？<br>换句话说，我们如何才能让前缀和后缀尽量不匹配？</p>
<p>首先，如果全局只有一种字符，那么我们肯定是无能为力的。<br>否则我们可以把这个最大值限定在 $1$ 以内。</p>
<p>首先，如果有至少一种字符只出现了一次，我们可以将其中最小的那一个放到开头，剩下的部分排序之后接到后面即可，因为没有任何其他的子串可以和开头的这一个前缀匹配，next数组最大就是 $0$，同时我们做到了字典序最小。</p>
<p>剩下就是所有的字符都出现了两次及以上的情况了。</p>
<p>我们将这些字符按照从小到大的顺序分别重编号为 $a$、$b$、$c$ 等。<br>后面再说的时候就是按照新的编号了。</p>
<p>为了使得字典序最小，我们肯定是要把 $a$ 拿到串的开头的，然后让其他的后缀与 $a$ 匹配。</p>
<p>观察给的样例的第二个字符串，这给了我们一个关于做法的提示。</p>
<p>如果不是 $a$ 的字符数量足够，我们可以在开头再放一个 $a$，然后在后面交替填充一个非 $a$ 的字符和一个 $a$，直到 $a$ 用完，最后把剩下的部分都填充上非 $a$ 字符就可以了。<br>同时为了字典序最小，我们在填充非 $a$ 字符的时候需要先排序再填充。<br>这个方案阻止了连续的 $a$ 匹配上开头的两个 $a$，同时也阻止了后面的 $a$ 与一个非 $a$ 字符组合起来匹配上开头的两个字符，可以把最大值压缩到 $1$ 以内。</p>
<p>如果非 $a$ 字符数量不够呢？<br>我们这时候肯定不能再在前面放两个 $a$ 了。</p>
<p>我们可以想到把前面的 $aa$ 替换成 $ab$，以防止多余的 $a$ 与 $aa$ 匹配。<br>然后为了字典序最小，我们把剩下的 $a$ 都追加在后面。</p>
<p>我们这样做的同时还需要防止 $ab$ 被匹配。<br>一个简单的方法就是在一串 $a$ 后面放一个 $c$，阻止可能的 $ab$ 的出现。</p>
<p>如果找不到 $c$ 呢？</p>
<p>我们就换种思路，把字符串构造成 $abbb \dots bbaa \dots aa$ 的形式。</p>
<p>否则，我们就按照上面的思路，构造形如 $abaa \dots aacbb \dots$ 的字符串。</p>
<p>此时回顾我们的分类讨论，可以发现我们分的这几类已经可以覆盖所有的情况了。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">26</span>], tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cnt[s[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">        <span class="keyword">if</span>(cnt[i])tot++;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[i] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag != <span class="number">-1</span>)</span><br><span class="line">    &#123;<span class="comment">//有只出现过一次的字符</span></span><br><span class="line">        string res;</span><br><span class="line">        res.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + flag);</span><br><span class="line">        cnt[flag]--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">            <span class="keyword">while</span>(cnt[i]--)</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + i);</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tot == <span class="number">1</span>)</span><br><span class="line">    &#123;<span class="comment">//只有一种字符</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        string res;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">            <span class="keyword">if</span>(cnt[i])</span><br><span class="line">                v.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(n - cnt[v[<span class="number">0</span>]] &gt;= cnt[v[<span class="number">0</span>]] - <span class="number">2</span>)</span><br><span class="line">        &#123;<span class="comment">//非a字符数量足够</span></span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + v[<span class="number">0</span>]);</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + v[<span class="number">0</span>]);</span><br><span class="line">            cnt[v[<span class="number">0</span>]] -= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = v[<span class="number">1</span>]; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(cnt[i]--)</span><br><span class="line">                &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + i);</span><br><span class="line">                    <span class="keyword">if</span>(cnt[v[<span class="number">0</span>]])</span><br><span class="line">                    &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + v[<span class="number">0</span>]);</span><br><span class="line">                        cnt[v[<span class="number">0</span>]]--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tot == <span class="number">2</span>)</span><br><span class="line">        &#123;<span class="comment">//只有两种字符</span></span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + v[<span class="number">0</span>]);</span><br><span class="line">            cnt[v[<span class="number">0</span>]]--;</span><br><span class="line">            <span class="keyword">while</span>(cnt[v[<span class="number">1</span>]]--)</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + v[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">while</span>(cnt[v[<span class="number">0</span>]]--)</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + v[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;<span class="comment">//可以找到c的情况</span></span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + v[<span class="number">0</span>]);</span><br><span class="line">            cnt[v[<span class="number">0</span>]]--;</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + v[<span class="number">1</span>]);</span><br><span class="line">            cnt[v[<span class="number">1</span>]]--;</span><br><span class="line">            <span class="keyword">while</span>(cnt[v[<span class="number">0</span>]]--)</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + v[<span class="number">0</span>]);</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + v[<span class="number">2</span>]);</span><br><span class="line">            cnt[v[<span class="number">2</span>]]--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = v[<span class="number">1</span>]; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">                <span class="keyword">while</span>(cnt[i]--)</span><br><span class="line">                    res.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">            cnt[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>分类讨论</tag>
        <tag>贪心</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>CF436E Cardboard Box 题解</title>
    <url>/solutions/solution-cf436e/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Cardboard Box</div>
<div id="problem-info-from">Zepto Code Rush 2014</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vQ0Y0MzZF">Luogu CF436E</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9wcm9ibGVtc2V0L3Byb2JsZW0vNDM2L0U=">CF 436 E</span></li></ul></div>

<hr>
<p>题目说，我们可以花费 $a_i$ 的代价拿到1分，或者可以花费 $b_i$ 的代价拿到两分。我们需要求出得到 $k$ 分的代价和方案。</p>
<p>一眼反悔贪心问题，但是做法却不是那么显然。</p>
<p>一个根据之前反悔贪心能得出的做法就是，把 $a_i$ 扔进一个小根堆里面，然后选中了一个 $a_i$ 之后就将其所对应的 $b_i - a_i$ 扔进小根堆里面，取 $k$ 次堆顶。</p>
<p>但是有一种情况就是，有可能你取 $b_j$ 更优，但是 $a_j$ 没能取到导致 $b_j$ 也取不到。</p>
<p>我们就可以分开考虑，将所有的 $a_i$ 加入一个小根堆，之后将所有的 $b_i - a_i$ 加入另一个小根堆，再拿一个数组记录下哪些已经被选中了，然后每一次取的时候权衡一下到底是取 $a_i$ 最好还是取 $b_i$ 最好。</p>
<p>每一次决策的时候都需要将已经选过了的全部清掉，防止选到重复的。</p>
<p>参考代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> st[N];</span><br><span class="line">ll a[M];</span><br><span class="line"><span class="type">bool</span> vis[M];</span><br><span class="line">ll sum;</span><br><span class="line">priority_queue&lt;pair&lt;ll, <span class="type">int</span>&gt; &gt;q, t;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dump</span><span class="params">(priority_queue&lt;pair&lt;ll, <span class="type">int</span>&gt; &gt; &amp;q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>() &amp;&amp; vis[q.<span class="built_in">top</span>().second])q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a[i], &amp;a[i + n]);</span><br><span class="line">        a[i + n] -= a[i];</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-a[i], i));</span><br><span class="line">        t.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-a[i] - a[i + n], i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dump</span>(q), <span class="built_in">dump</span>(t);</span><br><span class="line">        <span class="type">int</span> i = q.<span class="built_in">top</span>().second;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">dump</span>(q);</span><br><span class="line">        <span class="keyword">if</span>(m &amp;&amp; !t.<span class="built_in">empty</span>() &amp;&amp; a[i] - q.<span class="built_in">top</span>().first &gt;= -t.<span class="built_in">top</span>().first)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-a[i], i));</span><br><span class="line">            i = t.<span class="built_in">top</span>().second;</span><br><span class="line">            t.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; n)q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-a[i + n], i + n));</span><br><span class="line">        sum += a[i];</span><br><span class="line">        st[i % n]++;</span><br><span class="line">        vis[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, st[i]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>反悔贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>CF920F SUM and REPLACE 题解</title>
    <url>/solutions/solution-cf920f/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">SUM and REPLACE</div>
<div id="problem-info-from">Educational Codeforces Round 37</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vQ0Y5MjBG">Luogu CF920F</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9wcm9ibGVtc2V0L3Byb2JsZW0vOTIwL0Y=">CF 920 F</span></li></ul></div>

<hr>
<p>我们可以注意到，当 $x \leq 2$ 的时候， $\operatorname{d}(x)$ 就与 $x$ 相等了。<br>之后不管再怎么修改，我们这些 $x \leq 2$ 的位置都保持不变。</p>
<p>那么我们可以利用这样一个性质，来减少我们修改的次数。</p>
<p>因为我们遇到这些不需要修改的点就可以直接跳过，那我们可以通过一种方式来动态地维护出来当前点及后面的第一个需要修改的点。</p>
<p>我们可以使用并查集来维护。</p>
<p>听起来貌似是很突兀，但是我们可以发现使用并查集来维护刚好特别适合。</p>
<p>开始的时候每一个点都可能可以被修改，所以初始状态是整个区间都没有「联通」。<br>随着修改的逐渐发生，我们可以修改的点不断减少，区间的「连通性」也不断增大。</p>
<p>具体实现的时候，我们每一个不能修改的点都向其下一个点连边，这样我们在访问到一个不能修改的点的时候就直接跳到第一个能够修改的点进行修改。</p>
<p>至于询问的话我们直接用树状数组进行维护就可以了。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line">ll tr[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">segadd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        tr[i] += c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">segsum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        res += tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x)p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt;= <span class="number">1000000</span>; j += i)</span><br><span class="line">            d[j]++;<span class="comment">//预处理因数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="built_in">segadd</span>(i, a[i]);</span><br><span class="line">        p[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    p[n + <span class="number">1</span>] = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op, l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;op, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r;)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">segadd</span>(i, d[a[i]] - a[i]);</span><br><span class="line">                a[i] = d[a[i]];</span><br><span class="line">                <span class="keyword">if</span>(a[i] &lt;= <span class="number">2</span>)p[i] = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="built_in">find</span>(i))i++;</span><br><span class="line">                <span class="keyword">else</span> i = p[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">segsum</span>(r) - <span class="built_in">segsum</span>(l - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>CF949C Data Center Maintenance 题解</title>
    <url>/solutions/solution-cf949c/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Data Center Maintenance</div>
<div id="problem-info-from">Codeforces Round #469 (Div. 1)</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vQ0Y5NDlD">Luogu CF949C</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9wcm9ibGVtc2V0L3Byb2JsZW0vOTQ5L0M=">CF 949 C</span></li></ul></div>

<hr>
<p>题目要求我们一天中的任何时候都可以下载到所有文件，这就需要我们存储同一份文件的两台服务器不能同时维护。</p>
<p>因为我们想要把某一个服务器的维护天窗强制向后推一个小时，那么我们就可以将这个时间的冲突转化为同余式 $x_u + 1 \equiv x_v \pmod{h}$。</p>
<p>通过上面的说明，我们还可以发现我们这个强制向后推的关系不是双向的，因为 $x_u + 1 \equiv x_v \pmod{h}$ 绝对不会使得 $x_v + 1$ 也 $\equiv x_u \pmod{h}$。</p>
<p>那我们就可以建立单向边，然后跑tarjan求出强连通分量并缩点。<br>因为强连通分量里面的每一个点都可以到达其他点，那么一旦这个点推迟了，其他所有点都需要推迟。</p>
<p>我们需要最小化需要推迟天窗的服务器数量，也就是需要最小化一个点能够到达的点的数量。<br>我们并不需要大费周章地统计出来缩点后每一个点能够到达的点的数量（当然这个数量是原图中点的数量），因为该图远没有那么稠密，只需要找到出度为0的点中最小的任意一个并输出之即可。<br>至少数据全都造成了这样，如果图稠密一点的话可能就需要统计出来每一个点能够到达的点集了。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = <span class="number">400010</span>;</span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> mnt[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> low[N], dfn[N], cnt;</span><br><span class="line"><span class="type">int</span> sta[N], tt;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> scc[N], sz[N], sc;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    low[p] = dfn[p] = ++cnt;</span><br><span class="line">    sta[++tt] = p, vis[p] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j);</span><br><span class="line">            low[p] = <span class="built_in">min</span>(low[p], low[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[j])</span><br><span class="line">        &#123;</span><br><span class="line">            low[p] = <span class="built_in">min</span>(low[p], dfn[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[p] == low[p])</span><br><span class="line">    &#123;</span><br><span class="line">        ++sc;</span><br><span class="line">        <span class="keyword">while</span>(sta[tt] != p)</span><br><span class="line">        &#123;</span><br><span class="line">            scc[sta[tt]] = sc;</span><br><span class="line">            sz[sc]++;</span><br><span class="line">            vis[sta[tt]] = <span class="literal">false</span>;</span><br><span class="line">            tt--;</span><br><span class="line">        &#125;</span><br><span class="line">        scc[sta[tt]] = sc;</span><br><span class="line">        sz[sc]++;</span><br><span class="line">        vis[sta[tt]] = <span class="literal">false</span>;</span><br><span class="line">        tt--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> oud[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;mnt[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span>((mnt[u] + <span class="number">1</span>) % k == mnt[v] % k)<span class="built_in">add</span>(u, v);</span><br><span class="line">        <span class="keyword">if</span>((mnt[v] + <span class="number">1</span>) % k == mnt[u] % k)<span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])<span class="built_in">tarjan</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = scc[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = h[i]; ~j; j = ne[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = scc[e[j]];</span><br><span class="line">            <span class="keyword">if</span>(u != v)oud[u]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    sz[<span class="number">0</span>] = <span class="number">998244353</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(oud[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = (sz[ans] &gt; sz[i]) ? i : ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sz[ans]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(scc[i] == ans)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>建图</tag>
        <tag>图的连通性</tag>
      </tags>
  </entry>
  <entry>
    <title>LibreOJ #2759 蜜袋鼯（フクロモモンガ） 题解</title>
    <url>/solutions/solution-l2759/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name"><ruby>蜜袋鼯<rt>フクロモモンガ</rt></ruby></div>
<div id="problem-info-from">JOI 2014 Final T4</div>
<div id="problem-info-difficulty">none</div>
<div id="problem-info-color">#0e1d69</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yNzU5">LibreOJ #2759</span></li></ul></div>

<hr>
<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>首先我们考虑一下我们的策略。</p>
<p>无论给出何种方案，我们都需要遵守一个原则：非必要不爬升，且爬升时只爬升至足够飞过去的高度即可。</p>
<h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>对于前半句，我们这样分析：</p>
<p>我们假设可以突破高度只能大于等于0的限制。</p>
<p>那我们就可以持续进行飞行操作，直到到达终点再向上爬到树顶。</p>
<p>也就是说，我们将我们的操作从一系列的“飞跃-爬升”操作变成了一串连续的飞跃操作和一个爬升操作。</p>
<p>显然，只要我们选择的路径一定，我们最后爬升的路程一定是一定的。<br>我们不妨设其为 $h$ 。</p>
<p>如果我们在这种情况下，选择在中间进行一次爬升操作，假设我们爬升的高度为 $h’$ 。<br>那么，我们到达最后的高度就是$H_N - h + h’$。</p>
<p>然而，我们总共还是爬升了 $h-h’+h’&#x3D;h$ 的高度，总共爬升操作所用的时间也是不变的。</p>
<p>更何况我们还会遇到到一棵树正上方时高度大于树高的时候，这时候我们就只能降低高度，而在最后多的时间来爬升刚才降低的那一段距离。<br>这会导致如果我们瞎爬升的话，结果会劣于非必要不爬升的结果。</p>
<p>那么对于后半句，我们这样分析：</p>
<p>假设一种极限情况，一路上的树一棵比一棵矮，且每一次从树顶开始飞行都会飞跃目标树。<br>那么如果我们选择爬升的高度太多，就会导致爬升高度的浪费。</p>
<p>我们完全可以选择一种极端的情况，那么就是让我们的高度保持为0即可。<br>我们在每次飞跃一条边（假设其为 $(u,v)$ ）时，我们如果之前已经保持了高度为0的话，我们就只需爬升 $w_{(u,v)}$ 的高度即可，即到达 $v$ 点时高度仍然为零。而如果我们仍有高度$x$的话，我们就爬升 <code>(x-w[(u,v)]&gt;=0)?0:(w[(u,v)]-x)</code> 即可。<br>如果按照这样操作的话，我们只会在达到高度为0之前的时候才可能下降高度以适配较低的树高，最终得到的就是最优的结果。</p>
<hr>
<p>之后对每一条边进行分析。</p>
<p>对于每一条边 $(u,v)$ ，会有以下四种情况：</p>
<ol>
<li>到达点正上方时的高度大于树高。<br>需要先向下爬到高度为 $h_v + w_{(u,v)}$ 的点才能从该边飞过，可以证明这是最优选择。</li>
<li>在飞行途中不得不落地。<br>我们无论如何都无法通过这一条边，只能在向有向图中加边时忽略这一条边。</li>
<li>不向上爬无法正常飞到下一个点。<br>根据上面的证明，我们只需向上爬升至高度 $w_{(u,v)}$ ，保证尽量靠近地面。</li>
<li>可以正常飞到下一个点。<br>直接飞跃即可。</li>
</ol>
<p>这样这个问题就变成了一个最短路问题。<br>而对于最短路的寻找，我们采用dijkstra算法。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">300005</span>;</span><br><span class="line"><span class="type">int</span> h[N], ne[M &lt;&lt; <span class="number">1</span>], e[M &lt;&lt; <span class="number">1</span>], w[M &lt;&lt; <span class="number">1</span>], idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> val[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">ll sum[N];</span><br><span class="line"><span class="type">int</span> H[N];</span><br><span class="line"><span class="type">bool</span> mark[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    ll v;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node &amp;A)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> v &gt; A.v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> at)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)sum[i] = <span class="number">1e18</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123; <span class="number">0</span>,<span class="number">1</span> &#125;);</span><br><span class="line">    H[<span class="number">1</span>] = at;</span><br><span class="line">    sum[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    ll v;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node now = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(mark[now.id])<span class="keyword">continue</span>;</span><br><span class="line">        mark[now.id] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> nh = H[now.id];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[now.id]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nh - w[i] &gt; val[e[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                v = sum[now.id] + nh - w[i] - val[e[i]] + w[i];</span><br><span class="line">                <span class="keyword">if</span>(sum[e[i]] &gt; v)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum[e[i]] = v;</span><br><span class="line">                    H[e[i]] = val[e[i]];</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123; sum[e[i]],e[i] &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nh - w[i] &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                v = sum[now.id] + w[i] - nh + w[i];</span><br><span class="line">                <span class="keyword">if</span>(sum[e[i]] &gt; v)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum[e[i]] = v;</span><br><span class="line">                    H[e[i]] = <span class="number">0</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123; sum[e[i]],e[i] &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(sum[e[i]] &gt; sum[now.id] + w[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    sum[e[i]] = sum[now.id] + w[i];</span><br><span class="line">                    H[e[i]] = nh - w[i];</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123; sum[e[i]],e[i] &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="type">int</span> at;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;at);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;val[i]);</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="keyword">if</span>(val[a] &gt;= c)<span class="built_in">add</span>(a, b, c);</span><br><span class="line">        <span class="keyword">if</span>(val[b] &gt;= c)<span class="built_in">add</span>(b, a, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>(at);</span><br><span class="line">    <span class="keyword">if</span>(sum[n] == <span class="number">1e18</span>)<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, sum[n] + val[n] - H[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>LibreOJ #2980 [THUSCH 2017] 大魔法师 题解</title>
    <url>/solutions/solution-l2980/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">大魔法师</div>
<div id="problem-info-from">THUSCH 2017</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDc0NTM=">Luogu P7453</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yOTgw">LibreOJ #2980</span></li></ul></div>

<hr>
<p>首先看题：</p>
<p>题目要求我们在 $[ 1,n ]$ 的区间上维护三个值 $A_i,B_i,C_i$，要求支持查询区间和和下面六中操作：</p>
<ol>
<li>区间内 $A_i &#x3D; A_i + B_i$；</li>
<li>区间内 $B_i &#x3D; B_i + C_i$；</li>
<li>区间内 $C_i &#x3D; C_i + A_i$；</li>
<li>区间内 $A_i &#x3D; A_i + k$（$k$ 给定）；</li>
<li>区间内 $B_i &#x3D; B_i \times k$（$k$ 给定）；</li>
<li>区间内 $C_i &#x3D; k$（$k$ 给定）。</li>
</ol>
<p>显然这道题需要使用线段树来维护区间操作。<br>但是我们不能给每一个操作附上一个懒标记，最后懒标记下放的时候还不得麻烦死。</p>
<p>我们可以尝试一下转化一下我们的操作。</p>
<p>我们可以发现，我们所有的操作不会出现跨位置的操作，也不会出现高于一次的操作（例如 $C_i &#x3D; C_i \times B_i$ 什么的）<br>这样我们就可以使用矩阵来维护这三种信息。</p>
<p>如果我们将 $A_i,B_i,C_i$ 三个数值化作一个矩阵的话，那么这个矩阵 $\begin{bmatrix} A_i &amp; B_i &amp; C_i \end{bmatrix}$ 所对应的单位矩阵是这个样子的：$\begin{bmatrix}1&amp;&amp;\\&amp;1&amp;\\&amp;&amp;1\end{bmatrix}$。</p>
<p>而 $\begin{bmatrix} A_i &amp; B_i &amp; C_i \end{bmatrix}$ 想要变成 $\begin{bmatrix} A_i+B_i &amp; B_i &amp; C_i \end{bmatrix}$ 的话可以让它乘以一个 $\begin{bmatrix}1&amp;&amp;\\1&amp;1&amp;\\&amp;&amp;1\end{bmatrix}$。$(2,1)$ 处多出来的那个1就代表着给结果行矩阵的第<strong>1</strong>个位置加上<strong>1</strong>个原先的行矩阵矩阵第<strong>2</strong>个位置的值，也就相当于是给结果的 $A_i$ 加上了一个 $B_i$。</p>
<p>同理，第二个操作乘以的是一个 $\begin{bmatrix}1&amp;&amp;\\&amp;1&amp;\\&amp;1&amp;1\end{bmatrix}$，第三个操作乘以的是一个 $\begin{bmatrix}1&amp;&amp;1\\&amp;1&amp;\\&amp;&amp;1\end{bmatrix}$。</p>
<p>然后就是可恶的第四个操作。我们需要给 $A_i$ 加上一个 $k$，但是我们无法从刚才的方法里面推出来一个类似的方法。</p>
<p>于是我们可以考虑将我们维护的矩阵由 $\begin{bmatrix} A_i &amp; B_i &amp; C_i \end{bmatrix}$ 变为 $\begin{bmatrix} A_i &amp; B_i &amp; C_i &amp; 1 \end{bmatrix}$。<br>这样我们就只需要乘以一个 $\begin{bmatrix}1&amp;&amp;&amp;\\&amp;1&amp;&amp;\\&amp;&amp;1&amp;\\k&amp;&amp;&amp;1\end{bmatrix}$ 即可。</p>
<p>为了适配我们新的需要维护的矩阵，前面三个就变成了 $\begin{bmatrix}1&amp;&amp;&amp;\\1&amp;1&amp;&amp;\\&amp;&amp;1&amp;\\&amp;&amp;&amp;1\end{bmatrix}$，$\begin{bmatrix}1&amp;&amp;&amp;\\&amp;1&amp;&amp;\\&amp;1&amp;1&amp;\\&amp;&amp;&amp;1\end{bmatrix}$ 和 $\begin{bmatrix}1&amp;&amp;1&amp;\\&amp;1&amp;&amp;\\&amp;&amp;1&amp;\\&amp;&amp;&amp;1\end{bmatrix}$。</p>
<p>第五个操作的思路也很简单，只需要乘以一个 $\begin{bmatrix}1&amp;&amp;&amp;\\&amp;k&amp;&amp;\\&amp;&amp;1&amp;\\&amp;&amp;&amp;1\end{bmatrix}$ 即可。</p>
<p>第六个操作有点难，我们可以先把 $C_i$ 变成0，通过乘以一个 $\begin{bmatrix}1&amp;&amp;&amp;\\&amp;1&amp;&amp;\\&amp;&amp;&amp;\\&amp;&amp;&amp;1\end{bmatrix}$，然后再乘以一个 $\begin{bmatrix}1&amp;&amp;&amp;\\&amp;1&amp;&amp;\\&amp;&amp;1&amp;\\&amp;&amp;k&amp;1\end{bmatrix}$，就可以给 $C_i$ 赋成 $k$ 了。<br>最终效果跟直接乘以 $\begin{bmatrix}1&amp;&amp;&amp;\\&amp;1&amp;&amp;\\&amp;&amp;&amp;\\&amp;&amp;k&amp;1\end{bmatrix}$ 效果一样。</p>
<p>于是我们的线段树只需要维护一个区间乘和区间求和即可。</p>
<p>矩阵结构体：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    ll a[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">Matrix</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Matrix</span>(<span class="type">int</span> _n, <span class="type">int</span> _m) :<span class="built_in">n</span>(_n), <span class="built_in">m</span>(_m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> + (<span class="type">const</span> Matrix &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                res.a[i][j] = (a[i][j] + rhs.a[i][j]) % p;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> * (<span class="type">const</span> Matrix &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(n, rhs.m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= rhs.m; j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= m; k++)</span><br><span class="line">                    res.a[i][j] = (res.a[i][j] + a[i][k] * rhs.a[k][j]) % p;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>总代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">250010</span>;</span><br><span class="line"><span class="type">const</span> ll p = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    ll a[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">Matrix</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Matrix</span>(<span class="type">int</span> _n, <span class="type">int</span> _m) :<span class="built_in">n</span>(_n), <span class="built_in">m</span>(_m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> + (<span class="type">const</span> Matrix &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                res.a[i][j] = (a[i][j] + rhs.a[i][j]) % p;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> * (<span class="type">const</span> Matrix &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(n, rhs.m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= rhs.m; j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= m; k++)</span><br><span class="line">                    res.a[i][j] = (res.a[i][j] + a[i][k] * rhs.a[k][j]) % p;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Matrix num[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    Matrix sum, tag;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">Matrix base1, base2, base3, base4, base5, base6;</span><br><span class="line">Matrix base;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;root = tr[p], &amp;left = tr[p &lt;&lt; <span class="number">1</span>], &amp;rght = tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    left.sum = left.sum * root.tag;</span><br><span class="line">    rght.sum = rght.sum * root.tag;</span><br><span class="line">    left.tag = left.tag * root.tag;</span><br><span class="line">    rght.tag = rght.tag * root.tag;</span><br><span class="line">    root.tag = base;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].l = l, tr[p].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].sum = num[l];</span><br><span class="line">        tr[p].tag = base;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    tr[p].sum = tr[p &lt;&lt; <span class="number">1</span>].sum + tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">    tr[p].tag = base;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">segadd</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, Matrix k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].tag = tr[p].tag * k;</span><br><span class="line">        tr[p].sum = tr[p].sum * k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)<span class="built_in">segadd</span>(p &lt;&lt; <span class="number">1</span>, l, r, k);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)<span class="built_in">segadd</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k);</span><br><span class="line">    tr[p].sum = tr[p &lt;&lt; <span class="number">1</span>].sum + tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">segsum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)<span class="keyword">return</span> tr[p].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="function">Matrix <span class="title">res</span><span class="params">(<span class="number">4</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)res = res + <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)res = res + <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    base = <span class="built_in">Matrix</span>(<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">        base.a[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    base1:| base2:| base3:</span></span><br><span class="line"><span class="comment">    1 0 0 | 1 0 0 | 1 0 1</span></span><br><span class="line"><span class="comment">    1 1 0 | 0 1 0 | 0 1 0</span></span><br><span class="line"><span class="comment">    0 0 1 | 0 1 1 | 0 0 1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    base1 = base;</span><br><span class="line">    base1.a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    base2 = base;</span><br><span class="line">    base2.a[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    base3 = base;</span><br><span class="line">    base3.a[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    base4:  | base5:  | base6:</span></span><br><span class="line"><span class="comment">    1 0 0 0 | 1 0 0 0 | 1 0 0 0</span></span><br><span class="line"><span class="comment">    0 1 0 0 | 0 v 0 0 | 0 1 0 0</span></span><br><span class="line"><span class="comment">    0 0 1 0 | 0 0 1 0 | 0 0 0 0</span></span><br><span class="line"><span class="comment">    v 0 0 1 | 0 0 0 1 | 0 0 v 1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    base4 = base;</span><br><span class="line">    base5 = base;</span><br><span class="line">    base6 = base;</span><br><span class="line">    base6.a[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num[i] = <span class="built_in">Matrix</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;num[i].a[<span class="number">1</span>][<span class="number">1</span>], &amp;num[i].a[<span class="number">1</span>][<span class="number">2</span>], &amp;num[i].a[<span class="number">1</span>][<span class="number">3</span>]);</span><br><span class="line">        num[i].a[<span class="number">1</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op, l, r, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;op, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">segadd</span>(<span class="number">1</span>, l, r, base1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">segadd</span>(<span class="number">1</span>, l, r, base2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">segadd</span>(<span class="number">1</span>, l, r, base3);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v);</span><br><span class="line">            base4.a[<span class="number">4</span>][<span class="number">1</span>] = v;</span><br><span class="line">            <span class="built_in">segadd</span>(<span class="number">1</span>, l, r, base4);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v);</span><br><span class="line">            base5.a[<span class="number">2</span>][<span class="number">2</span>] = v;</span><br><span class="line">            <span class="built_in">segadd</span>(<span class="number">1</span>, l, r, base5);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">6</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v);</span><br><span class="line">            base6.a[<span class="number">4</span>][<span class="number">3</span>] = v;</span><br><span class="line">            <span class="built_in">segadd</span>(<span class="number">1</span>, l, r, base6);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Matrix res = <span class="built_in">segsum</span>(<span class="number">1</span>, l, r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld %lld\n&quot;</span>, res.a[<span class="number">1</span>][<span class="number">1</span>], res.a[<span class="number">1</span>][<span class="number">2</span>], res.a[<span class="number">1</span>][<span class="number">3</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>LibreOJ #3277 [JOISC 2020 Day3] 星座 3 题解</title>
    <url>/solutions/solution-l3277/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">星座 3</div>
<div id="problem-info-from">JOISC 2020 Day3 T1</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDcyMTk=">Luogu P7219</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8zMjc3">LibreOJ #3277</span></li><li><span class="exturl" data-url="aHR0cHM6Ly91b2ouYWMvcHJvYmxlbS81MDc=">UOJ #507</span></li></ul></div>

<hr>
<p>对于这道题来说，我们有两种做法。</p>
<p>首先我们可以确定一点，就是他给我们的建筑是一定到底的，那么肯定不是让我们从左往右枚举的。</p>
<p>这里就以样例来举个例子：</p>
<p><img src="https://s2.loli.net/2022/07/02/sKMGZFDTyJHa9Pi.png" alt="l3277-1.png"></p>
<p>我们首先看最上面的这一行。</p>
<p><img src="https://s2.loli.net/2022/07/02/tFgcno53CvVMzaB.png" alt="l3277-2.png"></p>
<p>当我们碰到了最高的那个建筑的时候，我们当前这个区间就被分成了两份。</p>
<p><img src="https://s2.loli.net/2022/07/02/MKT9iOy5pWHLzef.png" alt="l3277-3.png"></p>
<p>随着我们不断向下，我们的区间也在不断细分，直到最后全是建筑。</p>
<p>然后我们就可以以此建立一棵笛卡尔树了。<br>其中我们的根节点是最上面的那一行再往上的那一片空白区域，我们可以保证其一定是一个完整的区间。</p>
<p>对于每一个区间，我们需要先处理一下，使其只剩一颗星星。<br>这样可以大大简化我们的冲突判断，减少了对时间的需求。</p>
<p>其次，我们需要对两个（或多个）区间进行合并，就好似对这个区间进行DP，让每一个区间中的那一颗星星选或不选，然后如果选的话就考虑其下面与其冲突的星星，这样这个区间的子树的所有星星都需要删去。<br>这样一直合并到最上面的区间之后就得到了我们要的结果。</p>
<p>我们可以使用树链剖分来维护上面的信息。<br>不过下面有个更优的做法，就不放代码了。</p>
<p>我们可以贪心一下。</p>
<p>首先我们将所有房屋和星星按照纵坐标从小到大排个序。<br>然后我们搞一个并查集，使用并查集维护每一个点可以到达的最大范围。<br>最后我们建立一棵树状数组，用来存储每一个横坐标中把所有星星清空的代价之和。这一棵树是随着枚举纵坐标不断更新的。</p>
<p>之后我们从下往上处理信息。</p>
<p>对于每一个纵坐标，我们假设已经处理出来所有纵坐标小于其的答案。<br>我们在树状数组上面查找当前纵坐标所对应的值 $S$，与消除这一颗星星所需要的代价 $C$ 比较一下。</p>
<ul>
<li>如果 $S \geq C$，那就意味着我们加入这颗星星并不会使答案更优，因为靠上的星星可能会冲突的概率更大一些，况且保留其权值又不如保留其下面的星星的权值之和更优。所以我们的答案直接加上 $C$ 即可。</li>
<li>如果 $S &lt; C$，那我们就不能确定保留这一颗星星是否更优了。我们先暂且给答案加上 $S$，然后将当前星星能够到达的横坐标上的每一个值加上 $C-S$。这样我们在继续枚举的时候如果发现留着当前点仍然不优，那么我们就向答案里面又加入了 $C-S$，相当于是向答案中加入了 $C$，而把 $S$ 拎了出来。</li>
</ul>
<p>前者的正确性很显然，后者则可以这样想：<br>我们已经在递推的时候的每一步都是当前纵坐标的最优解，而我们保留 $C$ 相当与就是舍弃了这个最优解。<br>当我们再想把 $C$ 删去而保留 $S$ 的时候，选取的 $S$ 仍然是那个区间的最优解，就不需要继续考虑更深的点了。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">dsu</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> p[N];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x)p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;L, R;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line">ll tr[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        tr[i] += c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        res += tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">ll ans;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt;st[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;h[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    L.p[n + <span class="number">1</span>] = R.p[n + <span class="number">1</span>] = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        L.p[i] = R.p[i] = i;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        h[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;c);</span><br><span class="line">        st[y].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(x, c));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; s : st[i])</span><br><span class="line">        &#123;</span><br><span class="line">            ll S = <span class="built_in">sum</span>(s.first);</span><br><span class="line">            <span class="keyword">if</span> (S &gt; s.second)ans += s.second;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans += S;</span><br><span class="line">                <span class="built_in">add</span>(L.<span class="built_in">find</span>(s.first) + <span class="number">1</span>, s.second - S);</span><br><span class="line">                <span class="built_in">add</span>(R.<span class="built_in">find</span>(s.first), S - s.second);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j : h[i])</span><br><span class="line">        &#123;</span><br><span class="line">            L.p[j] = j - <span class="number">1</span>;</span><br><span class="line">            R.p[j] = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>贪心</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>P1084 [NOIP2012 提高组] 疫情控制 题解</title>
    <url>/solutions/solution-p1084/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">疫情控制</div>
<div id="problem-info-from">NOIP 2012 提高组</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDEwODQ=">Luogu P1084</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yNjA3">LibreOJ L2607</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMzU5Lw==">AcWing 357</span></li></ul></div>

<hr>
<p>题目要求我们求出一个最小的时间，使得每一个叶子节点到根节点的路径上都有驻军。<br>同时根节点本身不能驻军。</p>
<h1 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h1><p>我们考虑一个极端情况，那就是我们将所有的军队分散在根节点的所有子节点中，这样就可以使得每一个叶子结点到根节点的路径上都有驻军。<br>（如果军队数量少于根节点的子节点数量的话直接无解）<br>假设我们对于这种方案取了一个时间花费最小的，我们可以看出当时间大于其的时候肯定是有解的，而时间小于其的则不一定有解，那么我们就可以二分答案了。</p>
<p>左端点肯定是0，右端点我们设成所有边的权值和。</p>
<p>然后就是判定是否能够控制疫情了。</p>
<h1 id="判定"><a href="#判定" class="headerlink" title="判定"></a>判定</h1><p>我们选用上面说的方案，也就是说将所有的军队尽量部署在根节点的所有子节点中。<br>当然，如果某一个子节点没有能被驻军，但是其到其子树中的所有叶子结点的路径上都有驻军也可以。</p>
<h2 id="移动并初步部署"><a href="#移动并初步部署" class="headerlink" title="移动并初步部署"></a>移动并初步部署</h2><p>那我们每一个军队都贪心地尽量往上走，直到到达根节点的子节点为止。<br>为了节省时间，我们使用倍增优化一下移动。</p>
<figure class="highlight cpp"><figcaption><span>倍增优化</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> fa[N][<span class="number">32</span>];</span><br><span class="line">ll dis[N][<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getFa</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//DFS求出父亲节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa[p][<span class="number">0</span>])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        fa[j][<span class="number">0</span>] = p;</span><br><span class="line">        dis[j][<span class="number">0</span>] = w[i];</span><br><span class="line">        <span class="built_in">getFa</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initFa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//倍增预处理</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> p = <span class="number">1</span>; p &lt;= n; p++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            fa[p][i] = fa[fa[p][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">            dis[p][i] = dis[p][i - <span class="number">1</span>] + dis[fa[p][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><figcaption><span>移动</span></figcaption><table><tr><td class="code"><pre><span class="line">vector&lt;pair&lt;ll, <span class="type">int</span>&gt; &gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = mil[i];</span><br><span class="line">    ll cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = t; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[x][j] &gt; <span class="number">1</span> &amp;&amp; cnt + dis[x][j] &lt;= lim)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt += dis[x][j];</span><br><span class="line">            x = fa[x][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fa[x][<span class="number">0</span>] == <span class="number">1</span> &amp;&amp; cnt + dis[x][<span class="number">0</span>] &lt;= lim)</span><br><span class="line">        q.<span class="built_in">emplace_back</span>(lim - cnt - dis[x][<span class="number">0</span>], x);<span class="comment">//存储闲置军队</span></span><br><span class="line">    <span class="keyword">else</span> scr[x] = <span class="literal">true</span>;<span class="comment">//打上驻扎标记</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>移动完后，一些军队是已经再也不能向上走了，只能在此地驻扎，而另一些军队是已经走到了根节点的子节点，还有时间可以走。我们称处于后者的状态的军队为“闲置”的军队。<br>我们将这些军队存储起来，供以后使用。</p>
<h2 id="进一步部署"><a href="#进一步部署" class="headerlink" title="进一步部署"></a>进一步部署</h2><p>我们从根节点的每一个子节点开始进行DFS，看一看其子树内是否有叶子结点到根节点的路径上没有驻军。<br>如果有的话，那么该节点就需要被驻军。</p>
<figure class="highlight cpp"><figcaption><span>DFS</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> scr[N], need[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isScrd</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> isLeaf = <span class="literal">true</span>;<span class="comment">//是否为叶子结点</span></span><br><span class="line">    <span class="keyword">if</span>(scr[p])<span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//节点本身被驻军</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa[p][<span class="number">0</span>])<span class="keyword">continue</span>;</span><br><span class="line">        isLeaf = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">isScrd</span>(e[i]))<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//有一个叶子结点没有被驻军</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(isLeaf)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//为叶子结点且本身未驻军</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//不是叶子结点且子树内没有未被驻军的叶子结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于每一个有闲置军队且需要驻军的子节点，我们选取剩余时间最小的那个军队让其驻扎。<br>剩下的军队中，我们选出来一些军队让其继续闲置。<br>这些军队需要满足一个条件，就是可以从当前节点走到根节点再走回来，否则我们不如让其直接驻扎在当前节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> u = q.<span class="built_in">begin</span>(); u != q.<span class="built_in">end</span>(); u++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(need[u-&gt;second] &amp;&amp; u-&gt;first &lt; dis[u-&gt;second][<span class="number">0</span>] * <span class="number">2</span>)need[u-&gt;second] = <span class="literal">false</span>;<span class="comment">//驻扎</span></span><br><span class="line">    <span class="keyword">else</span> rmtm.<span class="built_in">push_back</span>(u-&gt;first);<span class="comment">//继续闲置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="再部署"><a href="#再部署" class="headerlink" title="再部署"></a>再部署</h2><p>现在我们需要处理的节点只剩下那些没有被驻军且需要驻军的子节点了。<br>我们这时候可以不管哪个军队驻扎在那里了，只需要将其剩余时间与需要被驻扎的点与根节点的距离比较即可。</p>
<p>我们使用两个小根堆来存储这些信息，每一次取出堆顶比较并在适当时间弹出即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;ll&gt;rmtm;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = h[<span class="number">1</span>]; ~i; i = ne[i])</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">isScrd</span>(e[i]))</span><br><span class="line">        need[e[i]] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> u = q.<span class="built_in">begin</span>(); u != q.<span class="built_in">end</span>(); u++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(need[u-&gt;second] &amp;&amp; u-&gt;first &lt; dis[u-&gt;second][<span class="number">0</span>] * <span class="number">2</span>)need[u-&gt;second] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> rmtm.<span class="built_in">push_back</span>(u-&gt;first);</span><br><span class="line">&#125;<span class="comment">//书接上文</span></span><br><span class="line">vector&lt;ll&gt;tbd;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = h[<span class="number">1</span>]; ~i; i = ne[i])</span><br><span class="line">    <span class="keyword">if</span>(need[e[i]])tbd.<span class="built_in">push_back</span>(dis[e[i]][<span class="number">0</span>]);<span class="comment">//压入需要驻军的节点</span></span><br><span class="line"><span class="keyword">if</span>(rmtm.<span class="built_in">size</span>() &lt; tbd.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//军队数量不够直接返回不可行</span></span><br><span class="line"><span class="built_in">sort</span>(rmtm.<span class="built_in">begin</span>(), rmtm.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>(tbd.<span class="built_in">begin</span>(), tbd.<span class="built_in">end</span>());<span class="comment">//因为不需要随时取出栈顶比较，所以直接采用vector+sort()</span></span><br><span class="line">vector&lt;ll&gt;::iterator i = tbd.<span class="built_in">begin</span>(), j = rmtm.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span>(i != tbd.<span class="built_in">end</span>() &amp;&amp; j != rmtm.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(*i &lt;= *j)i++, j++;<span class="comment">//当前栈顶军队可以到达栈顶节点</span></span><br><span class="line">    <span class="keyword">else</span> j++;<span class="comment">//栈顶军队不能到达任意一个节点，直接弃用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i == tbd.<span class="built_in">end</span>())<span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//全部节点都驻上军了</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>至此，判断时间上限是否合法的部分就结束了。</p>
<h1 id="全都加起来"><a href="#全都加起来" class="headerlink" title="全都加起来"></a>全都加起来</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>, M = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, m, t;</span><br><span class="line"><span class="type">int</span> mil[N];</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], w[M], idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa[N][<span class="number">32</span>];</span><br><span class="line">ll dis[N][<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getFa</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa[p][<span class="number">0</span>])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        fa[j][<span class="number">0</span>] = p;</span><br><span class="line">        dis[j][<span class="number">0</span>] = w[i];</span><br><span class="line">        <span class="built_in">getFa</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initFa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> p = <span class="number">1</span>; p &lt;= n; p++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            fa[p][i] = fa[fa[p][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">            dis[p][i] = dis[p][i - <span class="number">1</span>] + dis[fa[p][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> scr[N], need[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isScrd</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> isLeaf = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(scr[p])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa[p][<span class="number">0</span>])<span class="keyword">continue</span>;</span><br><span class="line">        isLeaf = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">isScrd</span>(e[i]))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(isLeaf)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chq</span><span class="params">(ll lim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(scr, <span class="number">0</span>, <span class="built_in">sizeof</span>(scr));</span><br><span class="line">    <span class="built_in">memset</span>(need, <span class="number">0</span>, <span class="built_in">sizeof</span>(need));</span><br><span class="line">    vector&lt;pair&lt;ll, <span class="type">int</span>&gt; &gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = mil[i];</span><br><span class="line">        ll cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = t; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(fa[x][j] &gt; <span class="number">1</span> &amp;&amp; cnt + dis[x][j] &lt;= lim)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt += dis[x][j];</span><br><span class="line">                x = fa[x][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fa[x][<span class="number">0</span>] == <span class="number">1</span> &amp;&amp; cnt + dis[x][<span class="number">0</span>] &lt;= lim)</span><br><span class="line">            q.<span class="built_in">emplace_back</span>(lim - cnt - dis[x][<span class="number">0</span>], x);</span><br><span class="line">        <span class="keyword">else</span> scr[x] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q.<span class="built_in">begin</span>(), q.<span class="built_in">end</span>());</span><br><span class="line">    vector&lt;ll&gt;rmtm;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[<span class="number">1</span>]; ~i; i = ne[i])</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">isScrd</span>(e[i]))</span><br><span class="line">            need[e[i]] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> u = q.<span class="built_in">begin</span>(); u != q.<span class="built_in">end</span>(); u++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(need[u-&gt;second] &amp;&amp; u-&gt;first &lt; dis[u-&gt;second][<span class="number">0</span>] * <span class="number">2</span>)need[u-&gt;second] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> rmtm.<span class="built_in">push_back</span>(u-&gt;first);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;ll&gt;tbd;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[<span class="number">1</span>]; ~i; i = ne[i])</span><br><span class="line">        <span class="keyword">if</span>(need[e[i]])tbd.<span class="built_in">push_back</span>(dis[e[i]][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(rmtm.<span class="built_in">size</span>() &lt; tbd.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">sort</span>(rmtm.<span class="built_in">begin</span>(), rmtm.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(tbd.<span class="built_in">begin</span>(), tbd.<span class="built_in">end</span>());</span><br><span class="line">    vector&lt;ll&gt;::iterator i = tbd.<span class="built_in">begin</span>(), j = rmtm.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">while</span>(i != tbd.<span class="built_in">end</span>() &amp;&amp; j != rmtm.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*i &lt;= *j)i++, j++;</span><br><span class="line">        <span class="keyword">else</span> j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i == tbd.<span class="built_in">end</span>())<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    t = <span class="built_in">log2</span>(n) + <span class="number">1</span>;</span><br><span class="line">    ll l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        <span class="built_in">add</span>(u, v, w), <span class="built_in">add</span>(v, u, w);</span><br><span class="line">        r += w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getFa</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">initFa</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;mil[i]);</span><br><span class="line">    <span class="type">bool</span> isValid = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">chq</span>(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">            isValid = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//printf(&quot;[%lld %lld]\n&quot;, l, r);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!isValid)<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>贪心</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>P1117 [NOI2016] 优秀的拆分 题解</title>
    <url>/solutions/solution-p1117/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">优秀的拆分</div>
<div id="problem-info-from">NOI 2016</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDExMTc=">Luogu P1117</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yMDgz">LibreOJ L2083</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMTAwOC8=">AcWing 1006</span></li><li><span class="exturl" data-url="aHR0cHM6Ly91b2ouYWMvcHJvYmxlbS8yMTk=">UOJ #219</span></li></ul></div>

<hr>
<div class="note warning"><p>本文图片为放大之后的效果，点击之后会回到原来的大小，不建议点击。<br>过段时间会重修（</p>
</div>

<p>据说暴力用哈希扫可以拿到95分。</p>
<p>这一道题的思路是这个样子的：</p>
<p>我们首先准备两个数组<code>a[]</code>和<code>b[]</code>，分别表示以 $i$ 结尾的形似AA的字串个数和以 $i$ 开头的形似AA的字串的个数，最终答案其实就是 $\displaystyle \sum_{i&#x3D;1}^n a[i] \times b[i+1]$。</p>
<p>然后考虑如何求出这两个数组。</p>
<p>对于每一个位置，我们尝试枚举一个 $len$，然后求出当前位置 $i$ 与 $i+len$ 位置处的 <code>lcp</code> 与 <code>lcs</code> 。</p>
<p>当两者长度加起来不小于 $len$ 的时候，就意味着我们可以找到至少一个长度为 $2len$ 的AA串。</p>
<p>为什么呢？</p>
<p>我们考虑从两个位置的 <code>lcs</code> 的开头处开始，分别向后截取出一段长度为 $len$ 的串。</p>
<p>如果这个串被两者的 <code>lcs</code> 和两者的 <code>lcp</code> 拼起来组成的一个字串覆盖，那么我们就可以把这两个串拼起来，形成一个长度为 $2len$ 的AA串。<br>就像这样：</p>
<img src="https://s2.loli.net/2022/03/22/mo9Hg7zp3YlCWjf.png" alt="p1117-1.png" width="60%" />

<p>当两者长度加起来不够 $len$ 时，我们截出来的两端字串就不保证一样。<br>不，应该是保证不一样，要不然两者的 <code>lcp</code> 还可以更长一点。<br>这样就拼不出来一个长度为 $2len$ 的AA串了。</p>
<img src="https://s2.loli.net/2022/03/22/1Yo3UAOuptlvKz5.png" alt="p1117-2.png" width="60%" />

<p>如果两者甚至有重合，那么我们就可以挑出来多个字串。我们这些会累积到后面。</p>
<img src="https://s2.loli.net/2022/03/22/EdSZAXvpG17hPYF.gif" alt="p1117-3.gif" width="60%" />

<p>就是这样。</p>
<p>简单来说，我们需要做的就是：</p>
<ol>
<li>枚举 $len$；这个操作的复杂度是 $O(n \log n)$</li>
<li>求 <code>lcp</code> 与 <code>lcs</code>；使用后缀数组即可。</li>
<li>区间加；差分即可。</li>
</ol>
<p>上代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001000</span>;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">ll a[N], b[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SuffixArray</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> S[N]; <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> cnt[N], sa[N], rk[N], height[N];</span><br><span class="line">    <span class="type">int</span> st[N][<span class="number">25</span>], lg2[N];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> id, x, y;</span><br><span class="line">    &#125;aa[N], bb[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">buildsa</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        n = <span class="built_in">strlen</span>(S + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line">        <span class="built_in">memset</span>(height, <span class="number">0</span>, <span class="built_in">sizeof</span>(height));</span><br><span class="line">        <span class="built_in">memset</span>(sa, <span class="number">0</span>, <span class="built_in">sizeof</span>(sa));</span><br><span class="line">        <span class="built_in">memset</span>(rk, <span class="number">0</span>, <span class="built_in">sizeof</span>(rk));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) aa[i] = bb[i] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[S[i]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">256</span>; i++) cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rk[i] = cnt[S[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> L = <span class="number">1</span>; L &lt; n; L *= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) aa[i] = &#123; i,rk[i],rk[i + L] &#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[aa[i].y]++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) bb[cnt[aa[i].y]--] = aa[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[aa[i].x]++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) aa[cnt[bb[i].x]--] = bb[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">                <span class="keyword">if</span>((aa[i].x == aa[i - <span class="number">1</span>].x) &amp;&amp; (aa[i].y == aa[i - <span class="number">1</span>].y))</span><br><span class="line">                    rk[aa[i].id] = rk[aa[i - <span class="number">1</span>].id];</span><br><span class="line">                <span class="keyword">else</span> rk[aa[i].id] = rk[aa[i - <span class="number">1</span>].id] + <span class="number">1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sa[rk[i]] = i; <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(k) k--;</span><br><span class="line">            <span class="type">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span>((i + k &lt;= n) &amp;&amp; (j + k &lt;= n) &amp;&amp; (S[i + k] == S[j + k])) k++;</span><br><span class="line">            height[rk[i]] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">buildst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lg2[<span class="number">0</span>] = <span class="number">-1</span>; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i++) lg2[i] = lg2[i / <span class="number">2</span>] + <span class="number">1</span>; lg2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) st[i][<span class="number">0</span>] = height[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; i++)</span><br><span class="line">                st[i][j] = <span class="built_in">min</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Lcp</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        l = rk[l], r = rk[r];</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) <span class="built_in">swap</span>(l, r); l++;</span><br><span class="line">        <span class="type">int</span> k = lg2[r - l + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(st[l][k], st[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;SA[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, SA[<span class="number">0</span>].S + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">strlen</span>(SA[<span class="number">0</span>].S + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = b[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            SA[<span class="number">1</span>].S[i] = SA[<span class="number">0</span>].S[n - i + <span class="number">1</span>];</span><br><span class="line">        SA[<span class="number">0</span>].<span class="built_in">buildsa</span>(), SA[<span class="number">1</span>].<span class="built_in">buildsa</span>();</span><br><span class="line">        SA[<span class="number">0</span>].<span class="built_in">buildst</span>(), SA[<span class="number">1</span>].<span class="built_in">buildst</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> Len = <span class="number">1</span>; Len &lt;= n / <span class="number">2</span>; Len++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = Len; i &lt;= n; i += Len)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> l = i, r = i + Len;</span><br><span class="line">                <span class="type">int</span> L = n - (r - <span class="number">1</span>) + <span class="number">1</span>, R = n - (l - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> lcp = SA[<span class="number">0</span>].<span class="built_in">Lcp</span>(l, r); lcp = <span class="built_in">min</span>(lcp, Len);</span><br><span class="line">                <span class="type">int</span> lcs = SA[<span class="number">1</span>].<span class="built_in">Lcp</span>(L, R); lcs = <span class="built_in">min</span>(lcs, Len - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(lcp + lcs &gt;= Len)</span><br><span class="line">                &#123;</span><br><span class="line">                    b[i - lcs]++, b[i - lcs + (lcp + lcs - Len + <span class="number">1</span>)]--;</span><br><span class="line">                    a[r + lcp - (lcp + lcs - Len + <span class="number">1</span>)]++, a[r + lcp]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] += a[i - <span class="number">1</span>], b[i] += b[i - <span class="number">1</span>];</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) ans += a[i] * b[i + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>P1712 [NOI2016] 区间 题解</title>
    <url>/solutions/solution-p1712/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">区间</div>
<div id="problem-info-from">NOI 2016</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDE3MTI=">Luogu P1712</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yMDg2">LibreOJ L2086</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMTAxMS8=">AcWing 1009</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzQ2NTM=">BZOJ #4653</span></li></ul></div>

<hr>
<p>既然题目没有规定覆盖的顺序，且想让我们最小化选定的区间长度的极差，那我们不妨就先按照区间长度排一个序。</p>
<p>这一道题中的区间长度计算方式是 $l_i - r_i$，但是无伤大雅，毕竟我们按照比较常见的方式计算之后的结果会将1约掉，使得最后的结果没有差别。</p>
<p>之后，我们考虑一下如何枚举答案，最朴素的做法就是利用尺取法来不断判断现在选出的区间是否满足了要求，满足了就更新一下答案。<br>更新完答案之后，我们将左端点右移到不满足条件了就可以了。</p>
<p>最后我们考虑区间覆盖的时候如何快速判断是否符合要求，答案是线段树维护区间最大值。<br>当然，我们这里值域太大了，需要进行一发离散化。</p>
<p>于是我们就顺利地解决了这个问题。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> max, tag;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].max = <span class="built_in">max</span>(tr[p &lt;&lt; <span class="number">1</span>].max, tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;root = tr[p], &amp;left = tr[p &lt;&lt; <span class="number">1</span>], &amp;rght = tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">        left.tag += root.tag;</span><br><span class="line">        left.max += root.tag;</span><br><span class="line">        rght.tag += root.tag;</span><br><span class="line">        rght.max += root.tag;</span><br><span class="line">        root.tag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].l = l, tr[p].r = r;</span><br><span class="line">    tr[p].max = tr[p].tag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">segadd</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].max += k;</span><br><span class="line">        tr[p].tag += k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)<span class="built_in">segadd</span>(p &lt;&lt; <span class="number">1</span>, l, r, k);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)<span class="built_in">segadd</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> query &amp;a)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> len &lt; a.len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="type">int</span> x[N &lt;&lt; <span class="number">1</span>], idx;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;dic;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[i].l, &amp;a[i].r);</span><br><span class="line">        a[i].len = a[i].r - a[i].l;</span><br><span class="line">        x[i * <span class="number">2</span> - <span class="number">2</span>] = a[i].l, x[i * <span class="number">2</span> - <span class="number">1</span>] = a[i].r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(x, x + <span class="number">2</span> * n);</span><br><span class="line">    idx = <span class="built_in">unique</span>(x, x + <span class="number">2</span> * n) - x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; idx; i++)</span><br><span class="line">        dic.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(x[i], i + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, idx);</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l = dic[a[i].l], r = dic[a[i].r];</span><br><span class="line">        <span class="built_in">segadd</span>(<span class="number">1</span>, l, r, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(tr[<span class="number">1</span>].max &gt;= m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(tr[<span class="number">1</span>].max &gt;= m &amp;&amp; hh &lt;= n)</span><br><span class="line">            &#123;</span><br><span class="line">                hh++;</span><br><span class="line">                <span class="type">int</span> hl = dic[a[hh].l], hr = dic[a[hh].r];</span><br><span class="line">                <span class="built_in">segadd</span>(<span class="number">1</span>, hl, hr, <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, a[i].len - a[hh].len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans == <span class="number">0x3f3f3f3f</span>)<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>P1954 [NOI2010] 航空管制 题解</title>
    <url>/solutions/solution-p1954/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">航空管制</div>
<div id="problem-info-from">NOI 2010</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDE5NTQ=">Luogu P1954</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8zNzYw">LibreOJ L3760</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvOTgxLw==">AcWing 979</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzIwMDg=">BZOJ #2008</span></li></ul></div>

<hr>
<p>本题的思路与<a href="/solutions/solution-p3243">[HNOI2015] 菜肴制作</a>很像。<br>同样是将约束条件当成单向边建反图之后跑拓扑排序，但是这里还需要考虑最晚起飞时间的限制。<br>因为我们是倒序枚举的时间，所以最晚起飞时间可以转化为最早起飞时间。<br>我们可以拿一个桶来存储下每一个最晚起飞时间对应的飞机集合，当我们枚举到这个时间之后，将所有的飞机放入堆里。<br>当然，因为要求的是可行解，所以这里的堆可以换成队列。</p>
<p>对于最早可能的起飞序号，我们可以对每一个飞机做一遍拓扑排序。<br>这一次做拓扑排序的时候，我们需要让当前选定的这个飞机尽量在队尾，也就是尽量晚出队。<br>具体实现方式就是在每一次插入新的队尾的时候，看一看能否将当前这个飞机（也就是队尾的前一个元素）与队尾交换位置。</p>
<p>题目保证有解了，就不需要判定无解的情况了。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>, M = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> deg[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans[N], tot;</span><br><span class="line"><span class="type">int</span> tmp[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> q[N];</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">1</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)tmp[i] = deg[i] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> t = n; t; t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!v[t].<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> j : v[t])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!(--tmp[j]))</span><br><span class="line">                &#123;</span><br><span class="line">                    q[++tt] = j;</span><br><span class="line">                    <span class="keyword">if</span>(hh &lt; tt &amp;&amp; q[tt - <span class="number">1</span>] == u)<span class="built_in">swap</span>(q[tt], q[tt - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> p = q[hh++];</span><br><span class="line">        <span class="keyword">if</span>(p == u)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, t);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!(--tmp[e[i]]))</span><br><span class="line">            &#123;</span><br><span class="line">                q[++tt] = e[i];</span><br><span class="line">                <span class="keyword">if</span>(hh &lt; tt &amp;&amp; q[tt - <span class="number">1</span>] == u)<span class="built_in">swap</span>(q[tt], q[tt - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        v[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        deg[u]++;</span><br><span class="line">        <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)tmp[i] = deg[i] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> t = n; t; t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!v[t].<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> j : v[t])</span><br><span class="line">            &#123;</span><br><span class="line">                tmp[j]--;</span><br><span class="line">                <span class="keyword">if</span>(!tmp[j])q.<span class="built_in">push</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ans[t] = u;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; ~i; i = ne[i])</span><br><span class="line">            <span class="keyword">if</span>(!(--tmp[e[i]]))q.<span class="built_in">push</span>(e[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">solve</span>(i);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>贪心</tag>
        <tag>拓扑排序</tag>
      </tags>
  </entry>
  <entry>
    <title>P1999 高维正方体 题解</title>
    <url>/solutions/solution-p1999/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">高维正方体</div>
<div id="problem-info-from">none</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDE5OTk=">Luogu P1999</span></li></ul></div>

<hr>
<p>一道考试题，写一下当时的思路。</p>
<p>首先我们进行一个列表：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">1</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">4</td>
<td align="center">4</td>
<td align="center">1</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">8</td>
<td align="center">12</td>
<td align="center">6</td>
<td align="center">1</td>
</tr>
</tbody></table>
<p>首先我们可以发现一个规律，就是 $n$ 位立方体所拥有的的点的个数是 $2^n$，所拥有的 $n-1$ 维立方体的个数是 $2n$。</p>
<p>然后就没有发现规律。</p>
<p>于是我就尝试再举出一个例子，看看能不能找出规律。</p>
<p><img src="https://img.catium.top:10000/upload/757281.png"></p>
<p>这是一个超立方体的展开图。</p>
<p>数了一下，发现这个玩意有8个正方体，24个面，32个边，16个顶点。</p>
<p>现在我们可以扩充一下这个表了：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">1</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">4</td>
<td align="center">4</td>
<td align="center">1</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">8</td>
<td align="center">12</td>
<td align="center">6</td>
<td align="center">1</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">16</td>
<td align="center">32</td>
<td align="center">24</td>
<td align="center">8</td>
<td align="center">1</td>
</tr>
</tbody></table>
<p>貌似还是没有什么规律。</p>
<p>尝试搞出来超立方体的面数与正方体的面数的关系。<br>发现其每一个面都会由两个正方体共享，于是就是 $\frac{6 \times 8}{2}$。<br>由此往后面推，每一个边都会由三个正方体共享，于是就是 $\frac{12 \times 8}{3} $。而正方体中的每一条边都会由两个面共享，所以12就等于 $\frac{4 \times 6}{2}$。</p>
<p>定义一个 $f_{n,m}$，代表 $n$ 维立方体拥有的 $m$ 维正方体数量。</p>
<p>于是 $f_{4,1} &#x3D; f_{3,1} \times \frac{2 \times 4}{3} &#x3D; f_{2,1} \times \frac{2 \times 3}{2} \times \frac{2 \times 4}{3}$。<br>而 $f_{n,n-1} &#x3D; 2n$。</p>
<p>于是我们就得到了一个关于 $f_{n,m}$ 的公式：</p>
<p>$$<br>f_{n,m} &#x3D; \frac{n!}{(n-m)!m!} \times 2^{n-m-1} \times 2(m+1)<br>$$</p>
<p>于是我们像预处理组合数一样预处理出来阶乘和阶乘的逆元就可以了。</p>
<p>参考代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">ll fac[<span class="number">100010</span>], inv[<span class="number">100010</span>];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x &amp; <span class="number">1</span>)res = (res * a) % mod;</span><br><span class="line">        a = (a * a) % mod;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m == n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1ll</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m == n - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll res = (<span class="number">2</span> * n) % mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qpow</span>(<span class="number">2</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ll res = (fac[n] * inv[m + <span class="number">1</span>]) % mod * inv[n - m] % mod;</span><br><span class="line">        res = (res * <span class="built_in">qpow</span>(<span class="number">2</span>, n - m - <span class="number">1</span>)) % mod;</span><br><span class="line">        res = (res * <span class="built_in">f</span>(m + <span class="number">1</span>, m)) % mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    inv[<span class="number">0</span>] = <span class="number">1</span>; inv[<span class="number">100000</span>] = <span class="built_in">qpow</span>(fac[<span class="number">100000</span>], mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">99999</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        inv[i] = <span class="number">1</span> * inv[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">if</span>(n &lt; m)<span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">f</span>(n, m));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>数学（题目）</tag>
      </tags>
  </entry>
  <entry>
    <title>P2375 [NOI2014] 动物园 题解</title>
    <url>/solutions/solution-p2375/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">动物园</div>
<div id="problem-info-from">NOI 2014</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDIzNzU=">Luogu P2375</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yMjQ2">LibreOJ L2246</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMTAwMi8=">AcWing 1000</span></li><li><span class="exturl" data-url="aHR0cHM6Ly91b2ouYWMvcHJvYmxlbS81">UOJ #5</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzM2NzA=">BZOJ #3670</span></li></ul></div>

<hr>
<p>题目要求我们求出来一个 $num$ 数组。对于一个字符串来说，其 $num$ 的值就是其所有不重叠的 $border$ 的个数。而 $num$ 数组就是对这个字符串的所有前缀求 $num$。</p>
<p>这个有一点难想，我们不如先想一下弱化版的，即不考虑重叠这个因素了。</p>
<p>那么这个弱化版的 $num$ 数组其实就是字符串每一个前缀的 $border$ 个数，也就是其在 $fail$ 树上的深度。</p>
<p>那么如果我们再考虑上重叠的部分，那我们就对于一个长度为 $i$ 的前缀找到一个 $j$，使得长度为 $j$ 的前缀是长度为 $i$ 的前缀的一个 $border$。<br>因为 $\pi[i] &lt; i$，所以我们找到的最大的 $j$ 的 $\pi[j]$ 就是我们的 $num[i]$ 了。</p>
<hr>
<p>然后我们还需要一个优化。<br>因为我们如果碰到了一个奇怪的字符串，里面有 $10^6$ 个 <code>a</code>，那么我们就会被卡成 $O(n^2)$ 级别的。</p>
<p>我们可以尝试利用 KMP 的思想，尝试减小重复的递归。</p>
<p>那么我们可以将枚举的变量 $j$ 放到循环外面，结束循环的时候不初始化之，就不需要在不用枚举 $&lt; j$ 的部分时枚举 $&lt; j$ 的部分了。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    ll n = (ll)s.<span class="built_in">length</span>();</span><br><span class="line">    vector&lt;ll&gt;<span class="built_in">ne</span>(n + <span class="number">1</span>), <span class="built_in">num</span>(n + <span class="number">1</span>);</span><br><span class="line">    ll j = <span class="number">0</span>;</span><br><span class="line">    num[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j])j = ne[j];</span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[j])j++;</span><br><span class="line">        ne[i + <span class="number">1</span>] = j;</span><br><span class="line">        num[i + <span class="number">1</span>] = num[j] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j])j = ne[j];</span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[j])j++;</span><br><span class="line">        <span class="keyword">while</span> (j * <span class="number">2</span> &gt; (i + <span class="number">1</span>))j = ne[j];</span><br><span class="line">        ans = (ans * (num[j] + <span class="number">1</span>)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> endl = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>字符串</tag>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>P2414 [NOI2011] 阿狸的打字机 题解</title>
    <url>/solutions/solution-p2414/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">阿狸的打字机</div>
<div id="problem-info-from">NOI 2011</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDI0MTQ=">Luogu P2414</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yNDQ0">LibreOJ L2444</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvOTg1Lw==">AcWing 983</span></li></ul></div>

<hr>
<p>题目这个样子就相当于是构造了一个字符串的集合，同时询问我们某一个字符串在另一个字符串内出现了多少次。</p>
<p>首先看一下数据范围：<br>字符串数量 $n \leq 10^5$，询问数量 $m \leq 10^5$。</p>
<p>况且字符串的输入格式还特别奇怪：</p>
<blockquote>
<p>阿狸喜欢收藏各种稀奇古怪的东西，最近他淘到一台老式的打字机。打字机上只有 $28$ 个按键，分别印有 $26$ 个小写英文字母和 <code>B</code>、<code>P</code> 两个字母。经阿狸研究发现，这个打字机是这样工作的：</p>
<ul>
<li>输入小写字母，打字机的一个凹槽中会加入这个字母(这个字母加在凹槽的最后)。</li>
<li>按一下印有 <code>B</code> 的按键，打字机凹槽中最后一个字母会消失。</li>
<li>按一下印有 <code>P</code> 的按键，打字机会在纸上打印出凹槽中现有的所有字母并换行，但凹槽中的字母不会消失。</li>
</ul>
<p>例如，阿狸输入 <code>aPaPBbP</code>，纸上被打印的字符如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">aa</span><br><span class="line">ab</span><br></pre></td></tr></table></figure>
<p>我们把纸上打印出来的字符串从 $1$ 开始顺序编号，一直到 $n$。</p>
</blockquote>
<p>然后我们就可以由此联想到Trie，以及以其为基础的AC自动机。</p>
<p>AC自动机是有字符串匹配的功能的，但是这样直接匹配还是有点慢。<br>其每一次询问的时间复杂度都是与文本串的长度成正相关的。</p>
<p>当然我们可以想到离线询问，对于处理相同文本串的询问确实是节省了时间。</p>
<p>同时我们考虑一个性质：</p>
<p><strong>我们的所有文本串均会出现在AC自动机中。</strong></p>
<p>或者说，我们相当于是拿模式串与模式串相比对。</p>
<p>这样我们就完全是在AC自动机内部做匹配，不需要考虑什么被抛弃的部分了。</p>
<hr>
<p>如何解决询问？</p>
<p>我们刚才考虑过离线并按照文本串分组。</p>
<p>我们对于某一个文本串，要如何才能提溜出来其所有的子串呢？</p>
<p>我们考虑这样一个有关fail边的性质：</p>
<blockquote>
<p>由于fail边跳到的是当前字符串在Trie内存在的最长后缀，且如果当前的模式串出现在了文本串内的话，其子串也会出现在文本串内，所以我们可以沿着fail指针一路遍历当前模式串的所有后缀。</p>
</blockquote>
<p>所以对于某一个字符串 $s$，从根节点到代表 $s$ 的节点的这一条路径上所有节点及沿着其fail指针跳到根节点的所有路径上的点代表的字符串都在 $s$ 里面出现过。</p>
<p>这其中包含了 $s$ 的所有子串，因为其的某个子串一定是某一个后缀的某个前缀。</p>
<hr>
<p>既然这个样子了，我们不如就不直接遍历整个AC自动机，而单独把fail指针提溜出来建成一张图遍历好了。</p>
<p>这里还附加了一个特殊性质，就是我们单独把fail指针拎出来之后会构建出来一棵树，而不是一张图。</p>
<p>然后我们考虑记录两个值：当前节点的DFS序和回溯到当前节点时的时间。</p>
<p>我们记录了这两个值以后，就可以单独把这个节点的子树给提溜出来了。</p>
<p>由于我们fail边指向的是当前字符串的最长后缀，那么我们fail树里面某一个节点绝对是其子树内所有点的某一个后缀。<br>那么如果这个节点出现过一次，那么这个节点代表的字符串在其子树内节点所代表的字符串内就必定出现过一次。<br>同理，如果这个节点的子树内的节点代表的字符串出现过一次，这个节点代表的字符串必定也出现过一次。<br>所以我们统计某一个字符串出现的次数的时候，我们需要统计该节点及其子树的所有信息。</p>
<p>那我们好像可以使用树状数组或线段树维护……</p>
<hr>
<p>那我们怎么统计信息呢？</p>
<p>顺序遍历字符串即可。<br>同时还要沿着AC自动机跳。</p>
<p>每一次遇到一个新的字符的时候分类讨论：</p>
<ul>
<li>如果是小写字母，那就沿着AC自动机跳，同时该节点出现的次数<code>+1</code>。</li>
<li>如果是 <code>P</code>，那就意味着（可能）有询问需要处理。遍历所有该字符串下的询问，并存储答案。</li>
<li>如果是 <code>B</code>，那就意味着上一个字符串遍历的所有信息就不算了，该节点出现的次数<code>-1</code>，同时跳到当前节点的父亲。</li>
</ul>
<p>分析完毕。</p>
<hr>
<p>然后是代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, flag = <span class="number">1</span>; <span class="type">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>((c = <span class="built_in">getchar</span>()) &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> x * flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++idx] = b, ne[idx] = h[a], h[a] = idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> dfn[N], out[N], indx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AC</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> v, fail, fa;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, now = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!tr[now].s[s[i] - <span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                tr[now].s[s[i] - <span class="string">&#x27;a&#x27;</span>] = ++cnt;</span><br><span class="line">                tr[cnt].fa = now;</span><br><span class="line">            &#125;</span><br><span class="line">            now = tr[now].s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">            a[++n] = now;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">            now = tr[now].fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_fail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">        <span class="keyword">if</span>(tr[<span class="number">0</span>].s[i])q.<span class="built_in">push</span>(tr[<span class="number">0</span>].s[i]);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tr[u].s[i])</span><br><span class="line">            &#123;</span><br><span class="line">                tr[tr[u].s[i]].fail = tr[tr[u].fail].s[i];</span><br><span class="line">                q.<span class="built_in">push</span>(tr[u].s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tr[u].s[i] = tr[tr[u].fail].s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = ++indx;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span>(v ^ p)<span class="built_in">dfs</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    out[u] = indx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> c[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">segadd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt;= indx; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        c[i] += v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">segsum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        ans += c[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, id;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;query&gt;g[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    <span class="built_in">insert</span>();</span><br><span class="line">    <span class="built_in">build_fail</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">        <span class="built_in">add</span>(i, tr[i].fail), <span class="built_in">add</span>(tr[i].fail, i);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">read</span>(), y = <span class="built_in">read</span>();</span><br><span class="line">        g[y].<span class="built_in">push_back</span>(&#123; x,i &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, now = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; g[j].<span class="built_in">size</span>(); k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> x = g[j][k].x, id = g[j][k].id;</span><br><span class="line">                ans[id] = <span class="built_in">segsum</span>(out[a[x]]) - <span class="built_in">segsum</span>(dfn[a[x]] - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">segadd</span>(dfn[now], <span class="number">-1</span>);</span><br><span class="line">            now = tr[now].fa;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            now = tr[now].s[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="built_in">segadd</span>(dfn[now], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>字符串</tag>
        <tag>AC自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>P2446 [SDOI2010] 大陆争霸 题解</title>
    <url>/solutions/solution-p2446/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">大陆争霸</div>
<div id="problem-info-from">SDOI 2010</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDI0NDY=">Luogu P2446</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMjQ5Ny8=">AcWing 2495</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzE5MjI=">BZOJ #1922</span></li></ul></div>

<hr>
<p>一道看上去显然是最短路，但是实际上并不是那么好想出来的最短路。</p>
<p>因为我们有无限多个机器人，所以我们可以假设我们向每一个城市都派出了无限多个机器人，这样足以解除所有的结界并摧毁该城市。</p>
<p>首先，我们每一个城市可以记录下来两个时间：机器人到达其的时间和其不再受结界保护了的时间。<br>我们最终的答案就是两者取最大值。</p>
<p>机器人到达其的时间我们可以用最短路来求解，不再受结界保护了的时间就是保护其的城市中最晚被到达的那一个的到达时间。</p>
<p>同时我们需要魔改一下最短路的算法，像拓扑排序一样统计一下每一个节点的入度，只不过这里的「入度」只针对于保护与被保护的关系。<br>一旦某一个节点被完全暴露在我们面前，我们就可以将其加入队列中，后面再继续访问之。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>, M = <span class="number">4000010</span>;</span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line">ll w[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line">ll arr[N], acc[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;pro[N];</span><br><span class="line"><span class="type">int</span> ind[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u;</span><br><span class="line">    ll dis;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &gt; (<span class="type">const</span> Node &amp;a) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> dis &gt; a.dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">ll dis[N], vis[N];</span><br><span class="line">priority_queue&lt;Node, vector&lt;Node&gt;, greater&lt;Node&gt;&gt;q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">63</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(arr, <span class="number">63</span>, <span class="built_in">sizeof</span>(arr));</span><br><span class="line">    dis[s] = arr[s] = acc[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123; s,<span class="number">0</span> &#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> p = q.<span class="built_in">top</span>().u;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(vis[p])<span class="keyword">continue</span>;</span><br><span class="line">        vis[p] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span>(arr[v] &gt; dis[p] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                arr[v] = dis[p] + w[i];</span><br><span class="line">                <span class="keyword">if</span>(!ind[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[v] = <span class="built_in">max</span>(acc[v], arr[v]);</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123; v,dis[v] &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v : pro[p])</span><br><span class="line">        &#123;</span><br><span class="line">            acc[v] = <span class="built_in">max</span>(acc[v], dis[p]);</span><br><span class="line">            ind[v]--;</span><br><span class="line">            <span class="keyword">if</span>(!ind[v])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = <span class="built_in">max</span>(acc[v], arr[v]);</span><br><span class="line">                q.<span class="built_in">push</span>(&#123; v,dis[v] &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        ll w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        <span class="built_in">add</span>(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k, x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">        <span class="keyword">while</span>(k--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            ind[i]++;</span><br><span class="line">            pro[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, dis[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>P2469 [SDOI2010] 星际竞速 题解</title>
    <url>/solutions/solution-p2469/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">星际竞速</div>
<div id="problem-info-from">SDOI 2010</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDI0Njk=">Luogu P2469</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMjUwMS8=">AcWing 2499</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzE5Mjc=">BZOJ #1927</span></li></ul></div>

<hr>
<p>题目要求我们求出，从任意一个星球开始走，经过所有星球恰好一次的最短时间。</p>
<p>我们先看一看题目给了我们什么信息：</p>
<p>首先是有 $n$ 颗星球，每一颗星球只能经过一次，我们可以拆点。</p>
<p>然后是正常的星际航道，每一个星际航道都有自己的通过所需时间，这个就加进图中的边里面去。</p>
<p>然后每一颗星球都有一个自己的定位时间，与当前所在位置无关。且我们一开始必须使用这种方式来到达某一个星球。这个不是特别好想出来，暂时搁置。</p>
<p>最后还有一个要求，就是我们只能从编号较小的星球跳到编号较大的星球。</p>
<p>我们从上面的要求里面可以看出来是一个费用流，但是我们并没有建图的思路。</p>
<hr>
<p>我们可以这样想：</p>
<p>既然我们需要每一个星球都经过恰好一次，那么我们可以对这个经过的方式进行分类讨论。</p>
<p>我们有两种方法能经过这里：</p>
<ol>
<li>航道</li>
<li>跃迁</li>
</ol>
<p>至于我们是从哪个星球来的，之后又要去哪里，已经不重要了，我们只关心我们是怎么到当前这一颗星球的。</p>
<p>我们仍然将星球拆成两个点，只不过这一次我们的两个点不再在中间连边来限制流量了。<br>他们有了其他的意义：出发和到达。</p>
<p>顾名思义，代表出发的点连接源点，并向与之有着星际航道联通的星球的到达点连边。代表到达的点连接汇点，同时还连接源点，代表直接跃迁到了这里。</p>
<p>每一条边的容量均为1，费用根据边的类型而定。除了代表跃迁的边和代表星际航道的边费用分别是 $a_i$ 和 $w_i$，其余各边费用都为0。</p>
<p>参考代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = <span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> m, n;</span><br><span class="line"><span class="type">int</span> S, T;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], f[M], w[M], idx;</span><br><span class="line"><span class="type">int</span> q[N], d[N], pre[N], incf[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, f[idx] = c, w[idx] = d, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">    e[idx] = a, f[idx] = <span class="number">0</span>, w[idx] = -d, ne[idx] = h[b], h[b] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="built_in">memset</span>(incf, <span class="number">0</span>, <span class="keyword">sizeof</span> incf);</span><br><span class="line">    q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, incf[S] = INF;</span><br><span class="line">    <span class="keyword">while</span> (hh != tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh++];</span><br><span class="line">        <span class="keyword">if</span> (hh == N) hh = <span class="number">0</span>;</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ver = e[i];</span><br><span class="line">            <span class="keyword">if</span> (f[i] &amp;&amp; d[ver] &gt; d[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[ver] = d[t] + w[i];</span><br><span class="line">                pre[ver] = i;</span><br><span class="line">                incf[ver] = <span class="built_in">min</span>(f[i], incf[t]);</span><br><span class="line">                <span class="keyword">if</span> (!st[ver])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[tt++] = ver;</span><br><span class="line">                    <span class="keyword">if</span> (tt == N) tt = <span class="number">0</span>;</span><br><span class="line">                    st[ver] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> incf[T] &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EK</span><span class="params">(<span class="type">int</span>&amp; flow, <span class="type">int</span>&amp; cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flow = cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">spfa</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = incf[T];</span><br><span class="line">        flow += t, cost += t * d[T];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = T; i != S; i = e[pre[i] ^ <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            f[pre[i]] -= t;</span><br><span class="line">            f[pre[i] ^ <span class="number">1</span>] += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    S = <span class="number">0</span>, T = n * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">        <span class="built_in">add</span>(S, i, <span class="number">1</span>, <span class="number">0</span>);<span class="comment">//代表从这个点出发</span></span><br><span class="line">        <span class="built_in">add</span>(S, i + n, <span class="number">1</span>, a);<span class="comment">//代表直接跃迁到达这个点</span></span><br><span class="line">        <span class="built_in">add</span>(i + n, T, <span class="number">1</span>, <span class="number">0</span>);<span class="comment">//到了这个点，打个卡</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b)<span class="built_in">swap</span>(a, b);<span class="comment">//编号小的连编号大的</span></span><br><span class="line">        <span class="built_in">add</span>(a, b + n, <span class="number">1</span>, c);<span class="comment">//出发连到达，从a出发走星际航道到达b</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> flow, cost;</span><br><span class="line">    <span class="built_in">EK</span>(flow, cost);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>P2480 [SDOI2010] 古代猪文 题解</title>
    <url>/solutions/solution-p2480/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">古代猪文</div>
<div id="problem-info-from">SDOI 2010</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDI0ODA=">Luogu P2480</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8xMDIyOQ==">LibreOJ L10229</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMjE1Lw==">AcWing 213</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzE5NTE=">BZOJ #1951</span></li></ul></div>

<hr>
<p>题目要求我们求出 $g^{\sum_{d | n}C_n^d} \bmod{999911659}$ 的值。</p>
<p>因为 $999911659$ 是一个质数，我们可以根据费马小定理，将式子化简为 $g^{\sum_{d | n}C_n^d \bmod{999911658}} \bmod{999911659}$。</p>
<p>显然 $999911658$ 不是一个质数。将其分解，可得 $999911658 &#x3D; 2 \times 3 \times 4679 \times 35617$。</p>
<p>卢卡斯定理解决不了模数非质数的情况，那么我们就需要把四个质因数都作为模数过一遍卢卡斯定理解决 $C_n^d$ 的值，算出 $\sum_{d | n}C_n^d$ 的值之后用中国剩余定理合并四个式子即可。<br>假设我们四次计算得到的结果分别是 $a_1$、$a_2$、$a_3$、$a_4$，那我们就需要解如下的同余方程组：</p>
<p>$$<br>\begin{cases}<br>x \equiv a_1 \pmod{2} \\<br>x \equiv a_2 \pmod{3} \\<br>x \equiv a_3 \pmod{4679} \\<br>x \equiv a_4 \pmod{35617}<br>\end{cases}<br>$$</p>
<p>得到的 $x$ 就是一个可以接受的数据范围了。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">999911658</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kpd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">kpd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fac[N], inv[N];</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>], b[<span class="number">5</span>] = &#123; <span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4679</span>,<span class="number">35617</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> x, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x &amp; <span class="number">1</span>)res = (res * a) % p;</span><br><span class="line">        a = (a * a) % p;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; p; i++)</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i % p;</span><br><span class="line">    inv[p - <span class="number">1</span>] = <span class="built_in">qpow</span>(fac[p - <span class="number">1</span>], p - <span class="number">2</span>, p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = p - <span class="number">1</span>; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">        inv[i - <span class="number">1</span>] = inv[i] * i % p;</span><br><span class="line">    inv[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; m)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[n] * inv[m] % p * inv[n - m] % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lucas</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; m)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!n)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lucas</span>(n / p, m / p, p) * <span class="built_in">C</span>(n % p, m % p, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, g;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;g);</span><br><span class="line">    <span class="keyword">if</span>(g % (mod + <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">4</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">init</span>(b[k]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i * i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                a[k] = (a[k] + <span class="built_in">lucas</span>(n, i, b[k])) % b[k];</span><br><span class="line">                <span class="keyword">if</span>(i * i != n)</span><br><span class="line">                    a[k] = (a[k] + <span class="built_in">lucas</span>(n, n / i, b[k])) % b[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">        ans = (ans + a[i] * (mod / b[i]) % mod * <span class="built_in">qpow</span>(mod / b[i], b[i] - <span class="number">2</span>, b[i])) % mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">qpow</span>(g, ans, mod + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>数学（题目）</tag>
      </tags>
  </entry>
  <entry>
    <title>P2698 [USACO12MAR] Flowerpot 题解</title>
    <url>/solutions/solution-p2698/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Flowerpot</div>
<div id="problem-info-from">USACO 2012 March Silver</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDI2OTg=">Luogu P2698</span></li></ul></div>

<hr>
<p>题目要求我们在 $x$ 轴上找到最短的一个区间，使得该区间内所有点的纵坐标的极差不小于给定的一个数 $D$。</p>
<p>我们首先可以想到的做法就是二分，将其转化成为一个判定问题。<br>因为一旦找到了一个合法区间，我们如果继续扩展区间端点的话肯定还是能满足条件的，所以可以二分。</p>
<p>那我们考虑怎么判断。</p>
<p>我们可以枚举左端点，然后找到一个最近的右端点使得其满足条件，然后判断区间长度是否小于等于当前二分的长度即可。<br>我们还可以发现，区间右端点是单调不降的，这就给了我们使用滑动窗口的机会。</p>
<p>然后我们就可以好好想一想了。</p>
<p>我们每一次做滑动窗口统计到区间长度的时候，为什么不记录下来然后取最小值呢？毕竟这些答案都是固定的。</p>
<p>于是我们就光荣舍弃掉了二分，虽然复杂度没什么变化，因为复杂度瓶颈是排序。</p>
<p>具体做法就是首先将所有点按照横坐标排个序，然后拿两个单调队列维护区间最大值和区间最小值，不断移动左右端点即可。</p>
<p>参考代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Raindrop</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Raindrop &amp;a)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; a.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="type">int</span> t[N], b[N];</span><br><span class="line"><span class="type">int</span> h1, t1, h2, t2;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;d);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[i].x, &amp;a[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1e9</span>;</span><br><span class="line">    h1 = h2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>; l &lt;= n; l++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(h1 &lt;= t1 &amp;&amp; t[h1] &lt; l)h1++;</span><br><span class="line">        <span class="keyword">while</span>(h2 &lt;= t2 &amp;&amp; b[h2] &lt; l)h2++;</span><br><span class="line">        <span class="keyword">while</span>(a[t[h1]].y - a[b[h2]].y &lt; d &amp;&amp; r &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            r++;</span><br><span class="line">            <span class="keyword">while</span>(h1 &lt;= t1 &amp;&amp; a[t[t1]].y &lt; a[r].y)t1--;</span><br><span class="line">            t[++t1] = r;</span><br><span class="line">            <span class="keyword">while</span>(h2 &lt;= t2 &amp;&amp; a[b[t2]].y &gt; a[r].y)t2--;</span><br><span class="line">            b[++t2] = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[t[h1]].y - a[b[h2]].y &gt;= d)</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, a[r].x - a[l].x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans &gt;= <span class="number">1e9</span>)ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P2824 [HEOI2016/TJOI2016] 排序 题解</title>
    <url>/solutions/solution-p2824/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">排序</div>
<div id="problem-info-from">HEOI 2016<br>TJOI 2016</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDI4MjQ=">Luogu P2824</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yMDU1">LibreOJ L2055</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMjkzMi8=">AcWing 2929</span></li></ul></div>

<hr>
<p>一看见排序我们就感觉开始复杂起来了，毕竟排序是一个复杂而又缓慢的过程。</p>
<p>我们来想简单一点的排序。</p>
<p>如果我们对一个排列进行升序或者降序排序应该很简单，就是将这个排列所包含的数进行正向或者反向输出即可。</p>
<p>假如我们每一次排列的时候都是对一个排列排序该多好啊。</p>
<p>可惜这样无法满足我们接下来的询问，毕竟这样对其没有任何影响，该得不出来还是得不出来。</p>
<p>那么如果我们对的是一个01序列排序呢？</p>
<p>也很简单，就把1全部放在一边，0放在另一边即可。</p>
<p>那这样有什么可以利用的性质呢？</p>
<p>我们可以设想，当我们把大于一个值的数字全部变成1，其余的变成0，再排序，询问的时候得到的就是当前位置比这个值大还是小。</p>
<p>然后我们发现，我们可以利用这个东西进行二分。</p>
<p>我们每一次指定一个值，按照上面的步骤得到询问的位置是0还是1，然后根据答案二分即可。</p>
<p>但是我们每一次还是需要进行枚举，时间仍然没有达到我们的要求。</p>
<p>既然是区间修改了，那么我们就可以使用——线段树！</p>
<p>每一次询问当前区间内有多少个1，然后根据上面的想法区间覆盖即可，而询问区间内1的个数可以使用维护区间和的方式来得出。</p>
<p>然后就显而易见了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> q;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> sum, tag;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].sum = tr[p &lt;&lt; <span class="number">1</span>].sum + tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;root = tr[p], &amp;left = tr[p &lt;&lt; <span class="number">1</span>], &amp;rght = tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(root.tag != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        left.sum = (left.r - left.l + <span class="number">1</span>) * root.tag;</span><br><span class="line">        rght.sum = (rght.r - rght.l + <span class="number">1</span>) * root.tag;</span><br><span class="line">        left.tag = root.tag;</span><br><span class="line">        rght.tag = root.tag;</span><br><span class="line">        root.tag = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].l = l, tr[p].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].tag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l == tr[p].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].sum = (a[tr[p].l] &gt;= k);</span><br><span class="line">        tr[p].tag = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">init</span>(p &lt;&lt; <span class="number">1</span>, k);</span><br><span class="line">    <span class="built_in">init</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, k);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">segchg</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].sum = (tr[p].r - tr[p].l + <span class="number">1</span>) * k;</span><br><span class="line">        tr[p].tag = k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)<span class="built_in">segchg</span>(p &lt;&lt; <span class="number">1</span>, l, r, k);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)<span class="built_in">segchg</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">segsum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)<span class="keyword">return</span> tr[p].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)res += <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)res += <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> op[N], L[N], R[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;op[i], &amp;L[i], &amp;R[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">init</span>(<span class="number">1</span>, mid);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="built_in">segsum</span>(<span class="number">1</span>, L[i], R[i]);</span><br><span class="line">            <span class="keyword">if</span>(op[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">segchg</span>(<span class="number">1</span>, L[i], R[i] - cnt, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">segchg</span>(<span class="number">1</span>, R[i] - cnt + <span class="number">1</span>, R[i], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(op[i] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">segchg</span>(<span class="number">1</span>, L[i], L[i] + cnt - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">segchg</span>(<span class="number">1</span>, L[i] + cnt, R[i], <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> pos = <span class="built_in">segsum</span>(<span class="number">1</span>, q, q);</span><br><span class="line">        <span class="keyword">if</span>(pos == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">            ans = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>P2860 [USACO06JAN] Redundant Paths 题解</title>
    <url>/solutions/solution-p2860/</url>
    <content><![CDATA[<br>
<span id="more"></span>

<div id="problem-card-vis">true</div>
<div id="problem-info-name">Redundant Paths</div>
<div id="problem-info-from">USACO 2006 January Gold</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDI4NjA=">Luogu P2860</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMzk3Lw==">AcWing 395</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzE3MTg=">BZOJ #1718</span></li></ul></div>

<hr>
<p>题目要求我们给一个无向联通图上加几条边，使得整个图变成一个双联通分量。</p>
<p>我们可以想到的一个思路就是，首先跑一遍 Tarjan 算法，将所有的双连通分量缩成点，这样就可以将整张图缩成一棵树。</p>
<p>这样的话，我们可以瞎搞出来一个结论，如下：</p>
<p>我们统计出来所有的叶子结点，记其数目为 $cnt$，我们最终要加的边数最少就是 $\lceil \dfrac{cnt}{2} \rceil$。</p>
<p>首先我们可以随便连接两个叶子结点，将其变为一个基环树。</p>
<p>我们可以证明，一定有一种连接方法，使得得到的基环树是有偶数条支链的。</p>
<p>如果我们得到的基环树有奇数条支链的话，我们可以进行一些转化：</p>
<p>假设当前有这样一个基环树：<br><del>（不如叫他<ruby>1-乙基-3-(1-甲基)乙基环己烷<rt>1-ethyl-3-(1-methyl)ethylcyclohexane</rt></ruby>）</del></p>
<img src="https://s2.loli.net/2022/06/21/8zeqAH9PdpEoUvC.png" alt="p2860-8.png" width="60%" />

<p>我们可以找到一条边，连接两个端点，而其中一个端点有支链。不妨设这个有支链的点为 $y$，另一个点为 $x$。</p>
<p>我们断开连接 $x$ 与 $y$ 的边，然后找到 $y$ 的一条支链最底端的叶子结点 $z$，最后连接 $x$ 与 $z$，减少了一条支链。</p>
<img src="https://s2.loli.net/2022/06/21/QtFkemasBWDjPMO.png" alt="p2860-1.png" width="60%" />

<p><del>（不如叫他<ruby>1,4-二乙基环辛烷<rt>1,4-diethylcyclohexane</rt></ruby>）</del></p>
<p>这样就可以变成只有偶数条支链了。</p>
<p>对于每一条支链的叶子结点，我们找到一个另外的叶子结点，使得他们的LCA在环上。这样就满足了我们“双联通分量”的要求。不懂的可以自己手画一下。</p>
<p>但是有些时候随机连接的方案不一定能让所有的LCA都在环上，比如这个：</p>
<img src="https://s2.loli.net/2022/06/21/8mlIyAtafpFT5dr.png" alt="p2860-2.png" width="60%" />

<p>这样连接就不可以：</p>
<img src="https://s2.loli.net/2022/06/21/NPgAT2fhJlLb41H.png" alt="p2860-3.png" width="60%" />

<p>这样连接就可以：</p>
<img src="https://s2.loli.net/2022/06/21/DJs9KV6TMCf41wG.png" alt="p2860-4.png" width="60%" />

<p>但是很不幸，上面的那种情况就是出现了。<br>现在我们考虑由其转移到一个可行的方案上面。</p>
<p>因为我们总共有偶数个叶子结点，所以我们最终还是会剩偶数个叶子结点没有配对。</p>
<p>我们可以通过不断对部分节点重新配对来缩小问题规模，直至解决问题。</p>
<p>我们先把不对劲的边断开：</p>
<img src="https://s2.loli.net/2022/06/21/NXe28OcVAY4JDqU.png" alt="p2860-5.png" width="60%" />

<p>然后找到已经配好对了的两个子节点，这里选取8和13；<br>断掉其间的边，然后分别找一个子树上的任意一个点连边；</p>
<img src="https://s2.loli.net/2022/06/21/bsOS24dDWPXuGBa.png" alt="p2860-6.png" width="60%" />

<p>然后我们的问题规模就缩小了2，剩下的点如法炮制即可。<br>如果最终只剩两个点，而且不在同一支链上的话就直接连边即可。</p>
<img src="https://s2.loli.net/2022/06/21/pEJU3FSLcOCKkuG.png" alt="p2860-7.png" width="60%" />

<p>最终我们可以得出，我们最少需要连接的边数是 $\lceil \dfrac{cnt}{2} \rceil$ 条。</p>
<p>然后就可以上代码了：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>, M = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> isBridge[M];</span><br><span class="line"><span class="type">int</span> dfn[N], low[N], cnt;</span><br><span class="line"><span class="type">int</span> sta[N], tt;</span><br><span class="line"><span class="type">int</span> scc[N], sc, sz[N];</span><br><span class="line"><span class="type">int</span> deg[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> from)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    low[p] = dfn[p] = ++cnt;</span><br><span class="line">    sta[++tt] = p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j, i);</span><br><span class="line">            low[p] = <span class="built_in">min</span>(low[p], low[j]);</span><br><span class="line">            <span class="keyword">if</span>(dfn[p] &lt; low[j])</span><br><span class="line">                isBridge[i] = isBridge[i ^ <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i != (from ^ <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            low[p] = <span class="built_in">min</span>(low[p], dfn[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[p] == low[p])</span><br><span class="line">    &#123;</span><br><span class="line">        ++sc;</span><br><span class="line">        <span class="keyword">while</span>(sta[tt] != p)</span><br><span class="line">        &#123;</span><br><span class="line">            scc[sta[tt]] = sc;</span><br><span class="line">            sz[sc]++;</span><br><span class="line">            tt--;</span><br><span class="line">        &#125;</span><br><span class="line">        scc[sta[tt]] = sc;</span><br><span class="line">        sz[sc]++;</span><br><span class="line">        tt--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a, b), <span class="built_in">add</span>(b, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">tarjan</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; idx; i++)</span><br><span class="line">        <span class="keyword">if</span>(isBridge[i])</span><br><span class="line">            deg[scc[e[i]]]++;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sc; i++)</span><br><span class="line">        <span class="keyword">if</span>(deg[i] == <span class="number">1</span>)cnt++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (cnt + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>图论</tag>
        <tag>图的连通性</tag>
      </tags>
  </entry>
  <entry>
    <title>P2906 [USACO08OPEN] Cow Neighborhoods 题解</title>
    <url>/solutions/solution-p2906/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Cow Neighborhoods</div>
<div id="problem-info-from">USACO 2008 OPEN Gold</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDI5MDY=">Luogu P2906</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzE2MDQ=">BZOJ #1604</span></li></ul></div>

<hr>
<p>看到这一题的时候我感觉非常熟悉。<br>这不就是<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQwNDc=">[JSOI2010]部落划分</span>吗！<br>只不过这道题给定了奶牛之间的距离，并且是让求连通块的个数以及最大连通块的大小。</p>
<p>（可能只有我一个人觉得很类似罢）</p>
<p>然后做了一发，T了。</p>
<p>一看数据范围：$N \leq 10^5$。</p>
<p>秉承着“N方过百万，暴力碾标算”的精神，我认为是常数的问题加上复杂度跑满，于是就做了一些小小的优化：</p>
<p>首先，我将每一个坐标按照横坐标为第一关键字，纵坐标为第二关键字进行了一发排序。</p>
<p>因为我们不关心节点的编号，所以我们可以直接排序。</p>
<p>然后，我将原题中的曼哈顿距离转变为了切比雪夫距离，从而不让算法跑满。</p>
<p><img src="https://s2.loli.net/2022/06/07/VQ4sIFJ5MnOmfdW.jpg" alt="manhattan.jpg"></p>
<p>这是曼哈顿距离，其在 $k$ 维空间中的定义为：</p>
<p>$$<br>Dis(x,y) &#x3D; \sum_{i&#x3D;1}^k |x_i-y_i|<br>$$</p>
<p>放到二维平面里面就是 $Dis(u,v) &#x3D; |x_u-x_v|+|y_u-y_v|$。</p>
<p><img src="https://s2.loli.net/2022/06/07/pM4XwIRPrUaeiSW.jpg" alt="chebyshev.jpg"></p>
<p>这是切比雪夫距离，其在 $k$ 维空间中的定义为：</p>
<p>$$<br>Dis(x,y) &#x3D; \max_{i&#x3D;1}^k |x_i-y_i|<br>$$</p>
<p>放到二维平面里面就是 $Dis(u,v) &#x3D; \max(|x_u-x_v|,|y_u-y_v|)$。</p>
<p>如果我们将曼哈顿距离转化为了切比雪夫距离的话，就可以利用单调队列来取出 $[x-c,x+c]$ 的一段来，并在其中进行判断并连边即可，可以减小算法复杂度。</p>
<p>怎么转化呢？</p>
<p>我们考虑对于某一个点距离为定值的点构成的集合。<br>我们设这个点是原点 $(0,0)$，这个距离为 $c$。</p>
<p>当这个距离是曼哈顿距离的时候，我们这些点构成的集合就是一个倾斜了$45^{\circ}$的正方形，顶点分别为 $(0,c)$，$(c,0)$，$(0,-c)$，$(-c,0)$。</p>
<p>当这个距离是切比雪夫距离的时候，我们这些点构成的集合就是一个正方形，顶点分别为 $(c,c)$，$(c,-c)$，$(-c,-c)$，$(-c,c)$。</p>
<p>然后我们就可以发现，我们将曼哈顿距离下的这个正方形旋转$45^{\circ}$并扩大$\sqrt{2}$倍之后就是切比雪夫距离下的这个正方形。</p>
<p>对于一个点的情况下，我们将其坐标变为 $(x+y,x-y)$，可以达到同样的效果。</p>
<p>最后试了一发，T了。<br>看来N方还是过不了十万。</p>
<p>尝试减小连边的次数，我们可以尝试只连线性级别的边。</p>
<p>对于每一个点，我们只考虑与其左边的点连边。<br>同时，每一个点我们最多只连两条边，这在保证了联通性的前提下大幅度减少了连边的次数。</p>
<p>连哪两个点呢？</p>
<p>纵坐标与当前点最接近的两个即可。<br>其中一个在当前点上方，一个在当前点下方。</p>
<p>考虑正确性。</p>
<p>因为其他边都是冗余的，所以只连这两条边即可。</p>
<p>对于任意两者均可触及的点，两点向其连边之后得到的是一个三角形；<br>又因为当前点较靠后，所以我们可以断开当前点与其连结的边，这样也能保证连通性。</p>
<p>证毕。</p>
<p>然后就是考虑如何快速找到与当前点纵坐标最接近的两个点。</p>
<p>我们可以使用<code>set</code>来维护，使用<code>lower_bound()</code>来进行查找。</p>
<p>我们记录当前<code>set</code>维护的左端点，并尝试将其右移，直到左端点所对应的点与当前点的切比雪夫距离不超过 $c$。<br>然后就可以使用<code>lower_bound()</code>查找了，找到对应的节点之后连边即可。<br>最后要把当前节点加入<code>set</code>中。</p>
<p>交一发，过了。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c)) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) f = -f; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="number">48</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll c;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    ll x, y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node &amp;a) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x == a.x ? y &lt; a.y : x &lt; a.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x)p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>&lt;<span class="type">int</span>&gt;(), c = <span class="built_in">read</span>&lt;ll&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll x = <span class="built_in">read</span>&lt;ll&gt;(), y = <span class="built_in">read</span>&lt;ll&gt;();</span><br><span class="line">        a[i] = &#123; x + y,x - y &#125;;</span><br><span class="line">        p[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    set&lt; pair&lt;ll, <span class="type">int</span>&gt; &gt;s;</span><br><span class="line">    set&lt; pair&lt;ll, <span class="type">int</span>&gt; &gt;::iterator it;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(a[<span class="number">1</span>].y, <span class="number">1</span>));</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>((<span class="number">1ll</span> &lt;&lt; <span class="number">60</span>), <span class="number">0</span>));</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>((<span class="number">-1ll</span> &lt;&lt; <span class="number">60</span>), <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>, l = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(a[i].x - a[l].x &gt; c)</span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">erase</span>(<span class="built_in">make_pair</span>(a[l].y, l));</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        it = s.<span class="built_in">lower_bound</span>(<span class="built_in">make_pair</span>(a[i].y, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">if</span>(it-&gt;first - a[i].y &lt;= c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = it-&gt;second;</span><br><span class="line">            <span class="type">int</span> pa = <span class="built_in">find</span>(i), pb = <span class="built_in">find</span>(j);</span><br><span class="line">            <span class="keyword">if</span>(pa != pb)p[pa] = pb;</span><br><span class="line">        &#125;</span><br><span class="line">        it--;</span><br><span class="line">        <span class="keyword">if</span>(a[i].y - it-&gt;first &lt;= c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = it-&gt;second;</span><br><span class="line">            <span class="type">int</span> pa = <span class="built_in">find</span>(i), pb = <span class="built_in">find</span>(j);</span><br><span class="line">            <span class="keyword">if</span>(pa != pb)p[pa] = pb;</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(a[i].y, i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>, maxn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt += (<span class="built_in">find</span>(i) == i);</span><br><span class="line">        maxn = <span class="built_in">max</span>(maxn, ++sum[<span class="built_in">find</span>(i)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, cnt, maxn);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>并查集</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>P2986 [USACO10MAR] Great Cow Gathering 题解</title>
    <url>/solutions/solution-p2986/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Great Cow Gathering</div>
<div id="problem-info-from">USACO 2010 March Gold</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDI5ODY=">Luogu P2986</span></li></ul></div>

<hr>
<p>简述一下题目：<br>题目给定了一张带有边权的树，要求我们对于每一个点 $u$ 求出 $\displaystyle \sum_{v \in S} c_v \times \operatorname{dis}(u,v)$，并输出所有点的答案中的最小值。</p>
<p>首先我们可以很简单地通过一次DFS求出来树根的答案，就是 $\displaystyle \sum_{v \in S} c_v \times \operatorname{dis}(1,v)$。</p>
<p>对于每一个节点，我们记录两个信息：该节点的答案<code>ans</code>和其子树内的 $c_i$ 之和<code>sum</code>。<br>当我们DFS回溯到该节点 $u$ 的时候，我们的答案就是 $\displaystyle \sum_{v \in {\text{son of} u}} \operatorname{ans}(v) + \operatorname{sum}(v) \times \operatorname{dis}(u,v)$。</p>
<p>为了不与最终的答案冲突，这里将初步的答案命名成了<code>dis</code>。</p>
<figure class="highlight cpp"><figcaption><span>第一次DFS代码</span></figcaption><table><tr><td class="code"><pre><span class="line">ll sum[N], dis[N];</span><br><span class="line">ll ans[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[p] = c[p];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(e[i], p);</span><br><span class="line">        sum[p] += sum[e[i]];</span><br><span class="line">        dis[p] += dis[e[i]] + sum[e[i]] * w[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后考虑怎么转移到其他节点。<br>这里就可以使用换根DP来求解了。</p>
<p>考虑我们从一个节点转移到其的一个子节点。<br>当前我们已经求出了当前这个节点的答案，此时我们所有的奶牛已经到达了当前的节点。<br>我们转移到其子节点的时候，可以等价成把所有的奶牛移动到这个子节点。<br>那么在该子节点子树中的所有奶牛都少走了 $(u,v)$ 这个边，而剩下的所有奶牛都多走了这一条边。<br>那么我们第二遍DFS的代码如下：</p>
<figure class="highlight cpp"><figcaption><span>第而次DFS代码</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa)<span class="keyword">continue</span>;</span><br><span class="line">        ans[e[i]] = ans[p] + (k - <span class="number">2</span> * sum[e[i]]) * w[i];</span><br><span class="line">        <span class="built_in">dfs2</span>(e[i], p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们的答案就出来了，求个最小值输出即可。</p>
<p>完整代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> c[N], w[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line">ll sum[N], dis[N];</span><br><span class="line">ll ans[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[p] = c[p];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(e[i], p);</span><br><span class="line">        sum[p] += sum[e[i]];</span><br><span class="line">        dis[p] += dis[e[i]] + sum[e[i]] * w[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa)<span class="keyword">continue</span>;</span><br><span class="line">        ans[e[i]] = ans[p] + (k - <span class="number">2</span> * sum[e[i]]) * w[i];</span><br><span class="line">        <span class="built_in">dfs2</span>(e[i], p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]);</span><br><span class="line">        k += c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        <span class="built_in">add</span>(u, v, w), <span class="built_in">add</span>(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    ans[<span class="number">1</span>] = dis[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    ll res = INT64_MAX;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        res = <span class="built_in">min</span>(res, ans[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>换根DP</tag>
      </tags>
  </entry>
  <entry>
    <title>P3047 [USACO12FEB] Nearby Cows 题解</title>
    <url>/solutions/solution-p3047/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Nearby Cows</div>
<div id="problem-info-from">USACO 2012 February Gold</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMwNDc=">Luogu P3047</span></li></ul></div>

<hr>
<p>简述一下题意，题目要求我们对于每一个点求出距离其不超过 $k$ 的点的点权和。</p>
<p>操作很简单，我们只需要开一个DP数组，记录下来每一个点与其距离为 $j \in \{ j|[0,k] \}$ 的点权和即可。</p>
<p>首先我们DFS一遍，记录下来每一个点子树中与其距离为 $j \in \{ j|[0,k] \}$ 的点权和：</p>
<figure class="highlight cpp"><figcaption><span>第一遍DFS</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[p][<span class="number">0</span>] = w[p];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(e[i], p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">            f[p][j + <span class="number">1</span>] += f[e[i]][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后考虑其祖先节点对其的影响。</p>
<p>我们通过再一次的DFS来统计影响，所以我们只需要计算该节点的父亲对其的影响即可。</p>
<p>举个例子：<br>我们现在节点 $x$ 统计答案，其父亲为 $y$。<br>对于每一个与 $y$ 相距 $j \in \{ j|[0,k-1] \}$ 的节点，其与 $x$ 的距离为 $j+1$。</p>
<p>根据这个我们可以统计出 $y$ 对 $x$ 的影响，然后就可以得到答案了。</p>
<figure class="highlight cpp"><figcaption><span>第二遍DFS</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = k; j &gt;= <span class="number">2</span>; j--)</span><br><span class="line">            f[e[i]][j] -= f[e[i]][j - <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">            f[e[i]][j + <span class="number">1</span>] += f[p][j];</span><br><span class="line">        <span class="built_in">dfs2</span>(e[i], p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[p][<span class="number">0</span>] = w[p];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(e[i], p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">            f[p][j + <span class="number">1</span>] += f[e[i]][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = k; j &gt;= <span class="number">2</span>; j--)</span><br><span class="line">            f[e[i]][j] -= f[e[i]][j - <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">            f[e[i]][j + <span class="number">1</span>] += f[p][j];</span><br><span class="line">        <span class="built_in">dfs2</span>(e[i], p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= k; j++)sum += f[i][j];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>P3050 [USACO12MAR] Large Banner 题解</title>
    <url>/solutions/solution-p3050/</url>
    <content><![CDATA[<br>
<span id="more"></span>

<div id="problem-card-vis">true</div>
<div id="problem-info-name">Large Banner</div>
<div id="problem-info-from">USACO 2012 March Gold</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMwNTA=">Luogu P3050</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzI2MTk=">BZOJ #2619</span></li></ul></div>

<hr>
<p>机房大佬 <span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3VzZXIvMjYxNzcz">$\text{Y}{\color{Red}\text{ouwike}}$</span> 有一个 $O(n \log n)$ 的解法，但是祂不屑于写题解，就让我来帮他写了。</p>
<hr>
<p>首先我们考虑怎样才能让一个线段除了端点之外不经过整点。<br>这里我们不考虑位置，只考虑其形状。那就可以让线段的一个点在 $(0,0)$，另一个点在 $(i,j)$。<br>可以发现，当 $i$ 与 $j$ 互质，即 $\gcd(i,j) &#x3D; 1$ 的时候，该线段才不会经过整点。<br>那么这样的线段的个数如下：</p>
<p>$$<br>\sum_{i&#x3D;1}^n \sum_{j&#x3D;1}^m [\gcd(i,j)&#x3D;1]<br>$$</p>
<p>注意到我们线段的端点不一定需要在原点上，并且线段的方向也有两种，那么完整的式子如下：</p>
<p>$$<br>2 \sum_{i&#x3D;1}^n \sum_{j&#x3D;1}^m [\gcd(i,j)&#x3D;&#x3D;1] (n-i+1)(m-j+1)<br>$$</p>
<p>考虑莫比乌斯反演：</p>
<p>$$<br>2 \sum_{i&#x3D;1}^n \sum_{j&#x3D;1}^m \sum_{p|i,p|j} \mu(p) (n-i+1)(m-j+1)<br>$$</p>
<p>现在我们可以开始考虑线段长度的限制了。<br>这个限制我们直接加在 $j$ 上，让式子变成这个样子：</p>
<p>$$<br>2 \sum_{i&#x3D;1}^n \sum_{j&#x3D;\lceil \sqrt{l^2-i^2} \rceil}^{\lfloor \sqrt{h^2-i^2} \rfloor} \sum_{p|i,p|j} \mu(p) (n-i+1)(m-j+1)<br>$$</p>
<p>将带有 $p$ 的求和号拿到带有 $j$ 的求和号的前面，并将枚举 $j$ 改为枚举 $\frac{j}{p}$：</p>
<p>$$<br>2 \sum_{i&#x3D;1}^n \sum_{p|i} \mu(p) \sum_{j&#x3D;\lceil \frac{\sqrt{l^2-i^2}}{p} \rceil}^{\lfloor \frac{\sqrt{h^2-i^2}}{p} \rfloor} (n-i+1)(m-jp+1)<br>$$</p>
<p>将最后的多项式拆开：</p>
<p>$$<br>2 \sum_{i&#x3D;1}^n \sum_{p|i} \mu(p) \sum_{j&#x3D;\lceil \frac{\sqrt{l^2-i^2}}{p} \rceil}^{\lfloor \frac{\sqrt{h^2-i^2}}{p} \rfloor} (n-i+1)(m+1)-(n-i+1)jp<br>$$</p>
<p>将其拆成两个式子。<br>第一个式子如下：</p>
<p>$$<br>2 \sum_{i&#x3D;1}^n \sum_{p|i} \mu(p) \sum_{j&#x3D;\lceil \frac{\sqrt{l^2-i^2}}{p} \rceil}^{\lfloor \frac{\sqrt{h^2-i^2}}{p} \rfloor} (n-i+1)(m+1)<br>$$</p>
<p>发现带有 $j$ 的求和号的后面那一部分与 $j$ 无关，将其提出来：</p>
<p>$$<br>\begin{align}<br>&amp; 2 \sum_{i&#x3D;1}^n \sum_{p|i} \mu(p) (n-i+1)(m+1) \sum_{j&#x3D;\lceil \frac{\sqrt{l^2-i^2}}{p} \rceil}^{\lfloor \frac{\sqrt{h^2-i^2}}{p} \rfloor} 1  \\<br>&#x3D;&amp; 2 \sum_{i&#x3D;1}^n \sum_{p|i} \mu(p) (n-i+1)(m+1)(\lfloor \frac{\sqrt{h^2-i^2}}{p} \rfloor - \lceil \frac{\sqrt{l^2-i^2}}{p} \rceil+1)<br>\end{align}<br>$$</p>
<p>第二个式子如下：</p>
<p>$$<br>\begin{align}<br>&amp; 2 \sum_{i&#x3D;1}^n \sum_{p|i} \mu(p) \sum_{j&#x3D;\lceil \frac{\sqrt{l^2-i^2}}{p} \rceil}^{\lfloor \frac{\sqrt{h^2-i^2}}{p} \rfloor} (n-i+1)jp \\<br>&#x3D;&amp; 2 \sum_{i&#x3D;1}^n \sum_{p|i} \mu(p) p (n-i+1) \sum_{j&#x3D;\lceil \frac{\sqrt{l^2-i^2}}{p} \rceil}^{\lfloor \frac{\sqrt{h^2-i^2}}{p} \rfloor} j<br>\end{align}<br>$$</p>
<p>而最后一个求和号可以用等差数列求和公式来做。</p>
<p>同时注意一个边界条件：当线段长度为 $1$ 的时候，相邻两个点之间连的边也是可以的，需要特判来进行修正。</p>
<hr>
<p>我们在预处理莫比乌斯函数的时候就是 $O(n \log n)$ 的时间复杂度，而枚举的时候只枚举了一个 $i$ 和 $i$ 的所有约数，枚举约数的时间复杂度是单个 $O(\log n)$ 的，总体来说也是 $O(n \log n)$。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> mu[N], prime[N], vis[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; d[N];</span><br><span class="line"><span class="type">int</span> n, m, mod;</span><br><span class="line"><span class="type">int</span> l, h;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moebius</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) prime[++prime[<span class="number">0</span>]] = i, mu[i] = mod - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= prime[<span class="number">0</span>] &amp;&amp; i * prime[j] &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                mu[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mu[i * prime[j]] = mod - mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="number">1ll</span> * (<span class="number">1</span> + n) * n) &gt;&gt; <span class="number">1</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> lim = <span class="built_in">min</span>(m, (<span class="type">int</span>)<span class="built_in">sqrt</span>(<span class="number">1ll</span> * h * h - <span class="number">1ll</span> * i * i));</span><br><span class="line">        <span class="type">int</span> lim2 = <span class="built_in">max</span>(<span class="number">1</span>, (<span class="type">int</span>)<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(<span class="number">1ll</span> * l * l - <span class="number">1ll</span> * i * i)));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p : d[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(lim / p &gt;= (lim2 - <span class="number">1</span>) / p + <span class="number">1</span>)</span><br><span class="line">                ans = (ans + <span class="number">1ll</span> * (n - i + <span class="number">1</span>) * (m + <span class="number">1</span>) % mod * mu[p] % mod * ((lim / p) - ((lim2 - <span class="number">1</span>) / p + <span class="number">1</span>) + <span class="number">1</span>) % mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> lim = <span class="built_in">min</span>(m, (<span class="type">int</span>)<span class="built_in">sqrt</span>(<span class="number">1ll</span> * h * h - <span class="number">1ll</span> * i * i));</span><br><span class="line">        <span class="type">int</span> lim2 = <span class="built_in">max</span>(<span class="number">1</span>, (<span class="type">int</span>)<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(<span class="number">1ll</span> * l * l - <span class="number">1ll</span> * i * i)));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p : d[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(lim / p &gt;= (lim2 - <span class="number">1</span>) / p + <span class="number">1</span>)</span><br><span class="line">                ans = (ans + mod - <span class="number">1ll</span> * (n - i + <span class="number">1</span>) * p % mod * mu[p] % mod * (<span class="built_in">sum</span>(lim / p) + mod - <span class="built_in">sum</span>(((lim2 - <span class="number">1</span>) / p + <span class="number">1</span>) - <span class="number">1</span>)) % mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ans + ans) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;h);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;mod);</span><br><span class="line">    <span class="built_in">moebius</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt;= n; j += i)</span><br><span class="line">            d[j].<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">1</span>)</span><br><span class="line">        ans = (ans + (<span class="number">1ll</span> * n * (m + <span class="number">1</span>) % mod + <span class="number">1ll</span> * (n + <span class="number">1</span>) * m % mod) % mod) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>数学（题目）</tag>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>P3174 [HAOI2009] 毛毛虫 题解</title>
    <url>/solutions/solution-p3174/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">毛毛虫</div>
<div id="problem-info-from">HAOI 2009</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMxNzQ=">Luogu P3174</span></li></ul></div>

<hr>
<p>首先解读题目中的信息。<br>一条「毛毛虫」是由树上的一条链以及与该链直接相连但不在链上的节点组成的。<br>题目要求我们找出包含节点数最多的一条毛毛虫。</p>
<p>我们以此做一个DP。</p>
<p>为叙述方便，下面「最长链」的意义是包含节点数最多的「毛毛虫」，「次长链」代表包含节点次多的「毛毛虫」。<br>为区分正常意义与此处的意义，使用上面意义的词语会用直角括号包裹。</p>
<p>不管是什么树形DP我们都得DFS来遍历每一个点。<br>对于每一个点，我们记录下来其子树中以其为链顶的「最长链」，然后随着不断回溯不断更新每一个节点的「最长链」的值。</p>
<p>当然，答案链可能是两条竖直向上的链拼接在一起得到的，所以我们还需要记录以当前点为链顶的「次长链」，然后统计出来每一个点的答案，最后取较大的值。</p>
<p><big><strong>代码实现：</strong></big></p>
<p>对于每一个节点，我们记录一个<code>maxn</code>，一个<code>maxm</code>，和一个<code>sson</code>。<br>分别代表的是其所有以其子节点为链顶的「最长链」（但不含该节点）的最大值，<br>所有以其子节点为链顶的「次长链」（但不含该节点）的最大值，和该节点子节点的个数。<br>每一个节点的答案就是<code>maxn + maxm + sson + 1</code>。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxn[N], maxm[N];</span><br><span class="line"><span class="type">int</span> stre[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(e[i], p);</span><br><span class="line">        stre[p]++;</span><br><span class="line">        <span class="type">int</span> v = maxn[e[i]] + stre[e[i]];</span><br><span class="line">        <span class="keyword">if</span>(v &gt; maxn[p])maxm[p] = maxn[p], maxn[p] = v;</span><br><span class="line">        <span class="keyword">else</span> maxm[p] = <span class="built_in">max</span>(maxm[p], v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, maxn[i] + maxm[i] + stre[i] + <span class="number">1</span> + (i != <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
















































































































]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>P3188 [HNOI2007] 梦幻岛宝珠 题解</title>
    <url>/solutions/solution-p3188/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">梦幻岛宝珠</div>
<div id="problem-info-from">HNOI 2007</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMxODg=">Luogu P3188</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMjE0OS8=">AcWing 2147</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzExOTA=">BZOJ #1190</span></li></ul></div>

<hr>
<p>题目很明显是一个背包问题，但是其背包容量很大，是 $10^{10}$ 级别的。<br>这样明显不是普通背包算法可以应付得来的，但我们又不能不用背包来解决。<br>一定有什么地方可以优化。</p>
<p>我们观察题目给的条件，发现题目保证 $\sum n \leq 2000$，且每一个物品的重量都可以拆分为 $a \times 2^b$ 的形式，其中 $a \leq 10,b \leq 30$。</p>
<p>这样我们就可以将每一个物品按照 $b$ 来分组，对于每一个组内我们跑一个背包，然后再把这些组再跑一个背包就可以了。</p>
<p>对于每一组内跑背包的时候，我们背包的容量就是当前这一组内物品个数的十倍，因为所有的 $a$ 都不超过10，所以 $\sum a$ 肯定也是小于当前组内物品个数10倍的。</p>
<p>做组间背包的时候，我们从低位到高位做。<br>我们想，每一次我们都从当前位的容量内拿出来 $k$ 去给下面的部分做背包。对于剩余的容量做完背包之后，我们就将下面对容量为 $k$ 的背包做出来的结果直接加上来即可。</p>
<p>具体实现的时候，我们定义两个二维数组 $f$ 和 $g$。</p>
<p>$f[i][k]$ 代表的是对从低到高第 $i$ 位（或者说 $b&#x3D;i$）的物品进行容量为 $k$ 的背包得出的结果。</p>
<p>求 $f$ 数组的时候我们就直接按照正常背包做就可以了。</p>
<p>而 $g[i][j]$ 代表的就是当使用 $b$ 为 $i$ 的物品进行容量为 $j$ 的背包时，$b$ 小于 $i$ 的所有物品占满了 $W$ 的后 $i$ 位所代表的容量的值。</p>
<p>举个例子，我们最后要输出的结果就是 $g[\lfloor \log_2{W} \rfloor][1]$ 的值。而这个代表我们对最高位上做背包时，背包容量为1（也只能是1），同时除了最高位以外的所有位代表的容量都被占满了的时候的最大值。</p>
<p>而在更新 $g$ 数组的时候，我们遵循下面的转移方程：</p>
<p>$$<br>g[i][j] &#x3D; \max(g[i][j],f[i][j-k]+g[i-1][\min(10n,2k+(\frac{W}{2^{i-1}} \&amp; 1))])<br>$$</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, M = <span class="number">40</span>;</span><br><span class="line"><span class="type">int</span> n, c;</span><br><span class="line"><span class="type">int</span> w[N], v[N];</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt;h[M];</span><br><span class="line"><span class="type">int</span> f[M][N * M];</span><br><span class="line"><span class="type">int</span> g[M][N * M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(w, <span class="number">0</span>, <span class="built_in">sizeof</span>(w));</span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="built_in">sizeof</span>(v));</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="built_in">sizeof</span>(g));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)h[i].<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;c);</span><br><span class="line">    <span class="keyword">while</span>(n != <span class="number">-1</span> &amp;&amp; c != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;w[i], &amp;v[i]);</span><br><span class="line">            <span class="type">int</span> b = <span class="built_in">log2</span>(<span class="built_in">lowbit</span>(w[i]));</span><br><span class="line">            h[b].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(w[i] &gt;&gt; b, v[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="built_in">log2</span>(c);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> t = <span class="number">0</span>; t &lt;= cnt; t++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; h[t].<span class="built_in">size</span>(); i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">10</span> * h[t].<span class="built_in">size</span>(); j &gt;= h[t][i].first; j--)</span><br><span class="line">                    f[t][j] = <span class="built_in">max</span>(f[t][j], f[t][j - h[t][i].first] + h[t][i].second);</span><br><span class="line">        <span class="comment">//给每一组内跑背包</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span> * h[<span class="number">0</span>].<span class="built_in">size</span>(); i++)</span><br><span class="line">            g[<span class="number">0</span>][i] = f[<span class="number">0</span>][i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> t = <span class="number">1</span>; t &lt;= cnt; t++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">10</span> * n; j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= j; i++)</span><br><span class="line">                    g[t][j] = <span class="built_in">max</span>(g[t][j], f[t][j - i] + g[t - <span class="number">1</span>][<span class="built_in">min</span>(<span class="number">10</span> * n, i * <span class="number">2</span> + ((c &gt;&gt; (t - <span class="number">1</span>)) &amp; <span class="number">1</span>))]);</span><br><span class="line">        <span class="comment">//跑组与组之间的背包</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, g[cnt][<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P3243 [HNOI2015] 菜肴制作 题解</title>
    <url>/solutions/solution-p3243/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">菜肴制作</div>
<div id="problem-info-from">HNOI2015</div>
<div id="problem-info-difficulty">普及+ /提高</div>
<div id="problem-info-color">#52c413</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMyNDM=">Luogu P3243</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yMTE0">LibreOJ L2114</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMjIyNi8=">AcWing 2224</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzQwMTA=">BZOJ #4010</span></li></ul></div>

<hr>
<p>这里我们需要注意一下题目的要求。<br>我们不能直接求出来字典序最小的序列，因为题目要求的是：</p>
<blockquote>
<ol>
<li>在满足所有限制条件下，1号菜肴优先制作。</li>
<li>在满足上述条件下，2号菜肴优先制作。</li>
<li>在满足上述条件下，3号菜肴优先制作。</li>
<li>以此类推……</li>
</ol>
</blockquote>
<p>我们可以想到，对于这种比较方式，我们可以通过贪心地让最后的数最大来达到要求。<br>假设这个数为 $x$，其可以让所有小于 $x$ 的数尽量靠前，同时因为 $x$ 的位置固定了，那些大于 $x$ 的数也就没有比较的需求了。<br>因此我们可以将其转化为其反串的字典序最大。</p>
<p>对于这一些关系，我们可以将时间的流向反过来，同时将关系的内容变成“菜肴 $i$ 必须后于菜肴 $j$ 制作”的形式。<br>之后我们可以将这种关系看做一些单向边，然后建立其反图，跑一遍拓扑排序就可以了。<br>因为我们还需要字典序最大，所以我们采用堆而不是队列来存储数据，每一次贪心地从堆顶拿出元素放到答案序列的尾部即可。</p>
<p>然后就是关于特判无解的情况。<br>无解只有一种情况：图中出现了环。自环也算。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>, M = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> deg[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line"><span class="type">int</span> ans[N], tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="type">bool</span> isValid = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span>(u == v)isValid = <span class="literal">true</span>;</span><br><span class="line">        deg[u]++;</span><br><span class="line">        <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(isValid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Impossible!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(!deg[i])q.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ans[++tot] = u;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; ~i; i = ne[i])</span><br><span class="line">            <span class="keyword">if</span>(!(--deg[e[i]]))q.<span class="built_in">push</span>(e[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tot &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Impossible!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n; i; i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(deg, <span class="number">0</span>, <span class="built_in">sizeof</span>(deg));</span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>贪心</tag>
        <tag>拓扑排序</tag>
      </tags>
  </entry>
  <entry>
    <title>P3452 [POI2007] BIU-Offices 题解</title>
    <url>/solutions/solution-p3452/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">BIU-Offices</div>
<div id="problem-info-from">POI 2007</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM0NTI=">Luogu P3452</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yNjQ5">LibreOJ L2649</span></li></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzEwOTg=">BZOJ #1098</span></li></ul></div>

<hr>
<p>假如说把两人互相知道对方的电话号码看做无向边，把大楼看做集合，那么题目中说的“在不同楼里工作需要相互知道电话号码”可以看做“在不同集合中的点需要直接连边”。<br>那么在同一集合里面的点就绝不能直接连边，因为我们需要最大化集合的数量。否则我们就有可能将直接连边的两个点中的其中一个单独分到一个集合内。</p>
<p>那么我们看一下原图的补图，在同一个集合内的就必须不能相互到达在补图中就意味着能相互到达。<br>那么我们就可以将题目转化成为补图中求连通块的个数。</p>
<p>因为一旦原图十分稀疏，那么补图就会是接近 $O(n^2)$ 的水平了，所以我们不能直接遍历补图。<br>而根据题目的信息，原图的稠密程度不是很高，补图会十分稠密，再次否决了直接遍历补图的想法。</p>
<p>因为我们只需要求出连通块相关的信息，那我们就可以只求出来补图的生成树。<br>什么生成树呢？<br>考虑一下一个叫做「BFS树」的东西。<br>顾名思义，其依赖的是一次BFS，复杂度 $O(n+m)$，可以通过本题。</p>
<p>我们需要建立一个链表，存储所有的点，来快速遍历我们没有加入到生成树中的节点。</p>
<p>每一次我们遍历到一个节点的时候，我们将其第一个不能直接走到的点与其连上边即可。</p>
<p>具体操作看代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = <span class="number">4000010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">List</span><span class="comment">//链表</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> pr, ne;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> vis[N], cov[N];</span><br><span class="line"><span class="type">int</span> sz[N], sc;</span><br><span class="line">List re[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    re[re[x].ne].pr = re[x].pr;</span><br><span class="line">    re[re[x].pr].ne = re[x].ne;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[s] = <span class="literal">true</span>;</span><br><span class="line">    sz[++sc] = <span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> p = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">            <span class="keyword">if</span>(!vis[e[i]])</span><br><span class="line">                cov[e[i]] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = re[<span class="number">0</span>].ne; i != <span class="number">-1</span>; i = re[i].ne)</span><br><span class="line">        &#123;<span class="comment">//遍历链表</span></span><br><span class="line">            <span class="keyword">if</span>(!cov[i])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[i] = <span class="literal">true</span>;</span><br><span class="line">                sz[sc]++;</span><br><span class="line">                <span class="built_in">del</span>(i);</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> cov[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    re[<span class="number">0</span>] = &#123; <span class="number">-1</span>,<span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        re[i] = &#123; i - <span class="number">1</span>,i + <span class="number">1</span> &#125;;</span><br><span class="line">    re[n].ne = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])<span class="built_in">bfs</span>(i);</span><br><span class="line">    <span class="built_in">sort</span>(sz + <span class="number">1</span>, sz + <span class="number">1</span> + sc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sc);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sc; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sz[i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>建图</tag>
        <tag>生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>P3462 [POI2007] 砝码 ODW 题解</title>
    <url>/solutions/solution-p3462/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">砝码 ODW</div>
<div id="problem-info-from">POI 2007</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM0NjI=">Luogu P3462</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yNjYw">LibreOJ L2660</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMzY5My8=">AcWing 3690</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzExMTA=">BZOJ #1110</span></li></ul></div>

<hr>
<p>这道题要求我们将一堆砝码放进一堆容器里面，要求每个容器里面砝码的总重量不超过容器的容量。题目要求我们求出并最大化能装进容器内砝码数量。</p>
<p>首先我们可以确定一点，我们从最小的砝码开始装，一定是较优的。</p>
<p>但是题目给出的砝码总数和容器总数都是 $10^5$ 级别的，我们不能每一个砝码都搜一遍，不仅复杂度不对，还保证不了正确性。</p>
<p>但是，题目保证任何两个砝码，其中一个的重量必须是另一个的整数倍。<br>所以说，对于每一个砝码，剩余的砝码中一部分是它的整数倍，而剩余的能整除它。</p>
<p>这样我们就可以把这个转化为类似进制的东西，只不过不是严格的每两位之比相同的那种情况。</p>
<p>我们只需要找到最小的那个砝码，这就是我们进制的基数，我们设这个数为 $k_1$。<br>然后我们找到每一种不同的砝码重量，我们将其化为一个进制位。我们设这样的从小到大分别是 $k_2,k_3,k_4,\cdots$。</p>
<p>根据这一堆基数 $k$，我们将所有的容器拆成 $(a_0,a_1k_1,a_2k_2,a_3k_3,\cdots)$ 这样的形式。<br>因为我们所有的砝码都是 $k$ 的整数倍，所以这个 $a_0$ 就直接舍弃不要。剩下的同意一下所有容器中 $a_i$ 的和就可以了。</p>
<p>我们拆成这样的类 $k$ 进制了之后就不需要考虑装不下或者砝码跨容器的情况了。原因如下：</p>
<p>我们首先将所有的砝码从小到大排序。</p>
<p>然后我们从小到大放进DFS里面搜一下。<br>如果当前位还有剩余，就可以直接减掉。<br>如果没有剩余了，那就往上面搜，从前面的位借。若果借到最高位都借不到的话就输出当前砝码数量就可以了。<br>因为我们每一个砝码的重量一定对应一个进制位，我们就一定只需要在当前进制位为空的时候才会向上面借位，且我们不会向上进位，这样保证了我们不会让一个砝码利用两个不同容器的空间的情况。</p>
<p>这样我们就能在 $O(n\log{m})$ 的时间复杂度内解决这道题了。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], b[N], num[N];</span><br><span class="line"><span class="type">int</span> c[<span class="number">40</span>], cnt[<span class="number">40</span>], tot;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p &gt; tot)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(cnt[p])</span><br><span class="line">    &#123;</span><br><span class="line">        cnt[p]--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">dfs</span>(p + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt[p] += c[p + <span class="number">1</span>] / c[p];</span><br><span class="line">        cnt[p]--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i] != b[i - <span class="number">1</span>])c[++tot] = b[i];</span><br><span class="line">        num[i] = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = tot; j; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt[j] += a[i] / c[j];</span><br><span class="line">            a[i] %= c[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">dfs</span>(num[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == m)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P3540 [POI2012] 超夸克 Squarks 题解</title>
    <url>/solutions/solution-p3540/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">超夸克 Squarks</div>
<div id="problem-info-from">POI 2012</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM1NDA=">Luogu P3540</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yNjk4">LibreOJ L2698</span></li></ul></div>

<hr>
<p>题目想要给我们 $n$ 个数，但不是直接给出这些数字，而是给出了 $\frac{n(n-1)}{2}$ 个数字，代表其两两的和。<br>现在题目需要我们求出这 $n$ 个数字。</p>
<p>设这 $n$ 个数字从小到大分别为 $x_1,x_2,x_3,\dots,x_n$，$m&#x3D;\frac{n(n-1)}{2}$ 个和从小到大分别为 $a_1,a_2,a_3,\dots,a_m$。</p>
<p>我们取这些和中最小的两个值 $a_1$ 和 $a_2$，其必定等于 $x_1+x_2$ 和 $x_1+x_3$。<br>这个就不需要证明了，自己手动举几个例子就好了。</p>
<p>然后我们只需要找出 $x_2+x_3$ 的值就可以找出 $x_1$、$x_2$ 和 $x_3$ 各自的值了。</p>
<p>但是 $a_3$ 不一定等于 $x_2+x_3$。</p>
<p>因为 $n \leq 300$，我们可以枚举哪一个 $a$ 是 $x_2+x_3$。<br>我们最多需要枚举 $n-4$ 个。</p>
<p>因为 $x_2+x_j(j&gt;3)$ 和 $x_3+x_j(j&gt;3)$ 一定是大于 $x_2+x_3$ 的，那么可能比 $x_2+x_3$ 小且比 $x_1+x_3$ 大的值只能是 $x_1+x_j(j&gt;3)$ 了。<br>这种值最多有 $n-4$ 个。</p>
<p>再来看我们如何通过枚举到的一个 $x_2+x_3$ 得出一组可行解。</p>
<p>我们现在已经确认了 $x_2+x_3$ 的值了，也就相当于确认了 $x_1$、$x_2$ 和 $x_3$ 各自的值了。<br>那么我们剩下的值中的最小值一定就是 $x_1+x_4$，这个上面已经证过了。<br>我们已经有了 $x_1$ 的值了，那么我们就可以得到 $x_4$ 的值。<br>根据这个值，我们可以得出 $x_2+x_4$、$x_3+x_4$ 的值。<br>去除这些值之后，我们剩下的最小值一定就是 $x_1+x_5$ 了。<br>以此类推，我们如果一直这样进行下去，直到将所有的和都消除完了之后，就构造出了一组可行解。<br>否则就代表该组 $x_1,x_2,x_3$ 不可行。</p>
<p>时间复杂度是 $O(n^2)$ 的。</p>
<p>我们对于每一个枚举的 $x_2+x_3$ 求出一组可行解，总复杂度是 $O(n^3)$ 的。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, M = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[M];</span><br><span class="line"><span class="type">int</span> x[N][N], ans;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;dic;</span><br><span class="line"><span class="type">int</span> tot[M], cnt;</span><br><span class="line"><span class="type">int</span> cost[M];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chq</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt;= <span class="number">0</span> || b &lt;= <span class="number">0</span> || c &lt;= <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b || a &gt; c || b &gt; c)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(x[ans][<span class="number">1</span>] == a &amp;&amp; x[ans][<span class="number">2</span>] == b &amp;&amp; x[ans][<span class="number">3</span>] == c)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    ans++;</span><br><span class="line">    x[ans][<span class="number">1</span>] = a, x[ans][<span class="number">2</span>] = b, x[ans][<span class="number">3</span>] = c;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_x</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cost, <span class="number">0</span>, <span class="built_in">sizeof</span>(cost));</span><br><span class="line">    cost[dic[x[ans][<span class="number">1</span>] + x[ans][<span class="number">2</span>]]]++;</span><br><span class="line">    cost[dic[x[ans][<span class="number">1</span>] + x[ans][<span class="number">3</span>]]]++;</span><br><span class="line">    cost[dic[x[ans][<span class="number">2</span>] + x[ans][<span class="number">3</span>]]]++;</span><br><span class="line">    <span class="type">int</span> now = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">4</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(tot[dic[v[now]]] - cost[dic[v[now]]] == <span class="number">0</span>)now++;</span><br><span class="line">        x[ans][i] = v[now] - x[ans][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> pos = dic[x[ans][i] + x[ans][j]];</span><br><span class="line">            cost[pos]++;</span><br><span class="line">            <span class="keyword">if</span>(cost[pos] &gt; tot[pos])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(x[ans] + <span class="number">1</span>, x[ans] + n + <span class="number">1</span>);</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(x[ans][i] != x[ans - <span class="number">1</span>][i])flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag)ans--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    m = n * (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v[i]);</span><br><span class="line">    <span class="built_in">sort</span>(v + <span class="number">1</span>, v + <span class="number">1</span> + m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dic[v[i]])dic[v[i]] = ++cnt;</span><br><span class="line">        tot[dic[v[i]]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>, a, b, c; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b = (v[i] - v[<span class="number">2</span>] + v[<span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">        c = v[i] - b;</span><br><span class="line">        a = v[<span class="number">1</span>] - b;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">chq</span>(a, b, c))ans -= <span class="built_in">get_x</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ans; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x[i][j]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>P3574 [POI2014] FAR-FarmCraft 题解</title>
    <url>/solutions/solution-p3574/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">FarmCraft</div>
<div id="problem-info-from">POI 2014</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM1NzQ=">Luogu P3574</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzM4Mjk=">BZOJ #3829</span></li></ul></div>

<hr>
<p>题目需要我们从一号节点开始遍历整棵树，并给每一个节点记录下遍历到其的时间。<br>同时每一个节点又有一个自己的倒计时，当遍历到其的时候就开始计时。<br>我们需要求出所有节点中倒计时结束最慢的那一个的结束时间，并最小化之。</p>
<p>我们不难想象出一个简单的DP式子来求得最终的答案：</p>
<p>对于节点 $u$ 的子树 $v$，我们有如下的DP式子：</p>
<center>$\operatorname{dp}[u]=\max(\operatorname{dp}[u],\operatorname{dp}[v]+\operatorname{sz}[u]+1)$</center>

<p>其中 $\operatorname{dp}[u]$ 代表当前子树中最大的答案；<br>$\operatorname{sz}[u]$ 代表遍历过 $v$ 所在的子树之前已经经过的所有子树的大小之和再乘以2，这个在遍历完毕整个子树之后会更新为该子树的大小乘以2。</p>
<p>我们可以发现，我们最终的答案跟遍历子树的顺序有关，于是我们考虑对其进行排序。</p>
<p>对于一个节点 $x$ 的两个子树 $y$ 和 $z$，我们假设先遍历 $y$ 再遍历 $z$。<br>这样的话，我们的答案就是 $\max(\operatorname{dp}[y]+\operatorname{sz}[u]+1,\operatorname{dp}[z]+\operatorname{sz}[u]+\operatorname{sz}[y]+2+1)$。<br>我们假定这个方案比交换两个子树的遍历顺序得到的答案更优。<br>交换两个子树的遍历顺序之后得到的答案就是 $\max(\operatorname{dp}[z]+\operatorname{sz}[u]+1,\operatorname{dp}[y]+\operatorname{sz}[u]+\operatorname{sz}[z]+2+1)$。</p>
<p>我们最终得到如下式子：</p>
<center>$\max(\operatorname{dp}[y]+\operatorname{sz}[u]+1,\operatorname{dp}[z]+\operatorname{sz}[u]+\operatorname{sz}[y]+2+1) > \max(\operatorname{dp}[z]+\operatorname{sz}[u]+1,\operatorname{dp}[y]+\operatorname{sz}[u]+\operatorname{sz}[z]+2+1)$</center>

<p>我们将不等式左右两边同时约掉 $\operatorname{sz}[u]+1$，得到</p>
<center>$\max(\operatorname{dp}[y],\operatorname{dp}[z]+\operatorname{sz}[y]+2) > \max(\operatorname{dp}[z],\operatorname{dp}[y]+\operatorname{sz}[z]+2)$</center>

<p>因为 $\operatorname{dp}[y] &lt; \operatorname{dp}[y]+\operatorname{sz}[z]+2$，$\operatorname{dp}[z] &lt; \operatorname{dp}[z]+\operatorname{sz}[y]+2$，所以一定是 $\operatorname{dp}[y]+\operatorname{sz}[z]+2$ 与 $\operatorname{dp}[z]+\operatorname{sz}[y]+2$ 之间的差值导致了答案的变化。</p>
<p>因此，我们可以得到</p>
<center>$\operatorname{dp}[y]-\operatorname{sz}[y] < \operatorname{dp}[z]-\operatorname{sz}[z]$</center>

<p>然后我们就可以按照这样的方法排序了。</p>
<p>参考代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500010</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c)) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>)f = <span class="number">-1</span>; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x = x * <span class="number">10</span> + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;e[N];</span><br><span class="line"><span class="type">int</span> val[N];</span><br><span class="line"><span class="type">int</span> f[N], sz[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> <span class="type">int</span> a, <span class="type">const</span> <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sz[a] - f[a] &lt; sz[b] - f[b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p != <span class="number">1</span>)f[p] = val[p];</span><br><span class="line">    <span class="keyword">if</span>(e[p].<span class="built_in">empty</span>())<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : e[p])</span><br><span class="line">        <span class="keyword">if</span>(i != fa)<span class="built_in">dfs</span>(i, p);</span><br><span class="line">    <span class="built_in">sort</span>(e[p].<span class="built_in">begin</span>(), e[p].<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : e[p])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == fa)<span class="keyword">continue</span>;</span><br><span class="line">        f[p] = <span class="built_in">max</span>(f[p], f[i] + sz[p] + <span class="number">1</span>);</span><br><span class="line">        sz[p] += sz[i] + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        val[i] = <span class="built_in">read</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = <span class="built_in">read</span>&lt;<span class="type">int</span>&gt;(), v = <span class="built_in">read</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">max</span>(f[<span class="number">1</span>], sz[<span class="number">1</span>] + val[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>贪心</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>P3586 [POI2015] Logistyka 题解</title>
    <url>/solutions/solution-p3586/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Logistyka</div>
<div id="problem-info-from">POI 2015</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM1ODY=">Luogu P3586</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzQzNzg=">BZOJ #4378</span></li></ul></div>

<hr>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这道题想让我们维护一个数列，支持对其的修改与询问。</p>
<p>题目给出了两种操作：</p>
<ol>
<li><code>U k a</code> 将序列中第 $k$ 个数修改为 $a$。</li>
<li><code>Z c s</code> 在这个序列上，每次选出 $c$ 个正数，并将它们都减去 $1$，询问能否进行 $s$ 次操作。</li>
</ol>
<p>回答询问的思路是这个样子的：</p>
<p>我们假设在这个数列里面，$( 0,s )$ 范围内的数有 $x$ 个，$[ s, \infty )$ 范围内的数有 $y$ 个。</p>
<p>如果 $x+y &lt; c$ 的话就绝对不行，直接返回 <code>NIE</code>。</p>
<p>我们贪一下心，反正题目询问的是可行性，不如就先让着 $y$ 个数先顶上。</p>
<p>如果这 $y$ 个数都顶上去之后就可以完成任务，甚至还有些富余，就可以直接返回 <code>TAK</code>。<br>而如果 $y &lt; c$，那么我们就需要继续往下讨论。</p>
<p>我们考虑让剩下的数顶上去。</p>
<p>如果这些数字的和小于 $s \times c$，那就绝对完不成任务。<br>反之则一定完得成任务。</p>
<p>QED.</p>
<hr>
<p>所以，我们需要维护两个信息，一是大于某个数的数有多少个，二是大于某个数的所有数之和。</p>
<p>我们可以使用树状数组。</p>
<p>但是我不会，所以就用动态开点权值线段树了。</p>
<p>我们考虑结构体里面存什么：</p>
<p>首先我们需要存区间左右端点（按个人情况）和左右儿子。<br>我们还需要维护区间内数的个数。</p>
<p>为了不多写数据结构，我也将第二个要求写进了线段树里面。</p>
<p>于是我的结构体长的是这个样子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> ls, rs;</span><br><span class="line">    ll sum;</span><br><span class="line">    ll tot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code>sum</code> 维护的是当前区间内数的个数，<code>tot</code> 维护的是当前区间内所有数的和。两者同时维护，但是查询的时候是分开的。</p>
<p>线段树部分代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> ls, rs;</span><br><span class="line">    ll sum;</span><br><span class="line">    ll tot;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">segadd</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pos, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l == tr[p].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].sum += k;</span><br><span class="line">        tr[p].tot = tr[p].sum * tr[p].l;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!tr[p].ls)</span><br><span class="line">        &#123;</span><br><span class="line">            tr[p].ls = ++idx;</span><br><span class="line">            tr[tr[p].ls].l = tr[p].l;</span><br><span class="line">            tr[tr[p].ls].r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">segadd</span>(tr[p].ls, pos, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pos &gt; mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!tr[p].rs)</span><br><span class="line">        &#123;</span><br><span class="line">            tr[p].rs = ++idx;</span><br><span class="line">            tr[tr[p].rs].l = mid + <span class="number">1</span>;</span><br><span class="line">            tr[tr[p].rs].r = tr[p].r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">segadd</span>(tr[p].rs, pos, k);</span><br><span class="line">    &#125;</span><br><span class="line">    tr[p].sum = tr[tr[p].ls].sum + tr[tr[p].rs].sum;</span><br><span class="line">    tr[p].tot = tr[tr[p].ls].tot + tr[tr[p].rs].tot;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">segsum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//求区间内数的个数</span></span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)<span class="keyword">return</span> tr[p].sum;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)res += <span class="built_in">segsum</span>(tr[p].ls, l, r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)res += <span class="built_in">segsum</span>(tr[p].rs, l, r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">segtot</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//求区间内所有数的和</span></span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)<span class="keyword">return</span> tr[p].tot;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)res += <span class="built_in">segtot</span>(tr[p].ls, l, r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)res += <span class="built_in">segtot</span>(tr[p].rs, l, r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>（需要O2）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> ls, rs;</span><br><span class="line">    ll sum;</span><br><span class="line">    ll tot;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">segadd</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pos, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l == tr[p].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].sum += k;</span><br><span class="line">        tr[p].tot = tr[p].sum * tr[p].l;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!tr[p].ls)</span><br><span class="line">        &#123;</span><br><span class="line">            tr[p].ls = ++idx;</span><br><span class="line">            tr[tr[p].ls].l = tr[p].l;</span><br><span class="line">            tr[tr[p].ls].r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">segadd</span>(tr[p].ls, pos, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pos &gt; mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!tr[p].rs)</span><br><span class="line">        &#123;</span><br><span class="line">            tr[p].rs = ++idx;</span><br><span class="line">            tr[tr[p].rs].l = mid + <span class="number">1</span>;</span><br><span class="line">            tr[tr[p].rs].r = tr[p].r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">segadd</span>(tr[p].rs, pos, k);</span><br><span class="line">    &#125;</span><br><span class="line">    tr[p].sum = tr[tr[p].ls].sum + tr[tr[p].rs].sum;</span><br><span class="line">    tr[p].tot = tr[tr[p].ls].tot + tr[tr[p].rs].tot;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">segsum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)<span class="keyword">return</span> tr[p].sum;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)res += <span class="built_in">segsum</span>(tr[p].ls, l, r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)res += <span class="built_in">segsum</span>(tr[p].rs, l, r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">segtot</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)<span class="keyword">return</span> tr[p].tot;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)res += <span class="built_in">segtot</span>(tr[p].ls, l, r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)res += <span class="built_in">segtot</span>(tr[p].rs, l, r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="type">int</span> maxn = <span class="number">0</span>;</span><br><span class="line">    tr[++idx] = &#123; <span class="number">0</span>,<span class="number">100000001</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        string op;</span><br><span class="line">        <span class="type">int</span> x, k;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;k);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;U&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(k &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">segadd</span>(<span class="number">1</span>, k, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[x] &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">segadd</span>(<span class="number">1</span>, a[x], <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            a[x] = k;</span><br><span class="line">            maxn = <span class="built_in">max</span>(maxn, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ll pos = <span class="built_in">segsum</span>(<span class="number">1</span>, <span class="number">1</span>, maxn), cnt = <span class="built_in">segsum</span>(<span class="number">1</span>, <span class="number">1</span>, k);</span><br><span class="line">            <span class="keyword">if</span>(pos &lt; x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pos - cnt &gt;= x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;TAK&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ll tot = <span class="built_in">segtot</span>(<span class="number">1</span>, <span class="number">1</span>, k);</span><br><span class="line">            <span class="keyword">if</span>(tot &gt;= (x + cnt - pos) * k)</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;TAK&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>P3589 [POI2015] Kurs szybkiego czytania 题解</title>
    <url>/solutions/solution-p3589/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Kurs szybkiego czytania</div>
<div id="problem-info-from">POI 2015</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM1ODk=">Luogu P3589</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzQzNzc=">BZOJ #4377</span></li></ul></div>

<hr>
<p>假设小串在大串中的某一个位置匹配上了，这时小串的开头是 $x$，那么小串的每一位都对应一个不等关系：</p>
<p>$$<br>\begin{cases}<br>a(i+x)+b \bmod{n} \in [0,p-1] &amp; s_i &#x3D; 0 \\<br>a(i+x)+b \bmod{n} \in [p,n-1] &amp; s_i &#x3D; 1<br>\end{cases}<br>$$</p>
<p>我们可以观察到，其中 $ai+b$ 这一部分对于每一个位置是固定的，我们将其提出来，并定义 $B &#x3D; ai+b$。<br>化简后的式子如下：</p>
<p>$$<br>\begin{cases}<br>ax+B \bmod{n} \in [0,p-1] &amp; s_i &#x3D; 0 \\<br>ax+B \bmod{n} \in [p,n-1] &amp; s_i &#x3D; 1<br>\end{cases}<br>$$</p>
<p>将 $x$ 在模意义下拆成 $a’x’$，其中 $a’$ 为 $a’$ 在模意义下的乘法逆元。<br>化简后的式子如下：</p>
<p>$$<br>\begin{cases}<br>x’+B \bmod{n} \in [0,p-1] &amp; s_i &#x3D; 0 \\<br>x’+B \bmod{n} \in [p,n-1] &amp; s_i &#x3D; 1<br>\end{cases}<br>$$</p>
<p>我们还可以知道，因为 $a$ 与 $n$ 互质，所以每一个 $x’$ 都与 $x$ 一一对应，形成了一组双射关系，所以我们只需要求出 $x’$ 的所有可能取值的个数即可。<br>而 $x’$ 的取值范围也一目了然。</p>
<p>对于一个式子，我们有两种可能取值：<br>（这里用 $s_i &#x3D; 1$ 来示范）</p>
<p>$$<br>\begin{cases}<br>x’ \in [p-B,n-1-B] \\<br>x’ \in [n-i-B,n-1] \cup [0,p-B+n]<br>\end{cases}<br>$$</p>
<p>这样的取值就像是数轴上的一些线段，而我们需要取的就是这些线段的交。<br>快速取线段交我们不会，但是我们可以将其转化成为其补集的并集的补集来计算。</p>
<p>同时还需要注意照顾到不合理的取值（$x \in [n-m+1,n-1]$），计算的时候需要将其剔除。</p>
<p>示例代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a, b, p;</span><br><span class="line"><span class="type">int</span> l[N], r[N];</span><br><span class="line"><span class="type">int</span> pr[N];</span><br><span class="line"><span class="type">int</span> d[M], cnt;</span><br><span class="line"><span class="type">int</span> c[M];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;dic;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>, &amp;n, &amp;a, &amp;b, &amp;p, &amp;m);</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> B = (<span class="number">1ll</span> * i * a + b) % n;</span><br><span class="line">        <span class="keyword">if</span>(s[i - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            l[i] = p - B - <span class="number">1</span>;</span><br><span class="line">            r[i] = n - B - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(l[i] &lt; <span class="number">0</span>)l[i] += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l[i] = n - B - <span class="number">1</span>;</span><br><span class="line">            r[i] = p - B - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(r[i] &lt; <span class="number">0</span>)r[i] += n;</span><br><span class="line">        &#125;</span><br><span class="line">        d[++cnt] = l[i], d[++cnt] = r[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n - m + <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)pr[n - i] = (<span class="number">1ll</span> * a * i) % n;</span><br><span class="line">    <span class="built_in">sort</span>(d + <span class="number">1</span>, d + <span class="number">1</span> + cnt);</span><br><span class="line">    <span class="built_in">sort</span>(pr + <span class="number">1</span>, pr + m);</span><br><span class="line">    cnt = <span class="built_in">unique</span>(d + <span class="number">1</span>, d + <span class="number">1</span> + cnt) - d - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(d[cnt] != n - <span class="number">1</span>)d[++cnt] = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">        dic.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(d[i], i));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[dic[l[i]]]--;</span><br><span class="line">        c[dic[r[i]]]++;</span><br><span class="line">        <span class="keyword">if</span>(l[i] &gt; r[i])c[cnt]++;</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = cnt, r = m - <span class="number">1</span>; i; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] += c[i + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> l = r;</span><br><span class="line">        <span class="keyword">while</span>(l &amp;&amp; pr[l] &gt; d[i - <span class="number">1</span>])l--;</span><br><span class="line">        <span class="keyword">if</span>(c[i] == m)ans += d[i] - d[i - <span class="number">1</span>] - r + l;</span><br><span class="line">        r = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码需要 $O(2)$。</p>
<p>思路是听 <span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3VzZXIvMjYxNzcz">$\text{Y}{\color{Red}\text{ouwike}}$</span> 大佬的讲解才弄懂的，大家快去模%%%</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>数学（题目）</tag>
      </tags>
  </entry>
  <entry>
    <title>P3644 [APIO2015] 巴邻旁之桥 题解</title>
    <url>/solutions/solution-p3644/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">巴邻旁之桥</div>
<div id="problem-info-from">APIO 2015</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM2NDQ=">Luogu P3644</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yODg4">LibreOJ L2888</span></li><li><span class="exturl" data-url="aHR0cHM6Ly91b2ouYWMvcHJvYmxlbS8xMTI=">UOJ #112</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzQwNzE=">BZOJ #4071</span></li></ul></div>

<hr>
<p>题目大意：</p>
<p>现在有一条河，将巴邻旁市分成了 $A$、$B$ 两个区域。<br>河的两岸均有 $10^9+1$ 栋房子。每一栋房子均有其编号，从 $A_1,B_1$ 一直到 $A_{10^9+1},B_{10^9+1}$。其中，编号为 $A_i$ 的房子与编号与 $B_i$ 的房子正好隔河相望。<br>相邻两栋房子之间的距离为 $1$。这包括类似 $A_i,A_{i+1}$ 的情况，也包括 $A_i,B_i$ 的情况。</p>
<p>现在有 $n$ 条通勤线路，有一些是需要跨河才能到达的。<br>以前人们都坐船，但是现在政府决定建造 $k$ 座大桥来帮助市民进行日常的通勤，使得所有人都可以（且必须）开车来通勤。</p>
<p>现在政府交给了你这 $n$ 条通勤线路和桥梁的个数 $k$，要求你最小化所有人通勤所需要的时间之和。</p>
<p>所有的桥梁必须垂直于河流。</p>
<hr>
<p>首先猛地一看可能没有什么太大的思路，总觉得是个贪心，或者是个结论题。</p>
<p>然后看一眼数据范围：</p>
<p>$1 \leq K \leq 2$<br>$1 \leq N \leq 10^5$</p>
<p>那就简单多了。</p>
<p>我们可以分类讨论：</p>
<h1 id="K-x3D-1"><a href="#K-x3D-1" class="headerlink" title="$K&#x3D;1$"></a>$K&#x3D;1$</h1><p>首先我们需要忽略所有不跨河的人。<br>这个在输入的时候就直接统计入答案了。</p>
<p>当我们只有一座桥的时候，就意味着<strong>所有人都必须通过这座桥。</strong></p>
<p>那么我们就可以将这些所有的路线拆成三部分：在A岸的、在桥上的和在B岸的。<br>而且因为桥是垂直于河流的，那么我们完全可以把在B岸的和在A岸的放在一起统计。</p>
<p>那么我们的问题就可以转化为，找一个点，使得所有的点到这个点的距离之和最小。</p>
<p>容易得出我们需要求的就是所有数字的中位数。</p>
<p>统计答案即可。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> t[N], tot, ans;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;k, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%lld%s%lld&quot;</span>, x, &amp;u, y, &amp;v);</span><br><span class="line">    <span class="keyword">if</span>(x[<span class="number">0</span>] == y[<span class="number">0</span>]) ans += <span class="built_in">abs</span>(u - v);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        t[++tot] = u, t[++tot] = v;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(t + <span class="number">1</span>, t + <span class="number">1</span> + tot);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</span><br><span class="line">    ans += <span class="built_in">abs</span>(t[tot &gt;&gt; <span class="number">1</span>] - t[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br></pre></td></tr></table></figure>

<h1 id="K-x3D-2"><a href="#K-x3D-2" class="headerlink" title="$K&#x3D;2$"></a>$K&#x3D;2$</h1><p>我们考虑一下每一个路线的实际路程。</p>
<p>假设一个路线的端点的编号分别是 $i$ 和 $j$（$i \leq j$），那么：</p>
<ul>
<li>如果 $i$、$j$ 分别在桥的两侧，其实际路程为 $j-i$。</li>
<li>如果 $i$、$j$ 夹在两个桥的中间，其实际路程与 $\frac{i+j}{2}$ 有关。</li>
</ul>
<p>于是我们可以考虑按照 $i+j$ 来对所有的通勤路线进行排序。同时枚举一个划分的位置，左边的都走左边的桥，右边的都走右边的桥。</p>
<p>那么我们需要求的就是动态中位数问题了。</p>
<p>我们仍然考虑使用一个大根堆和一个小根堆来维护动态中位数，只不过我们统计答案的时候换个思路。</p>
<p>我们可以统计前缀和，并且把这个前缀和按照桥的位置分成左右两部分。</p>
<p>此时的最小距离之和就是桥右侧点的坐标和减去左侧点的坐标和。</p>
<p>桥左边的部分枚举的是前缀和，右边的部分枚举的是后缀和。</p>
<p>然后我们取最小值即可。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">need</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> need &amp;a) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (x + y) &lt; (a.x + a.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;order[N];</span><br><span class="line">priority_queue &lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;               &gt; q1;</span><br><span class="line">priority_queue &lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; q2;</span><br><span class="line"><span class="type">int</span> n, k, u, v, cnt;</span><br><span class="line"><span class="type">int</span> ans1[N], ans2[N];</span><br><span class="line"><span class="type">int</span> res, sum1, sum2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exchange</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q1.<span class="built_in">top</span>() &gt; q2.<span class="built_in">top</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q1.<span class="built_in">top</span>(), v = q2.<span class="built_in">top</span>();</span><br><span class="line">        q1.<span class="built_in">pop</span>(), q1.<span class="built_in">push</span>(v);</span><br><span class="line">        q2.<span class="built_in">pop</span>(), q2.<span class="built_in">push</span>(u);</span><br><span class="line">        sum1 += v - u, sum2 -= v - u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!q1.<span class="built_in">empty</span>()) q1.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">while</span>(!q2.<span class="built_in">empty</span>()) q2.<span class="built_in">pop</span>();</span><br><span class="line">    sum1 = sum2 = <span class="number">0</span>;</span><br><span class="line">    u = v = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">senhan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        q1.<span class="built_in">push</span>(order[i].x), q1.<span class="built_in">push</span>(order[i].y);</span><br><span class="line">        sum1 += order[i].x + order[i].y, sum1 -= q1.<span class="built_in">top</span>(), sum2 += q1.<span class="built_in">top</span>();</span><br><span class="line">        q2.<span class="built_in">push</span>(q1.<span class="built_in">top</span>()); q1.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">exchange</span>();</span><br><span class="line">        ans1[i] = sum2 - sum1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gohan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = cnt; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        q1.<span class="built_in">push</span>(order[i].x), q1.<span class="built_in">push</span>(order[i].y);</span><br><span class="line">        sum1 += order[i].x + order[i].y, sum1 -= q1.<span class="built_in">top</span>(), sum2 += q1.<span class="built_in">top</span>();</span><br><span class="line">        q2.<span class="built_in">push</span>(q1.<span class="built_in">top</span>()); q1.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">exchange</span>();</span><br><span class="line">        ans2[i] = sum2 - sum1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">sort</span>(order + <span class="number">1</span>, order + <span class="number">1</span> + cnt);</span><br><span class="line"><span class="built_in">senhan</span>();</span><br><span class="line"><span class="built_in">gohan</span>();</span><br><span class="line">res = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= cnt; i++)</span><br><span class="line">    res = <span class="built_in">min</span>(res, ans1[i] + ans2[i + <span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans + res);</span><br></pre></td></tr></table></figure>

<p>全部加起来：</p>
<details class="note success"><summary><p>示例代码</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">400010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">need</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> need &amp;a) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (x + y) &lt; (a.x + a.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;order[N];</span><br><span class="line">priority_queue &lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;               &gt; q1;</span><br><span class="line">priority_queue &lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; q2;</span><br><span class="line"><span class="type">int</span> n, k, ans, u, v, cnt;</span><br><span class="line"><span class="type">int</span> ans1[N], ans2[N];</span><br><span class="line"><span class="type">char</span> x[<span class="number">2</span>], y[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> t[N], tot, res, sum1, sum2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exchange</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q1.<span class="built_in">top</span>() &gt; q2.<span class="built_in">top</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q1.<span class="built_in">top</span>(), v = q2.<span class="built_in">top</span>();</span><br><span class="line">        q1.<span class="built_in">pop</span>(), q1.<span class="built_in">push</span>(v);</span><br><span class="line">        q2.<span class="built_in">pop</span>(), q2.<span class="built_in">push</span>(u);</span><br><span class="line">        sum1 += v - u, sum2 -= v - u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!q1.<span class="built_in">empty</span>()) q1.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">while</span>(!q2.<span class="built_in">empty</span>()) q2.<span class="built_in">pop</span>();</span><br><span class="line">    sum1 = sum2 = <span class="number">0</span>;</span><br><span class="line">    u = v = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">senhan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        q1.<span class="built_in">push</span>(order[i].x), q1.<span class="built_in">push</span>(order[i].y);</span><br><span class="line">        sum1 += order[i].x + order[i].y, sum1 -= q1.<span class="built_in">top</span>(), sum2 += q1.<span class="built_in">top</span>();</span><br><span class="line">        q2.<span class="built_in">push</span>(q1.<span class="built_in">top</span>()); q1.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">exchange</span>();</span><br><span class="line">        ans1[i] = sum2 - sum1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gohan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = cnt; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        q1.<span class="built_in">push</span>(order[i].x), q1.<span class="built_in">push</span>(order[i].y);</span><br><span class="line">        sum1 += order[i].x + order[i].y, sum1 -= q1.<span class="built_in">top</span>(), sum2 += q1.<span class="built_in">top</span>();</span><br><span class="line">        q2.<span class="built_in">push</span>(q1.<span class="built_in">top</span>()); q1.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">exchange</span>();</span><br><span class="line">        ans2[i] = sum2 - sum1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;k, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%lld%s%lld&quot;</span>, x, &amp;u, y, &amp;v);</span><br><span class="line">        <span class="keyword">if</span>(x[<span class="number">0</span>] == y[<span class="number">0</span>]) ans += <span class="built_in">abs</span>(u - v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            order[++cnt] = &#123; u, v &#125;;</span><br><span class="line">            t[++tot] = u, t[++tot] = v;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(t + <span class="number">1</span>, t + <span class="number">1</span> + tot);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</span><br><span class="line">            ans += <span class="built_in">abs</span>(t[tot &gt;&gt; <span class="number">1</span>] - t[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(order + <span class="number">1</span>, order + <span class="number">1</span> + cnt);</span><br><span class="line">        <span class="built_in">senhan</span>();</span><br><span class="line">        <span class="built_in">gohan</span>();</span><br><span class="line">        res = <span class="number">1e18</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= cnt; i++)</span><br><span class="line">            res = <span class="built_in">min</span>(res, ans1[i] + ans2[i + <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans + res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>P3645 [APIO2015] 雅加达的摩天楼 题解</title>
    <url>/solutions/solution-p3645/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">雅加达的摩天楼</div>
<div id="problem-info-from">APIO 2015</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM2NDU=">Luogu P3645</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yODg3">LibreOJ L2887</span></li><li><span class="exturl" data-url="aHR0cHM6Ly91b2ouYWMvcHJvYmxlbS8xMTE=">UOJ #111</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzQwNzA=">BZOJ #4070</span></li></ul></div>

<hr>
<p>题目说，只要一栋楼里面的一只doge知道了消息，那么他就可以在不产生任何代价的情况下将这条消息传递给这栋楼里面的所有doge。</p>
<p>利用这一条信息，我们可以将doge的行动转化为摩天楼之间的边，一只doge能够前往的两栋楼之间会直接或间接联通。</p>
<p>于是我们就可以想到跑最短路。图上的所有边权均为1，从0到1的最短路即为传递消息的代价。</p>
<p>然后再看数据范围：</p>
<p>$N \in [1,30000 ] , M \in [ 2,30000 ] , P_i \in [ 1,30000 ]$</p>
<p>当头一棒。</p>
<p>我们可怜的最短路算法承受不起如此多的边（$O(n^2)$ 级别），我们甚至可以将这张图看做一张完全图来计算时间复杂度，而结果必然是爆炸。</p>
<p>我们如果一开始分析错误了，把它当做费用流来跑SPFA的话，最多能拿到36分(UOJ&amp;LibreOJ)&#x2F;75分(Luogu)。</p>
<p>我们如果使用链式前向星连边、建边，跑Dijkstra的话，可以拿到36分(UOJ&amp;LibreOJ)&#x2F;80分(Luogu)的好成绩。</p>
<p>然后我们会发现上面会MLE，于是选用vector存边。<br>我们如果使用vector连边、建边，跑Dijkstra的话，可以拿到和上面一样的好成绩，并且仍然MLE。</p>
<p>然后我们考虑换个连边方式，不在让每一条边的边权都是相同的了，考虑从一栋楼向其他的楼连边，边权为跳跃次数，妄图减少内存用量。</p>
<p>结果仍为失败。</p>
<p>我们不再考虑显式连边，而考虑在转移的时候再连边，这里就需要用SPFA了。</p>
<p>然后再跑一遍就可以过了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">30010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;e[N];</span><br><span class="line"><span class="type">int</span> dis[N], vis[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">63</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    dis[s] = <span class="number">0</span>, vis[s] = <span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : e[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; u + i * j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> v = u + i * j;</span><br><span class="line">                <span class="keyword">if</span>(dis[v] &gt; dis[u] + j)</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[v] = dis[u] + j;</span><br><span class="line">                    <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                    &#123;</span><br><span class="line">                        q.<span class="built_in">push</span>(v);</span><br><span class="line">                        vis[v] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; u - i * j &gt;= <span class="number">0</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> v = u - i * j;</span><br><span class="line">                <span class="keyword">if</span>(dis[v] &gt; dis[u] + j)</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[v] = dis[u] + j;</span><br><span class="line">                    <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                    &#123;</span><br><span class="line">                        q.<span class="built_in">push</span>(v);</span><br><span class="line">                        vis[v] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="type">int</span> s, t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)s = a;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t = a;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        e[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">spfa</span>(s);</span><br><span class="line">    <span class="keyword">if</span>(dis[t] == <span class="number">0x3f3f3f3f</span>)<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; dis[t] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>P3707 [SDOI2017] 相关分析 题解</title>
    <url>/solutions/solution-p3707/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">相关分析</div>
<div id="problem-info-from">SDOI 2017</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM3MDc=">Luogu P3707</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yMDA1">LibreOJ L2005</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMjU4Ny8=">AcWing 2585</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzQ4MjE=">BZOJ #4821</span></li></ul></div>

<hr>
<p>这道题需要我们维护一大坨东西。</p>
<h1 id="准备与计算答案"><a href="#准备与计算答案" class="headerlink" title="准备与计算答案"></a>准备与计算答案</h1><p>首先我们把线性回归方程的公式拆一下：<br>（这里将 $\sum_{i&#x3D;l}^r$ 省略为 $\sum$）</p>
<p>$$<br>\begin{align}<br>\hat{a} &amp;&#x3D; \frac{\sum (x_i - \bar{x})(y_i - \bar{y})}{\sum (x_i - \bar{x}^2)} \\<br>&amp;&#x3D; \frac{\sum (x_i y_i - y_i \bar{x} - x_i \bar{y} + \bar{x} \bar{y})}{\sum (x_i^2 - 2x_i \bar{x} + \bar{x}^2)} \\<br>&amp;&#x3D; \frac{\sum x_i y_i - \bar{x} \sum y_i - \bar{y} \sum x_i + (r-l+1) \bar{x} \bar{y}}{\sum x_i^2 - 2\bar{x} \sum x_i + (r-l+1)\bar{x}^2} \\<br>&amp;&#x3D; \frac{\sum x_i y_i - \frac{\sum x_i \sum y_i}{r-l+1} - \frac{\sum y_i \sum x_i}{r-l+1} + (r-l+1) \frac{\sum x_i \sum y_i}{(r-l+1)^2}}{\sum x_i^2 - 2\frac{\sum x_i \sum x_i}{(r-l+1)} + (r-l+1) (\frac{\sum x_i}{r-l+1})^2} \\<br>&amp;&#x3D; \frac{\sum x_i y_i - \frac{\sum x_i \sum y_i}{r-l+1}}{\sum x_i^2 - \frac{\sum x_i \sum x_i}{r-l+1}}<br>\end{align}<br>$$</p>
<p>最终我们需要维护的就是 $\sum x_i$，$\sum x_i^2$，$\sum y_i$ 和 $\sum x_i y_i$。<br>我们计算时的公式就是 $\hat{a} &#x3D; \frac{\sum x_i y_i - \frac{\sum x_i \sum y_i}{r-l+1}}{\sum x_i^2 - \frac{(\sum x_i)^2}{r-l+1}}$。</p>
<h1 id="区间加"><a href="#区间加" class="headerlink" title="区间加"></a>区间加</h1><p>我们考虑每一个量是怎么变化的：</p>
<p>$\sum (x_i+s)^2 &#x3D; \sum (x_i^2 + 2sx_i + s^2) &#x3D; \sum x_i^2 + 2s\sum x_i + (r-l+1)s^2$<br>$\sum (x_i+s)(y_i+t) &#x3D; \sum (x_iy_i + sy_i + ts_i + st) &#x3D; \sum x_iy_i + s\sum y_i + t\sum x_i + (r-l+1)st$<br>$\sum (x_i+s) &#x3D; \sum x_i + (r-l+1)s$<br>$\sum (y_i+t) &#x3D; \sum y_i + (r-l+1)t$</p>
<p>注意我们这里在维护前面两个二次的东西的时候需要我们一次的这两个量，所以我们需要注意维护的顺序。</p>
<h1 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h1><h2 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h2><p>$\sum_{i&#x3D;1}^n i^2 &#x3D; \frac{n(n+1)(2n+1)}{6}$</p>
<h2 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h2><p>我们考虑将每一个点的值拆分成 $(i,i)$ 和 $(s,t)$ 两部分，而后者可以用区间加来完成。</p>
<p>这个 $i$ 就是当前点的编号。一开始我想的是每一个修改区间的 $i$ 从 $1$ 开始，傻乎乎地传了一个 $i$ 下去，然后wa了一堆……</p>
<p>对于一个完全被修改的区间 $[l,r]$，我们的四个量的新值如下：</p>
<p>$\sum x_i^2 &#x3D; \sum i^2 &#x3D; \sum_{i&#x3D;1}^r i^2 - \sum_{i&#x3D;1}^{l-1} &#x3D; \frac{r(r+1)(2r+1)}{6} - \frac{(l-1)l(2l-1)}{6}$<br>$\sum x_iy_i &#x3D; \sum i^2 &#x3D; \frac{r(r+1)(2r+1)}{6} - \frac{(l-1)l(2l-1)}{6}$<br>$\sum x_i &#x3D; \sum i &#x3D; \frac{(r-l+1)(l+r)}{2}$<br>$\sum y_i &#x3D; \sum i &#x3D; \frac{(r-l+1)(l+r)}{2}$</p>
<p>然后需要清空懒标记，并打一个清空懒标记的标记。<br>然后就是区间加了。</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>注意懒标记的维护顺序。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">double</span> x[N], y[N];</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calc</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * (x + <span class="number">1</span>) * (<span class="number">2</span> * x + <span class="number">1</span>) / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Ret</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> xx, xy, x, y;</span><br><span class="line">    <span class="keyword">friend</span> Ret <span class="keyword">operator</span> + (<span class="type">const</span> Ret &amp;a, <span class="type">const</span> Ret &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; a.xx + b.xx,a.xy + b.xy,a.x + b.x,a.y + b.y &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">double</span> xx, xy, x, y;</span><br><span class="line">    <span class="type">double</span> s, t;</span><br><span class="line">    <span class="type">bool</span> c;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modadd</span><span class="params">(<span class="type">int</span> p, <span class="type">double</span> s, <span class="type">double</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> len = <span class="built_in">double</span>(tr[p].r - tr[p].l + <span class="number">1</span>);</span><br><span class="line">    tr[p].xx += s * s * len + <span class="number">2</span> * s * tr[p].x;</span><br><span class="line">    tr[p].xy += s * t * len + s * tr[p].y + t * tr[p].x;</span><br><span class="line">    tr[p].x += s * len;</span><br><span class="line">    tr[p].y += t * len;</span><br><span class="line">    tr[p].s += s;</span><br><span class="line">    tr[p].t += t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modchg</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> l = <span class="built_in">double</span>(tr[p].l), r = <span class="built_in">double</span>(tr[p].r);</span><br><span class="line">    tr[p].xx = tr[p].xy = <span class="built_in">calc</span>(r) - <span class="built_in">calc</span>(l - <span class="number">1</span>);</span><br><span class="line">    tr[p].x = tr[p].y = (r - l + <span class="number">1</span>) * (l + r) / <span class="number">2</span>;</span><br><span class="line">    tr[p].c = <span class="literal">true</span>;</span><br><span class="line">    tr[p].s = tr[p].t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].xx = tr[p &lt;&lt; <span class="number">1</span>].xx + tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].xx;</span><br><span class="line">    tr[p].x = tr[p &lt;&lt; <span class="number">1</span>].x + tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].x;</span><br><span class="line">    tr[p].y = tr[p &lt;&lt; <span class="number">1</span>].y + tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].y;</span><br><span class="line">    tr[p].xy = tr[p &lt;&lt; <span class="number">1</span>].xy + tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].xy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modchg</span>(p &lt;&lt; <span class="number">1</span>), <span class="built_in">modchg</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">modadd</span>(p &lt;&lt; <span class="number">1</span>, tr[p].s, tr[p].t);</span><br><span class="line">    <span class="built_in">modadd</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, tr[p].s, tr[p].t);</span><br><span class="line">    tr[p].c = <span class="literal">false</span>;</span><br><span class="line">    tr[p].s = tr[p].t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].l = l, tr[p].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].xx = x[l] * x[r];</span><br><span class="line">        tr[p].x = x[l];</span><br><span class="line">        tr[p].y = y[l];</span><br><span class="line">        tr[p].xy = x[l] * y[r];</span><br><span class="line">        tr[p].s = tr[p].t = <span class="number">0</span>;</span><br><span class="line">        tr[p].c = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">segadd</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">double</span> s, <span class="type">double</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modadd</span>(p, s, t);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)<span class="built_in">segadd</span>(p &lt;&lt; <span class="number">1</span>, l, r, s, t);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)<span class="built_in">segadd</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, s, t);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">segchg</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">double</span> s, <span class="type">double</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modchg</span>(p);</span><br><span class="line">        <span class="built_in">modadd</span>(p, s, t);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)<span class="built_in">segchg</span>(p &lt;&lt; <span class="number">1</span>, l, r, s, t);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)<span class="built_in">segchg</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, s, t);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Ret <span class="title">segsum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)<span class="keyword">return</span> &#123; tr[p].xx,tr[p].xy,tr[p].x,tr[p].y &#125;;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    Ret res = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)res = res + <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)res = res + <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">ans</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ret res = <span class="built_in">segsum</span>(<span class="number">1</span>, l, r);</span><br><span class="line">    <span class="type">double</span> len = r - l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (res.xy - res.x * res.y / len) / (res.xx - res.x * res.x / len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;x[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;y[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op, l, r;</span><br><span class="line">        <span class="type">double</span> s, t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;op, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>, <span class="built_in">ans</span>(l, r));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;s, &amp;t);</span><br><span class="line">            <span class="built_in">segadd</span>(<span class="number">1</span>, l, r, s, t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;s, &amp;t);</span><br><span class="line">            <span class="built_in">segchg</span>(<span class="number">1</span>, l, r, s, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P3773 [CTSC2017] 吉夫特 题解</title>
    <url>/solutions/solution-p3773/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">吉夫特</div>
<div id="problem-info-from">CTSC 2017</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM3NzM=">Luogu P3773</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yMjY0">LibreOJ L2264</span></li><li><span class="exturl" data-url="aHR0cHM6Ly91b2ouYWMvcHJvYmxlbS8zMDA=">UOJ #300</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzQ5MDM=">BZOJ #4903</span></li></ul></div>

<hr>
<p>题目要求我们从一个数列中找出满足 $\displaystyle \prod_{i&#x3D;2}^k C_{a_{b_{i-1}}}^{a_{b_i}}$ 为奇数的子序列个数。</p>
<p>看起来很难算，但是我们可以根据卢卡斯定理化简，以此迅速判断是否满足条件。</p>
<p>卢卡斯定理是 $C_a^b \bmod{p} \equiv C_{a \div p}^{b \div p} \times C_{a \bmod{p}}^{b \bmod{p}} \bmod{p}$。</p>
<p>因为此处 $p&#x3D;2$，所以我们可以将其分解成为一串组合数，其中只包含 $C_0^0$、$C_0^1$、$C_1^0$ 和 $C_1^1$ 四种。<br>其中只有 $C_0^1 &#x3D; 0$。</p>
<p>这样预示着符合条件的子序列会很多，不如求出不合法的状况然后从总数里面减去。<br>那么我们只需要看 $a_{b_{i-1}}$ 某一位是 $1$ 而 $a_{b_i}$ 这一位是 $0$ 的情况就好了。<br>对于一个数，这种情况只需要有与二进制位数奇偶性不同的次数就可以了。</p>
<p>但是枚举数字判断不是特别能过。</p>
<p>我们可以尝试换种方法，将满足上面性质的 $a_{b_i}$ 当成 $a_{b_{i-1}}$ 的子集，枚举子集即可，然后判断枚举出来的这个数字是否在其后面。<br>实际写的时候我们可以将所有的 $a_i$ 存进桶里，存储下来每一个 $a_i$ 对应的以其开头的子序列个数，然后统计答案。</p>
<p>复杂度 $O(3^{log a_{max}})$，实测可过。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">250010</span>;</span><br><span class="line"><span class="type">int</span> l[N], r[N], sum[N];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> a[N], f[N];</span><br><span class="line"><span class="type">int</span> tong[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%dd&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        tong[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = a[i] &amp; (a[i] - <span class="number">1</span>); j; j = a[i] &amp; (j - <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span>(tong[j] &gt; i)f[i] = (f[i] + f[tong[j]]) % mod;</span><br><span class="line">        ans = (ans + f[i]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = (ans - n + mod) % mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





















]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>数学（题目）</tag>
      </tags>
  </entry>
  <entry>
    <title>P4135 作诗 题解</title>
    <url>/solutions/solution-p4135/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">作诗</div>
<div id="problem-info-from">none</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQxMzU=">Luogu P4135</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8zMjc3">LibreOJ L6180</span></li></ul></div>

<hr>
<p>对于这道题，我们首先想到的就是分块了，因为看起来只能暴力做，没有什么好用的数据结构来维护。<br>我们对于每一个整段求出每一个颜色在其中的出现次数，每一次U型你问的时候只需要将其累加起来再统计即可。</p>
<p>但是我们颜色的种类数 $c$ 是与 $n$ 同阶的，我们枚举的时候难免会带一个较大的复杂度，达不到 $O(\sqrt{n})$ 的复杂度要求。</p>
<p>考虑不考虑这些整块内的颜色，只考虑散块内的颜色对整块内的答案的影响。因为散块内的颜色最多也只有 $O(\sqrt{n})$ 种。这样，我们需要枚举的颜色也就不超过 $O(\sqrt{n})$ 种了。</p>
<p>我们记录每一块的颜色后缀和 $cnt[bl][color]$，然后再记录一个整块形成的段的答案 $f[tl][tr]$。</p>
<p>统计的时候，假如说我们统计的块是从 $l$ 到 $r$ 的一段区间，而 $tl$ 和 $tr$ 分别是 $l$ 和 $r$ 所在的两个散块。<br>那么我们暴力统计出来 $tl$ 和 $tr$ 这两个散块中的颜色和 $num[color]$，同时拿一个什么东西记录下来所有出现过的颜色（我这里是用栈），然后拿出来 $f[tl][tr]$ 作为基准的答案。<br>对于每一个在散块内出现过的颜色，我们分六类讨论。</p>
<ol>
<li>该颜色在散块内出现奇数次，在整块内没有出现。<br> 此时该颜色对答案无影响。</li>
<li>该颜色在散块内出现偶数次，在整块内没有出现。<br> 此时该颜色对答案有1的贡献。</li>
<li>该颜色在散块内出现奇数次，在整块内出现奇数次。<br> 此时该颜色对答案有1的贡献。</li>
<li>该颜色在散块内出现偶数次，在整块内出现奇数次。<br> 此时该颜色对答案没有贡献。</li>
<li>该颜色在散块内出现奇数次，在整块内出现偶数次。<br> 此时该颜色对答案有-1的贡献。</li>
<li>该颜色在散块内出现偶数次，在整块内出现偶数次。<br> 此时该颜色对答案没有贡献。</li>
</ol>
<p>这六种情况中只有三种对答案有贡献，只需要判断是否满足条件即可。</p>
<p>前期处理的时间复杂度也不高，如果方法得当的话就是 $O(n \sqrt{n})$ 的，不会对后面的询问产生影响。</p>
<p>参考代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = <span class="number">440</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"><span class="type">int</span> S;</span><br><span class="line"><span class="type">int</span> lastans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> bl[N];</span><br><span class="line"><span class="type">int</span> cnt[M][N];</span><br><span class="line"><span class="type">int</span> f[M][M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;c, &amp;m);</span><br><span class="line">    S = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        bl[i] = i / S;</span><br><span class="line">    &#125;</span><br><span class="line">    bl[n] = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= bl[n - <span class="number">1</span>]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i * S; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt[i][a[j]]++;</span><br><span class="line">            <span class="keyword">if</span>(cnt[i][a[j]] &amp; <span class="number">1</span> &amp;&amp; cnt[i][a[j]] &gt; <span class="number">1</span>)t--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((cnt[i][a[j]] % <span class="number">2</span>) == <span class="number">0</span>)t++;</span><br><span class="line">            <span class="keyword">if</span>(bl[j] != bl[j + <span class="number">1</span>])f[i][bl[j]] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num[N], sta[N], tt;</span><br><span class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="built_in">sizeof</span>(num));</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        l = (l + lastans) % n;</span><br><span class="line">        r = (r + lastans) % n;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r)<span class="built_in">swap</span>(l, r);</span><br><span class="line">        <span class="type">int</span> tl = bl[l], tr = bl[r];</span><br><span class="line">        <span class="keyword">if</span>(tl == tr)</span><br><span class="line">        &#123;</span><br><span class="line">            tt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                num[a[i]]++;</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] == <span class="number">1</span>)sta[++tt] = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tt; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> k = sta[i];</span><br><span class="line">                <span class="keyword">if</span>(num[k] % <span class="number">2</span> == <span class="number">0</span>)res++;</span><br><span class="line">                num[k] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lastans = res;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tt = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(tl + <span class="number">1</span> &lt;= tr - <span class="number">1</span>)res += f[tl + <span class="number">1</span>][tr - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt; (tl + <span class="number">1</span>) * S; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                num[a[i]]++;</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] == <span class="number">1</span>)sta[++tt] = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = tr * S; i &lt;= r; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                num[a[i]]++;</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] == <span class="number">1</span>)sta[++tt] = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tt; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> k = sta[i];</span><br><span class="line">                <span class="keyword">if</span>(num[k] % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; (cnt[tl + <span class="number">1</span>][k] - cnt[tr][k]) % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; (cnt[tl + <span class="number">1</span>][k] - cnt[tr][k]) &gt; <span class="number">0</span>)res--;</span><br><span class="line">                <span class="keyword">if</span>(num[k] % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; (cnt[tl + <span class="number">1</span>][k] - cnt[tr][k]) % <span class="number">2</span> == <span class="number">1</span>)res++;</span><br><span class="line">                <span class="keyword">if</span>(num[k] % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; (cnt[tl + <span class="number">1</span>][k] - cnt[tr][k]) == <span class="number">0</span>)res++;</span><br><span class="line"></span><br><span class="line">                num[k] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lastans = res;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P4336 [SHOI2016] 黑暗前的幻想乡 题解</title>
    <url>/solutions/solution-p4336/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">黑暗前的幻想乡</div>
<div id="problem-info-from">SHOI 2016</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQzMzY=">Luogu P4336</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yMDI3">LibreOJ L2027</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMjc5NS8=">AcWing 2793</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzQ1OTY=">BZOJ #4596</span></li></ul></div>

<hr>
<h1 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h1><h2 id="Kirchhoff-矩阵树定理"><a href="#Kirchhoff-矩阵树定理" class="headerlink" title="Kirchhoff 矩阵树定理"></a>Kirchhoff 矩阵树定理</h2><p>Kirchhoff矩阵树定理解决了一个问题：对于一个确定的无向图，其究竟有多少个生成树？</p>
<p>对于一个无向图，我们拥有其邻接矩阵 $\bf{A}$。<br>这里的邻接矩阵允许重边，第 $i$ 行第 $j$ 列的值代表着点 $i$ 到点 $j$ 有几条边。<br>不允许自环。</p>
<p>我们定义一个无向图的度数矩阵 $\bf{D}$ 为，第 $i$ 行第 $i$ 列上的数字是点 $i$ 的度数，其余的格子都为 $0$ 的矩阵。</p>
<p>我们定义一个图的 Kirchhoff矩阵 ${\bf{K}} &#x3D; {\bf{D}} - {\bf{A}}$。</p>
<p>这个矩阵同时去掉任意一行一列，剩下的这个子矩阵的行列式的绝对值，就是该无向图的生成树个数。</p>
<h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><p>行列式可以被理解为列向量夹的几何体的体积，用 $\det({\bf{A}})$ 表示 $\bf{A}$ 这个方阵的行列式。</p>
<p>这里不讲太细，细一点的可以去看我的另外一篇博客。</p>
<p>在这里，我们只需要知道几个简单的点：</p>
<ol start="0">
<li>每一个方阵都有自己的行列式，公式是 $\displaystyle \det({\bf{A}}) &#x3D; \sum_{\sigma \in S_n} \operatorname{sgn}(\sigma) \prod_{i&#x3D;1}^n a_{i,\sigma(i)}$。</li>
<li>三角矩阵的行列式是可以以很小的复杂度计算出来的。具体方法是其对角线之积。</li>
<li>方阵的行列式有如下几个性质：<ol>
<li>矩阵转置，行列式不变；</li>
<li>矩阵行（列）交换，行列式取反；</li>
<li>矩阵行（列）相加减，行列式不变；</li>
<li>矩阵行（列）所有元素同时乘以数 $k$，行列式也乘 $k$。</li>
</ol>
</li>
<li>通过上面的几个操作（其实就是高斯消元）可以将一个矩阵消为一个三角矩阵，而反过来则可以从三角矩阵变回原矩阵。</li>
</ol>
<p>那么我们存储一个系数，在消元的时候维护这个系数，直到最后得到三角矩阵的时候再将系数乘在这个我们能够简单求出的行列式上，就可以得到原矩阵的行列式了。</p>
<h1 id="题目解读"><a href="#题目解读" class="headerlink" title="题目解读"></a>题目解读</h1><p>题目要求我们求出一个无向图的生成树数量，并且该生成树需要满足其中的每一条边都属于一个不同的集合。</p>
<p>那么我们考虑容斥，将“恰好”改为“至多”。</p>
<p>这样我们枚举由 $n-1$ 个集合构成的无向图的时候会记录上由 $n-2$ 个集合构成的无向图的结果，需要减去这部分的影响。<br>然后枚举由 $n-2$ 个集合构成的无向图，同时会记录上由 $n-3$ 个集合构成的无向图的结果。<br>这样一直容斥下去，直到最后枚举由 $1$ 个集合构成的无向图的结果的时候，容斥就可以停止了。</p>
<p>每一次枚举的时候，我们都需要跑矩阵树定理。每一次跑矩阵树定理都是 $O((n-1)^3)$ 的，我们需要跑 $2^{n-1}$ 次，所以最终的复杂度是 $O(2^{n-1}(n-1)^3)$ 的。</p>
<p>参考代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>, M = N * N;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, maxn;</span><br><span class="line"><span class="type">int</span> m[N];</span><br><span class="line"><span class="type">int</span> u[N][M], v[N][M];</span><br><span class="line"><span class="type">int</span> sz[(<span class="number">1</span> &lt;&lt; <span class="number">18</span>)];</span><br><span class="line">ll krh[N][N];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x &amp; <span class="number">1</span>)res = (res * a) % mod;</span><br><span class="line">        a = (a * a) % mod;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">det</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(krh[i][i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n - <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(krh[j][i] == <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                flag ^= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n - <span class="number">1</span>; k++)</span><br><span class="line">                    <span class="built_in">swap</span>(krh[i][k], krh[j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt;= n - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(krh[j][i] == <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            ll inv = <span class="built_in">qpow</span>(krh[j][i], mod - <span class="number">2</span>);</span><br><span class="line">            res = (res * krh[j][i]) % mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = i; k &lt;= n - <span class="number">1</span>; k++)</span><br><span class="line">                krh[j][k] = (krh[j][k] * inv) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(krh[j][i] == <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = i; k &lt;= n - <span class="number">1</span>; k++)</span><br><span class="line">                krh[j][k] = (krh[j][k] - krh[i][k] + mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">        res = (res * krh[i][i]);</span><br><span class="line">    <span class="keyword">return</span> (flag) ? (mod - res) % mod : res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    maxn = (<span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>)) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m[i]; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u[i][j], &amp;v[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++)</span><br><span class="line">        sz[i] = sz[i &gt;&gt; <span class="number">1</span>] + (i &amp; <span class="number">1</span>);</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(krh, <span class="number">0</span>, <span class="built_in">sizeof</span>(krh));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>, p = i; p; p &gt;&gt;= <span class="number">1</span>, j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((p &amp; <span class="number">1</span>) == <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= m[j]; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> U = u[j][k], V = v[j][k];</span><br><span class="line">                krh[U][U]++, krh[V][V]++;</span><br><span class="line">                krh[U][V] = (krh[U][V] + mod - <span class="number">1</span>) % mod;</span><br><span class="line">                krh[V][U] = (krh[V][U] + mod - <span class="number">1</span>) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = (res + mod + <span class="built_in">det</span>() * ((n - sz[i]) % <span class="number">2</span> ? <span class="number">1</span> : <span class="number">-1</span>)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>数学（题目）</tag>
        <tag>矩阵树定理</tag>
        <tag>容斥</tag>
      </tags>
  </entry>
  <entry>
    <title>P4568 [JLOI2011] 飞行路线 题解</title>
    <url>/solutions/solution-p4568/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">飞行路线</div>
<div id="problem-info-from">JLOI 2011</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQ1Njg=">Luogu P4568</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMjk1Ni8=">AcWing 2953</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzI3NjM=">BZOJ #2763</span></li></ul></div>

<hr>
<p>一眼最短路，但是多了一些条件：可以最多将最短路上 $k$ 条边的权值变为 $0$。</p>
<p>因为我们求的是两个点之间的最短路，只需要最小化这两个点之间的距离即可，这样我们就不能先跑最短路再改边权。</p>
<p>我们考虑换种建图方式。</p>
<p>我们考虑将免费的机票和付费的机票分开连边。</p>
<p>我们在原图的基础上再建立 $k$ 层同样的图，分别代表使用了 $1,2,3,\cdots,k$ 次免费机票时的状态。<br>相邻两层之间也连边，边权为 $0$。对于原图中的每一条边 $(u,v)$，我们同时从第 $i$ 层的 $u$ 向第 $i+1$ 的 $v$、从第 $i$ 层的 $v$ 向第 $i+1$ 层的 $u$ 连上一条边权为 $0$ 的有向边，代表使用了免费的机票。</p>
<p>我们就从第 $0$ 层的 $s$ 向第 $k$ 层的 $t$ 跑最短路。</p>
<p>同时，以防某些奇葩数据使得我们没用完 $k$ 张免费机票就到了 $t$，我们把相邻两层之间的 $t$ 也连上边权为 $0$ 的有向边。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500010</span>, M = <span class="number">5000010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], w[M], idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> dis, u;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &gt; (<span class="type">const</span> node&amp; a) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> dis &gt; a.dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> dis[N], vis[N];</span><br><span class="line">priority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt; &gt;q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">63</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123; <span class="number">0</span>,s &#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">top</span>().u;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[u])<span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i], c = w[i];</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + c)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u] + c;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v])q.<span class="built_in">push</span>(&#123; dis[v],v &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="type">int</span> s, t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;s, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c), <span class="built_in">add</span>(b, a, c);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(a + n * (j - <span class="number">1</span>), b + n * j, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">add</span>(b + n * (j - <span class="number">1</span>), a + n * j, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">add</span>(a + n * j, b + n * j, c);</span><br><span class="line">            <span class="built_in">add</span>(b + n * j, a + n * j, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        <span class="built_in">add</span>(t + n * (i - <span class="number">1</span>), t + n * i, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dijkstra</span>(s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dis[t + n * k]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>P4588 [TJOI2018] 数学计算 题解</title>
    <url>/solutions/solution-p4588/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">数学计算</div>
<div id="problem-info-from">TJOI 2018</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQ1ODg=">Luogu P4588</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yNTcz">LibreOJ L2573</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMzAwNC8=">AcWing 3001</span></li></ul></div>

<hr>
<p>题目要求我们维护一个初始值为1的数字 $x$，要求支持对其乘以一个数和除以一个数，并在每一次操作后输出 $x \bmod{M}$。</p>
<p>同时，题目保证我们除以的数之前被乘过，且每一个被乘过的数至多只会被除一次。<br>这样就可以将除法操作转化为撤回一次乘法操作。</p>
<p>这样我们需要做的就是，维护一串数的连乘积，同时支持向这一串数里面加入数和去掉数。</p>
<p>我们可以尝试使用乘法逆元做，但是这个 $M$ 不一定是质数，所以还需要判整除，非常麻烦。<br>或者可以使用中国剩余定理强行来一波，但是会更麻烦。</p>
<p>我们可以尝试使用线段树来维护区间乘积。<br>首先将所有的的数值全都初始化成1，然后每一次做单点修改区间查询即可。<br>甚至不需要区间查询，只需要查询根节点的值就可以了。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, mod;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> v;</span><br><span class="line">&#125;node[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[p].l = l;</span><br><span class="line">    node[p].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        node[p].v = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    node[p].v = (node[p &lt;&lt; <span class="number">1</span>].v * node[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v) % mod;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">segchg</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> ed, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((node[p].r == ed) &amp;&amp; (node[p].l == ed))</span><br><span class="line">    &#123;</span><br><span class="line">        node[p].v = k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (node[p].r + node[p].l) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (mid &gt;= ed)<span class="built_in">segchg</span>(p &lt;&lt; <span class="number">1</span>, ed, k);</span><br><span class="line">    <span class="keyword">if</span> (mid &lt; ed)<span class="built_in">segchg</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, ed, k);</span><br><span class="line">    node[p].v = (node[p &lt;&lt; <span class="number">1</span>].v * node[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v) % mod;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;mod);</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, N);</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> op, x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;op, &amp;x);</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">segchg</span>(<span class="number">1</span>, i + <span class="number">1</span>, x);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, node[<span class="number">1</span>].v % mod);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">segchg</span>(<span class="number">1</span>, x + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, node[<span class="number">1</span>].v % mod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>P4643 [国家集训队] 阿狸和桃子的游戏 题解</title>
    <url>/solutions/solution-p4643/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">阿狸和桃子的游戏</div>
<div id="problem-info-from">国家集训队</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQ2NDM=">Luogu P4643</span></li></ul></div>

<hr>
<p>题目大意是，我们需要从一个带有边权和点权的图上对点进行染色，并按照一个特定的规则计分，最终输出两人得分之差，要求差最大。</p>
<p>某一个人的得分是其染色的点权值之和，再加上两端点均被其染色的边权之和。</p>
<hr>
<p>因为我们需要求的是两人得分之差，所以原本一条边的两端点分别被两人染色之后边权互不归属的情况可以看做两人各取一半。<br>同理，如果一条边的两个端点都被同一个人染了色之后，这条边的两半权值都被这个人拿走了，与我们题目里的情况符合。</p>
<p>那我们就可以将边的权值一分为二，分别加到两个端点上，然后将这道题目变成选择最大点权和。</p>
<p>因为两人均采取最优策略，所以桃子取到了最大值之后，阿狸就会取次大值，然后桃子去第三大的值，如此往复。</p>
<p>于是我们就可以将点按照权值降序两两一组，求所有组内点权之差的总和。</p>
<p>然后我们就可以输出答案了。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">        a[i] = k &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">        a[x] += z;</span><br><span class="line">        a[y] += z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i -= <span class="number">2</span>)ans += a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>P5024 [NOIP2018 提高组] 保卫王国 题解</title>
    <url>/solutions/solution-p5024/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">保卫王国</div>
<div id="problem-info-from">NOIP-S 2018</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDUwMjQ=">Luogu P5024</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yOTU1">LibreOJ L2955</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvNTM4Lw==">AcWing 536</span></li><li><span class="exturl" data-url="aHR0cHM6Ly91b2ouYWMvcHJvYmxlbS80NDE=">UOJ #441</span></li></ul></div>

<hr>
<p>保卫王国这道题是一道非常经典的动态DP题目，尽管其刚刚推出不到几年。</p>
<h1 id="题意转化"><a href="#题意转化" class="headerlink" title="题意转化"></a>题意转化</h1><p>首先我们做一下题意的转化。</p>
<p>题目要求在Z<del>imbabwe</del>国的每一个城市选择驻军或者不驻军，要求每一条道路两端至少有一个城市驻军。<br>驻军会产生正的费用，我们需要找出费用最小的方案。</p>
<p>对于上面的部分，我们只需要求一下这棵树的最小权点覆盖即可，也就是点权和减去最大权独立集。</p>
<p>然后我们还需要满足一系列要求，要求钦定两个城市强制驻军&#x2F;不驻军，对每一个要求我们需要输出在当前要求下的最小权点覆盖。<br>询问之间互不影响。</p>
<p>对于这个情况的话，我们强制选点就可以将其权值改为 $w[i] - 10^{15}$，强制不选点的话就可以将其权值改为 $w[i] + 10^{15}$，最后再在答案里面消除影响即可。</p>
<p>然后就是如何快速求出答案了。</p>
<h1 id="动态DP"><a href="#动态DP" class="headerlink" title="动态DP"></a>动态DP</h1><p>动态DP是一类树上问题的统称，其一般源于一些简单的树上DP（就比如说让我们求树上的最大独立集），但是被加入了<del>丧心病狂</del>的修改点权操作。</p>
<p>我们先考虑一下正常的树上最大独立集怎么做。</p>
<p>我们定义 $f_{x,1}$ 为选中 $x$ 节点的最大结果，$f_{x,0}$ 为不选 $x$ 节点的最大结果，不难得到以下式子：</p>
<p>$$<br>\begin{align}<br>f_{i,0} &amp;&#x3D; \sum_j \max(f_{j,0},f_{j,1}) \\<br>f_{i,1} &amp;&#x3D; \sum_j f_{j,0} + a_i<br>\end{align}<br>$$</p>
<p>最后的答案就是 $max(f_{1,0},f_{1,1})$。</p>
<p>我们在没有修改点权的情况下一通 $O(n)$ 的DP就可以解决了。</p>
<p>但是对于修改点权的情况下我们无法（也不一定用）承担 $O(nm)$ 的时间复杂度。<br>我们再次看一眼上面的式子，发现只需要更新点权被更改了的节点到根节点的路径上的所有DP值即可。</p>
<p>这样做有一个风险，我们很可能遇到一条链的情况，这时候我们需要更新 $n$ 个节点，我们担不起这样的时间复杂度。<br>我们希望只需要更新 $O(\log n)$ 级别的节点……</p>
<p>tbl大神从上古论文中翻出来一个“全局平衡二叉树”（<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL2Jsb2cvX3Bvc3QvNDY5Njc=">题解在此</span>），（看起来）比单独树剖要好写，还不会被卡。<br>“全局平衡二叉树”固然好，但是Kaiser不会。<br>所以这里就只介绍树剖做法了。</p>
<p>树剖有一个性质，就是其重链个数不超过 $O(\log n)$ 条，我们最多需要更新的次数也不多于 $O(\log n)$ 次。</p>
<p>这样我们就可以将我们的复杂度降为 $O(m\log n)$ 级别的，看一下是可以过 $10^5$ 的数据的。</p>
<h1 id="维护信息"><a href="#维护信息" class="headerlink" title="维护信息"></a>维护信息</h1><p>然后我们考虑如何去维护这种信息。</p>
<p>同一条重链上的节点DFS序都是连续的，这让我们可以使用线段树等数据结构进行维护。</p>
<p>我们保持 $f$ 数组的定义不变，新建一个 $g$ 数组来迎合树剖剖出来的重儿子和轻儿子的概念。<br>我们定义 $g_{i,0}$ 代表 $i$ 号节点所有轻儿子都不取的结果，$g_{i,1}$ 代表 $i$ 号节点的轻儿子可取可不取的结果。<br>这样我们就可以大大简化我们的DP式子：</p>
<p>$$<br>\begin{align}<br>f_{i,0} &amp;&#x3D; g_{i,0} + \max(f_{son_i,0},f_{son_i,1}) \\<br>f_{i,1} &amp;&#x3D; g_{i,1} + a_i + f_{son_i,0}<br>\end{align}<br>$$</p>
<p>特殊地，对于叶子结点，$g_{i,0}&#x3D;g_{i,1}&#x3D;0$。</p>
<p>我们不如再合并一下，让 $g_{i,1}$ 直接代表只考虑轻儿子和自己的最大权独立集，相当于原来的 $g_{i,1}+a_i$。<br>这样我们的式子里面就只剩下 $f$ 和 $g$ 了。</p>
<p>这样子仍然不好维护。</p>
<h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p>我们考虑像维护广义斐波那契数列那样维护信息，也就是定义一个矩阵和转移矩阵，用矩阵乘的方式来维护我们的信息。</p>
<p>我们大胆地定义一个新运算 $\odot$，定义 $\mathbf{A} \odot \mathbf{B}$ 的结果 $\mathbf{C}$ 为：</p>
<p>$$<br>\mathbf{C}_{i,j} &#x3D; \max_k (\mathbf{A}_{i,k},\mathbf{B}_{k,j})<br>$$</p>
<p>相当于就是把正常矩阵乘法里面的 $\sum$ 改为了 $\max$。<br>不知道什么原因，可能是取max和求和都具有结合律吧，这个操作就是满足结合律，我们就可以用矩阵乘法来维护它。</p>
<p>然后我们把我们的式子拆成类似这样的形式：</p>
<p>$$<br>\begin{align}<br>f_{i,0} &amp;&#x3D; \max(f_{son_i,0}+g_{i,0},f_{son_i,1}+g_{i,0}) \\<br>f_{i,1} &amp;&#x3D; \max(f_{son_i,0}+g_{i,1},-\infty)<br>\end{align}<br>$$</p>
<p>这样子我们就可以利用矩阵维护了。</p>
<p>我们确定我们的状态矩阵是长这个样子的：$[f_{i,0},f_{i,1}]$</p>
<p>然后我们需要找到一个转移矩阵 $\mathbf{U}$ 来使得 $[f_{son_i,0},f_{son_i,1}] \odot \mathbf{U} &#x3D; [f_{i,0},f_{i,1}]$。</p>
<p>经过一番推导，我们可以得出我们的转移矩阵是 $\begin{bmatrix}g_{i,0}&amp;g_{i,1}\\g_{i,0}&amp;-\infty\end{bmatrix}$。<br>（比较简单我就不写了）</p>
<p>于是我们就可以开心维护了。</p>
<p>对于每一个节点，我们存储的是一个转移矩阵。在重链上的时候直接就求区间积，需要跳轻边的时候更新转移矩阵即可。</p>
<p>不过我们访问重链的时候是先访问链顶再访问链尾，我们的左右乘关系需要倒过来，整理一下可得<br>$$<br>\begin{bmatrix}g_{i,0}&amp;g_{i,1}\\g_{i,0}&amp;-\infty\end{bmatrix}<br>\odot<br>\begin{bmatrix}f_{son_i,0}\\f_{son_i,1}\end{bmatrix}&#x3D;<br>\begin{bmatrix}f_{i,0}\\f_{i,1}\end{bmatrix}<br>$$</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = <span class="number">200010</span>;</span><br><span class="line"><span class="type">const</span> ll INF = <span class="number">1e15</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    ll m[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">Matrix</span>() &#123; <span class="built_in">memset</span>(m, <span class="number">-0x3f</span>, <span class="built_in">sizeof</span>(m)); &#125;</span><br><span class="line">    <span class="keyword">inline</span> Matrix <span class="keyword">operator</span> * (Matrix b)</span><br><span class="line">    &#123;</span><br><span class="line">        Matrix c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">                    c.m[i][j] = <span class="built_in">max</span>(c.m[i][j], m[i][k] + b.m[k][j]);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa[N], son[N], sz[N], dep[N], top[N];</span><br><span class="line"><span class="type">int</span> id[N], dfn[N], ed[N], cnt;</span><br><span class="line">ll f[N][<span class="number">2</span>];</span><br><span class="line">Matrix val[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    Matrix v;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].v = tr[p &lt;&lt; <span class="number">1</span>].v * tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].l = l, tr[p].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].v = val[dfn[l]];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">segadd</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].l == tr[p].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].v = val[dfn[x]];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)<span class="built_in">segadd</span>(p &lt;&lt; <span class="number">1</span>, x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">segadd</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Matrix <span class="title">segsum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].l == l &amp;&amp; tr[p].r == r)<span class="keyword">return</span> tr[p].v;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span>, l, mid) * <span class="built_in">segsum</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[p] = father, dep[p] = dep[father] + <span class="number">1</span>, sz[p] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (j == father)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(j, p);</span><br><span class="line">        sz[p] += sz[j];</span><br><span class="line">        <span class="keyword">if</span> (sz[j] &gt; sz[son[p]])son[p] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[p] = ++cnt, dfn[cnt] = p, top[p] = t;</span><br><span class="line">    ed[t] = <span class="built_in">max</span>(ed[t], cnt);</span><br><span class="line">    f[p][<span class="number">0</span>] = <span class="number">0</span>, f[p][<span class="number">1</span>] = a[p];</span><br><span class="line">    val[p].m[<span class="number">0</span>][<span class="number">0</span>] = val[p].m[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    val[p].m[<span class="number">1</span>][<span class="number">0</span>] = a[p];</span><br><span class="line">    <span class="keyword">if</span> (son[p])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs2</span>(son[p], t);</span><br><span class="line">        f[p][<span class="number">0</span>] += <span class="built_in">max</span>(f[son[p]][<span class="number">0</span>], f[son[p]][<span class="number">1</span>]);</span><br><span class="line">        f[p][<span class="number">1</span>] += f[son[p]][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (j == fa[p] || j == son[p])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(j, j);</span><br><span class="line">        f[p][<span class="number">0</span>] += <span class="built_in">max</span>(f[j][<span class="number">0</span>], f[j][<span class="number">1</span>]);</span><br><span class="line">        f[p][<span class="number">1</span>] += f[j][<span class="number">0</span>];</span><br><span class="line">        val[p].m[<span class="number">0</span>][<span class="number">0</span>] += <span class="built_in">max</span>(f[j][<span class="number">0</span>], f[j][<span class="number">1</span>]);</span><br><span class="line">        val[p].m[<span class="number">0</span>][<span class="number">1</span>] = val[p].m[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        val[p].m[<span class="number">1</span>][<span class="number">0</span>] += f[j][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addpath</span><span class="params">(<span class="type">int</span> p, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    val[p].m[<span class="number">1</span>][<span class="number">0</span>] += k - a[p];</span><br><span class="line">    a[p] = k;</span><br><span class="line">    Matrix bef, aft;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        bef = <span class="built_in">segsum</span>(<span class="number">1</span>, id[top[p]], ed[top[p]]);</span><br><span class="line">        <span class="built_in">segadd</span>(<span class="number">1</span>, id[p]);</span><br><span class="line">        aft = <span class="built_in">segsum</span>(<span class="number">1</span>, id[top[p]], ed[top[p]]);</span><br><span class="line">        p = fa[top[p]];</span><br><span class="line">        val[p].m[<span class="number">0</span>][<span class="number">0</span>] += <span class="built_in">max</span>(aft.m[<span class="number">0</span>][<span class="number">0</span>], aft.m[<span class="number">1</span>][<span class="number">0</span>]) - <span class="built_in">max</span>(bef.m[<span class="number">0</span>][<span class="number">0</span>], bef.m[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        val[p].m[<span class="number">0</span>][<span class="number">1</span>] = val[p].m[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        val[p].m[<span class="number">1</span>][<span class="number">0</span>] += aft.m[<span class="number">0</span>][<span class="number">0</span>] - bef.m[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> type[<span class="number">10</span>];</span><br><span class="line">ll sum;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">0</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    cin &gt;&gt; type;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, x, v, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;u, &amp;x, &amp;v, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> ((x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &amp;&amp; (fa[u] == v || fa[v] == u))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll v1 = a[u], v2 = a[v];</span><br><span class="line">        <span class="built_in">addpath</span>(u, a[u] + (x == <span class="number">1</span> ? -INF : INF));</span><br><span class="line">        <span class="built_in">addpath</span>(v, a[v] + (y == <span class="number">1</span> ? -INF : INF));</span><br><span class="line">        Matrix ans = <span class="built_in">segsum</span>(<span class="number">1</span>, id[<span class="number">1</span>], ed[<span class="number">1</span>]);</span><br><span class="line">        ll res = sum - <span class="built_in">max</span>(ans.m[<span class="number">0</span>][<span class="number">0</span>], ans.m[<span class="number">1</span>][<span class="number">0</span>]) + (x == <span class="number">1</span> ? <span class="number">0</span> : INF) + (y == <span class="number">1</span> ? <span class="number">0</span> : INF);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, res);</span><br><span class="line">        <span class="built_in">addpath</span>(u, v1);</span><br><span class="line">        <span class="built_in">addpath</span>(v, v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>树链剖分</tag>
        <tag>动态DP</tag>
      </tags>
  </entry>
  <entry>
    <title>P4654 [CEOI2017] Mousetrap 题解</title>
    <url>/solutions/solution-p4654/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Mousetrap</div>
<div id="problem-info-from">CEOI 2017</div>
<div id="problem-info-difficulty">NOI / NOI+ / CTSC</div>
<div id="problem-info-color">#0e1d69</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQ2NTQ=">Luogu P4654</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yNDgy">LibreOJ L2482</span></li></ul></div>

<p>（蒟蒻的第一道黑题）</p>
<hr>
<p>这是一棵无根树，不如我们先指定一个根节点，因为以1号点为根实在是想不到什么性质可以用了。<br>以老鼠所在节点为根也没有想到什么好性质，那不如就以陷阱房为根罢了。</p>
<p>这样做的话，老鼠想要去陷阱房必须向上走，不管他在哪里。</p>
<p>那么首先我们想一种特殊的情况，就是老鼠就在陷阱房旁边，也就是陷阱房的子节点，与其直接有边相连。<br>那么老鼠肯定不会向上走，他的最优策略肯定是向下走。<br>况且，老鼠在没有人清理走廊的情况下是无法走回头路的，所以其唯一能做的事就是找到一个很深很深的链，然后一头钻进去，再也出不来了。</p>
<p>这样的话，管理员必须采取反制措施。<br>那么现在管理员唯一能做的事，也只有将当前节点的重儿子堵住，才能让老鼠放弃这个决策，转而去次重儿子。</p>
<p>不对，上面还说是链呢，这里怎么就是重儿子了？</p>
<p>因为管理员需要将所有的支链堵住，才能最小化其操作次数；老鼠当然也知道这些，那么其就会向重儿子进发。<br>原因是这个样子的：<br>假设这里有一棵树：</p>
<img src="https://s2.loli.net/2022/07/06/81HAXt27c63a45y.png" width="60%">

<p>其中1号点是陷阱房，也是树根；老鼠一开始在二号房。<br>老鼠经过一番DFS，已经给每一个边标上了轻重：</p>
<img src="https://s2.loli.net/2022/07/06/kr85l3wBzPnexvj.png" width="60%">

<p>现在老鼠已经沿着次重边（2-15-19）到达了最后一个节点，同时管理员也堵上了所有老鼠可能经过的重边（2-4，15-16，19-20），现在他走不动了。<br>这是当前迷宫中的情况：</p>
<img src="https://s2.loli.net/2022/07/06/L5yVWOGRHkYqNtv.png" width="60%">

<p>假如我们擦干净15-19的话，老鼠就会走到15号点。<br>现在我们想要让老鼠继续向上到2号点，于是我们擦干净了2-15，然后……</p>
<p>老鼠钻进20号点了<del>啊啊啊啊</del></p>
<p>如果20号点不是像我们给的图片中的那样光秃秃的，而是有很大的一棵子树（并且不如15和16号点的子树大），那么我们需要费的劲就更大了。</p>
<p>所以我们还需要有一个策略，就是在老鼠不能动的时候堵住所有支链，让老鼠只能沿着当前节点到根的链走。</p>
<p>于是我们堵住了15-20这条边，然后再擦干净2-15让老鼠上去，之后再堵住2-3，让老鼠不得不选择1-2，最后老鼠走到陷阱房，游戏结束。</p>
<p>这是老鼠初始的位置直接连接陷阱房的情况，我们假定了老鼠一开始绝对不会向上走。<br>那如果老鼠的初始位置不是与陷阱房直接相连呢？<br>也就是说，我们得考虑老鼠向上走一点，到达另一棵子树之后再一头扎下去的这种情况。</p>
<p>首先我们可以确定一点，就是我们不需要清理老鼠一开始向上走而污染的路径，因为我们在之后把老鼠再次赶上去的时候这里算是一个支链，需要堵住，而不是需要联通。</p>
<p>老鼠也很智能，他想让我们的操作数尽量多。<br>我们怎样对于一棵子树评估我们的操作数呢？</p>
<p>我们可以定义一个数组 $f_i$，代表我们将老鼠赶进 $i$ 的子树之后又将其赶到 $i$ 所需要的操作数。<br>老鼠肯定想选 $f$ 最大的子树，而我们会将其堵住，所以老鼠实际上选的是次大的子树，然后就这样一直走到底。</p>
<p>现在我们需要找出，哪一棵子树才是老鼠想要去的。<br>我们总不能枚举所有点，这个复杂度太高。</p>
<p>我们发现这个可以进行二分。<br>怎么二分呢？</p>
<p>我们可以记录一个 $sum_i$，代表 $i$ 号节点到根路径上所有支路都被堵上所需要的操作数。<br>其维护的方式是这样的：$sum_x &#x3D; sum_{fa_x} + sz_x - [x \neq m]$。（根节点就不需要这个了）<br>其中 $sz_i$ 代表的是 $i$ 的子树个数，而不是子树大小。</p>
<p>然后我们考虑二分什么。<br>不用想，肯定是操作数。<br>假设我们给管理员设定了一个KPI，希望他能够在 $k$ 次操作内将老鼠赶到陷阱房。<br>而老鼠既然已经知道了管理员的这个目标，那么他只需要找到一颗 $sum &gt; k$ 的子树一头钻进去就不需要出来了。<br>那么管理员就需要将所有 $sum &gt; k$ 的子树封住。同时我们需要注意到封堵这个操作也是需要付出代价的，所以每一次我们封堵的时候 $k$ 都需要自减1。</p>
<p>如果管理员的手速不够快，老鼠钻进了一个 $sum &gt; k$ 的子树，那么就宣告失败；<br>如果管理员封堵太多了，导致 $k &lt; 0$ 了，那也宣告失败；<br>否则就算成功了。</p>
<p>下面是二分函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chq</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = m, cnt = <span class="number">1</span>; i != rt; i = fa[i], cnt++)</span><br><span class="line">    &#123;<span class="comment">//向上遍历到根</span></span><br><span class="line">        <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = h[i]; ~j; j = ne[j])</span><br><span class="line">        &#123;<span class="comment">//枚举子节点</span></span><br><span class="line">            <span class="type">int</span> v = e[j];</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || <span class="comment">//会被老鼠弄脏，不需要堵</span></span><br><span class="line">                sum[i] + f[v] &lt;= k)<span class="comment">//不会超出目标，暂时不需要堵</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!cnt)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//管理员的手速不够快</span></span><br><span class="line">            tmp++;</span><br><span class="line">            cnt--;</span><br><span class="line">        &#125;</span><br><span class="line">        k -= tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k &gt;= <span class="number">0</span>;<span class="comment">//需要封堵的太多了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，所有的东西我们就都分析完了。</p>
<p>示例代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>, M = <span class="number">2000010</span>;</span><br><span class="line"><span class="type">int</span> n, rt, m;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> sz[N], fa[N], f[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> sum[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[p] = father, sz[p] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> h1 = <span class="number">0</span>, h2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[p]; ~i; i = ne[i])<span class="comment">//处理子树大小</span></span><br><span class="line">        <span class="keyword">if</span> (e[i] != father)sz[p]++;</span><br><span class="line">    <span class="keyword">if</span> (p != rt)<span class="comment">//处理sum</span></span><br><span class="line">        sum[p] = sum[father] + sz[p] - (p != m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;<span class="comment">//遍历子树，处理子树次大值</span></span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (j == fa[p])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(j, p);</span><br><span class="line">        <span class="keyword">if</span> (f[j] &gt; h1)h2 = h1, h1 = f[j];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (f[j] &gt; h2)h2 = f[j];</span><br><span class="line">    &#125;</span><br><span class="line">    f[p] = h2 + sz[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chq</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = m, cnt = <span class="number">1</span>; i != rt; i = fa[i], cnt++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = h[i]; ~j; j = ne[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[j];</span><br><span class="line">            <span class="keyword">if</span> (vis[v] || sum[i] + f[v] &lt;= k)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!cnt)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            tmp++;</span><br><span class="line">            cnt--;</span><br><span class="line">        &#125;</span><br><span class="line">        k -= tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;rt, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a, b), <span class="built_in">add</span>(b, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(rt, <span class="number">0</span>);</span><br><span class="line">    f[rt] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = m; i; i = fa[i])<span class="comment">//处理到根的路径，给它们打标记</span></span><br><span class="line">        vis[i] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">1e8</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">chq</span>(mid))r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>二分</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>P5290 [十二省联考 2019] 春节十二响 题解</title>
    <url>/solutions/solution-p5290/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">春节十二响</div>
<div id="problem-info-from">十二省联考 2019</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDUyOTA=">Luogu P5290</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8zMDUy">LibreOJ L3052</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMzA3NC8=">AcWing 3071</span></li></ul></div>

<hr>
<p>在想不到正解之前，我们可以看到出题人对于树是一条链的情况给了15分。</p>
<p>我们可以先想想一条链上的做法，毕竟树可以被剖成若干条链嘛。</p>
<p>然后就是看根节点的儿子数量。<br>如果只有一个儿子的话就输出 $\sum M_i$，<br>如果有两个儿子的话就对其左右子树分别建立一个堆，每一次取出两个堆的堆顶进行比较，取$\max$之后加入答案。当一个堆取尽之后，把另一个对中的所有元素加入答案，最后加入 $M_1$ 即可。</p>
<p>然后考虑将这个推到树上去。</p>
<p>如果我们从下往上合并每一个节点的所有子树的话，其实还是几条链的合并，因为我们最终会将一棵树合并为一条链，忽略了其他对答案不产生影响的信息。</p>
<p>从而最终还是进行了类似上面的链与链之间的合并，正确性也是毋庸置疑的。</p>
<p>时间复杂度 $O(n^2)$，预期得分60分。</p>
<p>然后我们尝试优化复杂度。</p>
<p>对于两棵子树 $x$ 和 $y$，我们假定 $\operatorname{sz}(x) \geq \operatorname{sz}(y)$。那么，按照我们上面的做法，我们的复杂度是 $O(\operatorname{sz}(x))$ 的。</p>
<p>我们考虑将 $y$ 合并到 $x$ 内，这样就省去了再将 $x$ 中的多余节点加入新堆中的操作了，时间复杂度就可以优化为 $O(\operatorname{sz}(y))$。</p>
<p>最后总的复杂度就是 $O(n \log n)$。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c)) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) f = -f; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="number">48</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, a[N], f;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N], t;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; tr[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[x].<span class="built_in">size</span>() &lt; tr[y].<span class="built_in">size</span>()) <span class="built_in">swap</span>(tr[x], tr[y]);</span><br><span class="line">    <span class="keyword">while</span>(tr[y].<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        t.<span class="built_in">push_back</span>(<span class="built_in">max</span>(tr[x].<span class="built_in">top</span>(), tr[y].<span class="built_in">top</span>()));</span><br><span class="line">        tr[x].<span class="built_in">pop</span>(), tr[y].<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(t.<span class="built_in">size</span>()) tr[x].<span class="built_in">push</span>(t.<span class="built_in">back</span>()), t.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; e[x].<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="built_in">dfs</span>(e[x][i]), <span class="built_in">merge</span>(x, e[x][i]);</span><br><span class="line">    tr[x].<span class="built_in">push</span>(a[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">read</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f = <span class="built_in">read</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">        e[f].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tr[<span class="number">1</span>].<span class="built_in">size</span>()) ans += tr[<span class="number">1</span>].<span class="built_in">top</span>(), tr[<span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>STL</tag>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title>P5752 [NOI1999] 棋盘分割 题解</title>
    <url>/solutions/solution-p5752/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">棋盘分割</div>
<div id="problem-info-from">NOI 1999</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDU3NTI=">Luogu P5752</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMzIzLw==">AcWing 321</span></li></ul></div>

<hr>
<p>题目本身已经很简洁了，我这里就不再赘述了。</p>
<p>题目中说的“均方差” $\sigma$，其实就是标准差 $s$。</p>
<p>我们如果想要使标准差 $s$ 最小化，可以使方差 $s^2$ 最小化，效果是一样的。</p>
<p>我们可以观察到，不管我们怎么取值，我们 $\bar{x}$ 的值一定等于 $\dfrac{\sum\limits_{i&#x3D;1}^8 \sum\limits_{j&#x3D;1}^8 a_{i,j}}{n}$。所以我们可以提前预处理出来 $\bar{x}$，使用区间DP的方式来最小化 $\dfrac{(x_i - \bar{x})^2}{n}$。</p>
<p>我们设我们的DP数组为 $f[x_1][y_1][x_2][y_2][k]$，代表在已经切了 $k$ 刀时，左上角为 $(x_1,y_1)$，右下角为 $(x_2,y_2)$ 的这一个矩形所对应的DP值。</p>
<p>由于暴力枚举循环会很多，所以这里采用了记忆化搜索的方法。</p>
<p>每一次我们往下面的状态转移的时候，我们都有两种方案：横着切与竖着切。<br>两种切法都是枚举分割点，然后向下转移。</p>
<p>向下转移也有两种转移的方法，切成的两半都可以向下继续搜索，而剩下的部分就直接利用二维前缀和 $O(1)$ 求值就可以了。</p>
<p>当然我们还有另外一种方法，就是维护平方和 $\sum x_i^2$，使平方和最小。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>, M = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m = <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> s[M][M];</span><br><span class="line"><span class="type">double</span> f[M][M][M][M][N];</span><br><span class="line"><span class="type">double</span> X;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> delta = s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>];</span><br><span class="line">    delta = delta - X;</span><br><span class="line">    <span class="keyword">return</span> delta * delta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x1][y1][x2][y2][k] &gt;= <span class="number">0</span>)<span class="keyword">return</span> f[x1][y1][x2][y2][k];</span><br><span class="line">    <span class="keyword">if</span>(k == n)<span class="keyword">return</span> f[x1][y1][x2][y2][k] = <span class="built_in">get</span>(x1, y1, x2, y2);</span><br><span class="line">    <span class="type">double</span> t = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x1; i &lt; x2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = <span class="built_in">min</span>(t, <span class="built_in">dp</span>(x1, y1, i, y2, k + <span class="number">1</span>) + <span class="built_in">get</span>(i + <span class="number">1</span>, y1, x2, y2));</span><br><span class="line">        t = <span class="built_in">min</span>(t, <span class="built_in">dp</span>(i + <span class="number">1</span>, y1, x2, y2, k + <span class="number">1</span>) + <span class="built_in">get</span>(x1, y1, i, y2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = y1; i &lt; y2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = <span class="built_in">min</span>(t, <span class="built_in">dp</span>(x1, y1, x2, i, k + <span class="number">1</span>) + <span class="built_in">get</span>(x1, i + <span class="number">1</span>, x2, y2));</span><br><span class="line">        t = <span class="built_in">min</span>(t, <span class="built_in">dp</span>(x1, i + <span class="number">1</span>, x2, y2, k + <span class="number">1</span>) + <span class="built_in">get</span>(x1, y1, x2, i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x1][y1][x2][y2][k] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">    X = ( <span class="type">double</span> )s[m][m] / n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>, <span class="built_in">sqrt</span>(<span class="built_in">dp</span>(<span class="number">1</span>, <span class="number">1</span>, m, m, <span class="number">1</span>) / n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面还有一个维护平方和的代码，也有相应的题目，是<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDE0MzY=">洛谷P1436</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>, M = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m = <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> s[M][M];</span><br><span class="line">ll f[M][M][M][M][N];</span><br><span class="line">ll x;</span><br><span class="line"><span class="function">ll <span class="title">get</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll delta = s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> delta * delta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dp</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x1][y1][x2][y2][k] &gt;= <span class="number">0</span>)<span class="keyword">return</span> f[x1][y1][x2][y2][k];</span><br><span class="line">    <span class="keyword">if</span>(k == n)<span class="keyword">return</span> f[x1][y1][x2][y2][k] = <span class="built_in">get</span>(x1, y1, x2, y2);</span><br><span class="line">    ll t = <span class="number">1e15</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x1; i &lt; x2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = <span class="built_in">min</span>(t, <span class="built_in">dp</span>(x1, y1, i, y2, k + <span class="number">1</span>) + <span class="built_in">get</span>(i + <span class="number">1</span>, y1, x2, y2));</span><br><span class="line">        t = <span class="built_in">min</span>(t, <span class="built_in">dp</span>(i + <span class="number">1</span>, y1, x2, y2, k + <span class="number">1</span>) + <span class="built_in">get</span>(x1, y1, i, y2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = y1; i &lt; y2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = <span class="built_in">min</span>(t, <span class="built_in">dp</span>(x1, y1, x2, i, k + <span class="number">1</span>) + <span class="built_in">get</span>(x1, i + <span class="number">1</span>, x2, y2));</span><br><span class="line">        t = <span class="built_in">min</span>(t, <span class="built_in">dp</span>(x1, i + <span class="number">1</span>, x2, y2, k + <span class="number">1</span>) + <span class="built_in">get</span>(x1, y1, x2, i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x1][y1][x2][y2][k] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">dp</span>(<span class="number">1</span>, <span class="number">1</span>, m, m, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>P5994 [PA2014] Kuglarz 题解</title>
    <url>/solutions/solution-p5994/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Kuglarz</div>
<div id="problem-info-from">PA 2014</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDU5OTQ=">Luogu P5994</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzM3MTQ=">BZOJ #3714</span></li></ul></div>

<hr>
<p>首先我们可以想到一个性质，就是我们在知道了 $[l,r_1]$ 和 $[l,r_2]$ 的奇偶性了之后，我们就知道了 $[r_1+1,r_2]$ 的奇偶性。</p>
<p>这与我们连边很像，所以我们可以尝试将其转化为“连接了 $(l,r_1)$ 和 $(l,r_2)$ 之后，$(r_1+1,r_2)$ 就联通了”的这种形式，这样我们就可以对其使用一些图论有关的算法来求解了。</p>
<p>但是这个+1就很不方便，不符合我们正常连边时候的性质，我们需要想办法将其去掉。<br>我们可以将询问 $[l,r]$ 的奇偶性转化为连接 $(l-1,r)$，这样我们就符合了连通性的规则了。</p>
<p>现在我们需要知道每一个点的奇偶性，就相当于是让图中的所有点都联通。同时还需要让我们的总花费最小，这就相当于是让图中的边权和最小。</p>
<p>于是我们就直接跑最小生成树即可。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>, M = <span class="number">4000010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x)p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> edge &amp;a) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; a.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[M];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">            e[m++] = &#123; i - <span class="number">1</span>,j,x &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)p[i] = i;</span><br><span class="line">    <span class="built_in">sort</span>(e, e + m);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = e[i].a, b = e[i].b, w = e[i].w;</span><br><span class="line">        <span class="type">int</span> pa = <span class="built_in">find</span>(a), pb = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(pa != pb)</span><br><span class="line">        &#123;</span><br><span class="line">            p[pa] = pb;</span><br><span class="line">            ans += w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>建图</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>P6419 [COCI2014-2015#1] Kamp 题解</title>
    <url>/solutions/solution-p6419/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Kamp</div>
<div id="problem-info-from">COCI2014-2015#1</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDY0MTk=">Luogu P6419</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8yODA2">LibreOJ L2806</span></li></ul></div>

<hr>
<p>首先我们需要注意一点，就是这个车可以装下所有人，所以我们不需要每一次都返回开始的那个点。<br>其次，我们在送完最后一个人之后也不需要返回开始的那个点。</p>
<p>所以，我们需要一个树形DP来维护这些东西。<br>我们最终的答案就是遍历所有有值的点再回到当前节点的路程，再减去以当前节点为链顶的，到有值的点最长链。<br>显而易见的，我们需要维护两个值：遍历当前点子树内所有有值的点再返回当前节点需要走的路程，以及以该节点为链顶的，到有值的点的最长链。</p>
<p>DFS如下：</p>
<figure class="highlight cpp"><figcaption><span>第一遍DFS</span></figcaption><table><tr><td class="code"><pre><span class="line">ll sz[N], flen[N], slen[N], son[N];</span><br><span class="line">ll f[N], g[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[p] = c[p];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="built_in">dfs1</span>(v, p);</span><br><span class="line">        sz[p] += sz[v];<span class="comment">//子树内有值的节点个数</span></span><br><span class="line">        <span class="keyword">if</span>(sz[v])<span class="comment">//子节点没有值的的话就不需要更新了</span></span><br><span class="line">        &#123;</span><br><span class="line">            g[p] += g[v] + <span class="number">2</span> * w[i];<span class="comment">//一条边只需要走两次</span></span><br><span class="line">            <span class="keyword">if</span>(flen[v] + w[i] &gt;= flen[p])<span class="comment">//更新最长链</span></span><br><span class="line">                slen[p] = flen[p], flen[p] = flen[v] + w[i], son[p] = v;</span><br><span class="line">            <span class="keyword">else</span> slen[p] = <span class="built_in">max</span>(slen[p], flen[v] + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们从1号节点结束了第一遍DFS之后，1号节点的答案就直接出来了。</p>
<p>然后，我们可以再进行一遍DFS，用父节点的答案更新子节点的答案。</p>
<p>更新节点答案的时候，我们有三种可能：</p>
<ol>
<li>该子节点子树内没有有值的点。<br> 那么 $f_v &#x3D; f_u + 2 w_i$。<br> 最长链不需要更新，因为下面没有有值的点。</li>
<li>该子节点子树外没有有值的点。<br> 那么 $f_v$ 就可以直接继承第一遍DFS时的答案。<br> 最长链也不需要更新，因为父节点没有最长链来更新。</li>
<li>一般情况。</li>
</ol>
<p>一般情况就麻烦许多了。</p>
<p>其答案好说，$f_v &#x3D; f_u + 2w_i - 2w_i$，化简一下得 $f_v &#x3D; f_u$。<br>然而最长链不好维护。<br>根据维护最长链时的通用做法，我们维护最长链的同时还需要维护一个次长链，以防父节点的最长链刚好会经过该节点，造成答案错误。<br>所以我们需要在记录最长链的同时记录一下次长链和最长链经过的儿子节点。</p>
<figure class="highlight cpp"><figcaption><span>第二遍DFS</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!sz[v])f[v] = f[p] + <span class="number">2</span> * w[i], flen[v] = flen[p] + w[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(m == sz[v])f[v] = g[v];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            f[v] = f[p];</span><br><span class="line">            <span class="keyword">if</span>(flen[v] &lt; flen[p] + w[i] &amp;&amp; son[p] != v)</span><br><span class="line">                slen[v] = flen[v], flen[v] = flen[p] + w[i], son[v] = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(flen[v] &lt; slen[p] + w[i])</span><br><span class="line">                slen[v] = flen[v], flen[v] = slen[p] + w[i], son[v] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(slen[v] &lt; flen[p] + w[i] &amp;&amp; son[p] != v)</span><br><span class="line">                slen[v] = flen[p] + w[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(slen[v] &lt; slen[p] + w[i])</span><br><span class="line">                slen[v] = slen[p] + w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs2</span>(v, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后直接输出该节点为根的答案减去最长链的长度即可。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500010</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line">ll w[M], c[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line">ll sz[N], flen[N], slen[N], son[N];</span><br><span class="line">ll f[N], g[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[p] = c[p];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="built_in">dfs1</span>(v, p);</span><br><span class="line">        sz[p] += sz[v];</span><br><span class="line">        <span class="keyword">if</span>(sz[v])</span><br><span class="line">        &#123;</span><br><span class="line">            g[p] += g[v] + <span class="number">2</span> * w[i];</span><br><span class="line">            <span class="keyword">if</span>(flen[v] + w[i] &gt;= flen[p])</span><br><span class="line">                slen[p] = flen[p], flen[p] = flen[v] + w[i], son[p] = v;</span><br><span class="line">            <span class="keyword">else</span> slen[p] = <span class="built_in">max</span>(slen[p], flen[v] + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i] == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!sz[v])f[v] = f[p] + <span class="number">2</span> * w[i], flen[v] = flen[p] + w[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(m == sz[v])f[v] = g[v];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            f[v] = f[p];</span><br><span class="line">            <span class="keyword">if</span>(flen[v] &lt; flen[p] + w[i] &amp;&amp; son[p] != v)</span><br><span class="line">                slen[v] = flen[v], flen[v] = flen[p] + w[i], son[v] = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(flen[v] &lt; slen[p] + w[i])</span><br><span class="line">                slen[v] = flen[v], flen[v] = slen[p] + w[i], son[v] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(slen[v] &lt; flen[p] + w[i] &amp;&amp; son[p] != v)</span><br><span class="line">                slen[v] = flen[p] + w[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(slen[v] &lt; slen[p] + w[i])</span><br><span class="line">                slen[v] = slen[p] + w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs2</span>(v, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        ll c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c), <span class="built_in">add</span>(b, a, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        c[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    f[<span class="number">1</span>] = g[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, f[i] - flen[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>P7619 [COCI2011-2012#2] RASPORED 题解</title>
    <url>/solutions/solution-p7619/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">RASPORED</div>
<div id="problem-info-from">COCI 2011-2012 #2</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDQ2NDM=">Luogu P4643</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzMxNzk=">BZOJ #3179</span></li></ul></div>

<hr>
<p>我们首先考虑没有修改的情况。</p>
<p>首先，我们假设已经给所有的居民分配好了一个烘焙披萨的方案，并用 $pos_i$ 代表第 $i$ 位居民的披萨是第 $pos_i$ 个烘焙的。</p>
<p>这样的话，我们设 $C_i$ 为从第 $i$ 名居民身上获取的小费数额（如果为负数则表示需要向该位居民支付的数额的相反数），那么就会有如下的式子：</p>
<p>$$<br>C_i &#x3D; L_i - \sum_{j&#x3D;1}^{pos_i} T_j<br>$$</p>
<p>那么对于 Mirko 收获小费的总和 $\sum_{i&#x3D;1}^n C_i$，我们可以推一下式子：</p>
<p>$$<br>\begin{aligned}<br>\sum_{i&#x3D;1}^n C_i &amp;&#x3D; \sum_{i&#x3D;1}^n (L_i - \sum_{j&#x3D;1}^{pos_i} T_j) \\<br>&amp;&#x3D; \sum_{i&#x3D;1}^n L_i - \sum_{i&#x3D;1}^n \sum_{j&#x3D;1}^{pos_i} T_j \\<br>&amp;&#x3D; \sum_{i&#x3D;1}^n L_i - \sum_{i&#x3D;1}^n T_i \times (n- pos_i + 1)<br>\end{aligned}<br>$$</p>
<p>最后一步是这样推出来的：</p>
<p>对于 $T_i$ 来说，它会在计算所有 $pos_j \geq pos_i$ 的 $j$ 的时候被计算到，所以总共就是 $\sum_{j&#x3D;pos_i}^n T_i$，即 $T_i \times (n-pos_i + 1)$。</p>
<hr>
<p>然后看带修改的。</p>
<p>我们看刚才推出来的式子，可以看出我们能够对于 $L$ 与 $T$ 分开考虑，而事实上我们也就是这样做的。</p>
<p>我们对于一开始没有被修改时的数据计算出一个 $suml &#x3D; \sum_{i&#x3D;1}^n L_i$，然后再计算出一个 $sumt &#x3D; \sum_{i&#x3D;1}^n T_i \times (n- pos_i + 1)$。<br>我们最终输出的数值就是 $suml-sumt$。</p>
<p>假设我们有了一个新的修改，将 $(L_x,T_x)$ 修改为 $(L_y,T_y)$。</p>
<p>对于 $suml$，其只需要变为 $suml-L_x+L_y$ 即可。</p>
<p>对于 $sumt$，我们可以看成首先从数列里面删除了一个 $T_x$，然后再插入了一个 $T_y$；其中 $T_x$ 删除前的位置是 $pos_x$，$T_y$ 删除后的位置是 $pos_y$。</p>
<p>我们可以将删除和插入分开讨论，也可以只讨论改变位置的元素。</p>
<p>如果分开讨论删除和插入的话，我们的分析过程是这个样子的：</p>
<ol>
<li>对于 $\forall T_i &lt; T_x$，我们的 $pos_i$ 不会变，但是 $n$ 会因删除而减小 $1$；而对于 $\forall T_i \geq T_x$，我们的 $pos_i$ 和 $n$ 都会减小 $1$ 而最终抵消；对于 $T_x$，我们需要减去它的贡献。</li>
</ol>
<p>所以我们的 $sumt$ 在删除 $T_x$ 之后会变成这个样子：<br>$$<br>sumt \to sumt - T_x \times (n - pos_x + 1) - \sum_{T_i &lt; T_x} T_i<br>$$</p>
<ol start="2">
<li>对于 $\forall T_i &lt; T_x$，我们的 $pos_i$ 不会变，但是 $n$ 会因插入而增大 $1$；而对于 $\forall T_i \geq T_x$，我们的 $pos_i$ 和 $n$ 都会增大 $1$ 而最终抵消；对于 $T_y$，我们需要加上它的贡献。</li>
</ol>
<p>所以我们的 $sumt$ 在插入 $T_y$ 之后会变成这个样子：<br>$$<br>sumt \to sumt + T_x \times (n - pos_y + 1) + \sum_{T_i &lt; T_x} T_i<br>$$</p>
<p>如果只讨论改变位置的元素的话，我们的分析过程是这个样子的：</p>
<ol>
<li><p>如果 $T_x &lt; T_y$，那么对于 ${T_i | pos_i \in (pos_x,pos_y)}$，其 $pos_i$ 会减少 $1$，从而导致 $sumt$ 减少 $\sum_{pos_i \in (pos_x,pos_y)} T_i$。</p>
</li>
<li><p>如果 $T_x &gt; T_y$，那么对于 ${T_i | pos_i \in (pos_y,pos_x)}$，其 $pos_i$ 会增加 $1$，从而导致 $sumt$ 增加 $\sum_{pos_i \in (pos_x,pos_y)} T_i$。</p>
</li>
</ol>
<p>总的来看，我们的变化量可以看做 $\sum_{T_i &lt; T_x} T_i - \sum_{T_i &lt; T_x} T_i$。</p>
<p>再加上 $T_y$ 的贡献，减去$T_x$ 的贡献，我们推出的式子跟上面的是一样的。</p>
<hr>
<p>于是我们就需要一种数据结构，支持</p>
<ol>
<li>插入和删除元素</li>
<li>查询小于一个元素的数字个数</li>
<li>查询小于一个元素的数字之和</li>
</ol>
<p>树状数组、权值线段树和平衡树均可。</p>
<p>我这里使用的是替罪羊树。</p>
<p>对于不知道替罪羊树的人，我在这里安利一下<a href="/OI/scapegoat-tree">我的博客</a>，同时也给出<span class="exturl" data-url="aHR0cHM6Ly9vaS13aWtpLm9yZy9kcy9zZ3Qv">OI-Wiki</span>关于替罪羊树的讲解。</p>
<p>替罪羊树虽然比较慢，但是所有的操作时间复杂度均摊之后都是 $O(\log n<br>)$ 级别的。</p>
<p>这里粘一下代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line">ll n, m;</span><br><span class="line"><span class="type">double</span> alpha = <span class="number">0.75</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Scapegoat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ls, rs;</span><br><span class="line">    ll w, wn;</span><br><span class="line">    <span class="type">int</span> s, sz, sd;</span><br><span class="line">    ll sum;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="type">int</span> cnt, rt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].s = tr[tr[p].ls].s + tr[tr[p].rs].s + <span class="number">1</span>;</span><br><span class="line">    tr[p].sz = tr[tr[p].ls].sz + tr[tr[p].rs].sz + tr[p].wn;</span><br><span class="line">    tr[p].sd = tr[tr[p].ls].sd + tr[tr[p].rs].sd + (tr[p].wn != <span class="number">0</span>);</span><br><span class="line">    tr[p].sum = tr[tr[p].ls].sum + tr[tr[p].rs].sum + tr[p].wn * tr[p].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">canrbu</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tr[p].wn &amp;&amp; (alpha * tr[p].s &lt;= ( <span class="type">double</span> )<span class="built_in">max</span>(tr[tr[p].ls].s, tr[tr[p].rs].s) ||</span><br><span class="line">    ( <span class="type">double</span> )tr[p].sd &lt;= alpha * tr[p].s);</span><br><span class="line">&#125;<span class="comment">//can rebuild</span></span><br><span class="line"><span class="type">int</span> ldr[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbuunf</span><span class="params">(<span class="type">int</span> &amp;ldc, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">rbuunf</span>(ldc, tr[p].ls);</span><br><span class="line">    <span class="keyword">if</span>(tr[p].wn)ldr[ldc++] = p;</span><br><span class="line">    <span class="built_in">rbuunf</span>(ldc, tr[p].rs);</span><br><span class="line">&#125;<span class="comment">//rebuild-unfold</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rbubld</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    tr[ldr[mid]].ls = <span class="built_in">rbubld</span>(l, mid);</span><br><span class="line">    tr[ldr[mid]].rs = <span class="built_in">rbubld</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">calc</span>(ldr[mid]);</span><br><span class="line">    <span class="keyword">return</span> ldr[mid];</span><br><span class="line">&#125;<span class="comment">//rebuild-build</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbuild</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ldc = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rbuunf</span>(ldc, p);</span><br><span class="line">    p = <span class="built_in">rbubld</span>(<span class="number">0</span>, ldc);</span><br><span class="line">&#125;<span class="comment">//rebuild</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;p, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)</span><br><span class="line">    &#123;</span><br><span class="line">        p = ++cnt;</span><br><span class="line">        <span class="keyword">if</span>(!rt)rt = <span class="number">1</span>;</span><br><span class="line">        tr[p].w = k;</span><br><span class="line">        tr[p].ls = tr[p].rs = <span class="number">0</span>;</span><br><span class="line">        tr[p].wn = tr[p].s = tr[p].sz = tr[p].sd = <span class="number">1</span>;</span><br><span class="line">        tr[p].sum = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[p].w == k)tr[p].wn++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].w &lt; k)<span class="built_in">insert</span>(tr[p].rs, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">insert</span>(tr[p].ls, k);</span><br><span class="line">        <span class="built_in">calc</span>(p);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">canrbu</span>(p))<span class="built_in">rbuild</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loschn</span><span class="params">(<span class="type">int</span> &amp;p, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].w == k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[p].wn)tr[p].wn--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[p].w &lt; k)<span class="built_in">loschn</span>(tr[p].rs, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">loschn</span>(tr[p].ls, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">calc</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">canrbu</span>(p))<span class="built_in">rbuild</span>(p);</span><br><span class="line">&#125;<span class="comment">//löschen，delete是关键字就不用了</span></span><br><span class="line"><span class="function">ll <span class="title">uprgtr</span><span class="params">(<span class="type">int</span> p, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].w == k &amp;&amp; tr[p].wn)</span><br><span class="line">        <span class="keyword">return</span> tr[tr[p].ls].sz;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].w &lt; k)</span><br><span class="line">        <span class="keyword">return</span> tr[tr[p].ls].sz + tr[p].wn + <span class="built_in">uprgtr</span>(tr[p].rs, k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">uprgtr</span>(tr[p].ls, k);</span><br><span class="line">&#125;<span class="comment">//相当于是使用greater&lt;&gt;函数排序之后的upper_bound</span></span><br><span class="line"><span class="comment">//输出的结果是小于某个元素的数的个数</span></span><br><span class="line"><span class="function">ll <span class="title">uprsum</span><span class="params">(<span class="type">int</span> p, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].w == k &amp;&amp; tr[p].wn)</span><br><span class="line">        <span class="keyword">return</span> tr[tr[p].ls].sum;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].w &lt; k)</span><br><span class="line">        <span class="keyword">return</span> tr[tr[p].ls].sum + tr[p].wn * tr[p].w + <span class="built_in">uprsum</span>(tr[p].rs, k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">uprsum</span>(tr[p].ls, k);</span><br><span class="line">&#125;<span class="comment">//跟上面差不多，输出的是小于某个元素的数之和</span></span><br><span class="line">ll suml, sumt;</span><br><span class="line">ll l[N], t[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="type">int</span> temp[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;l[i], &amp;t[i]);</span><br><span class="line">        suml += l[i];</span><br><span class="line">        <span class="built_in">insert</span>(rt, t[i]);</span><br><span class="line">        temp[i] = t[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(temp + <span class="number">1</span>, temp + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        sumt += (n - i + <span class="number">1</span>) * temp[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, suml - sumt);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        ll b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld%lld&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        suml -= l[a] - b;</span><br><span class="line">        l[a] = b;</span><br><span class="line">        ll sum1 = <span class="built_in">uprsum</span>(rt, t[a]), cnt1 = <span class="built_in">uprgtr</span>(rt, t[a]);</span><br><span class="line">        <span class="built_in">loschn</span>(rt, t[a]);</span><br><span class="line">        <span class="built_in">insert</span>(rt, c);</span><br><span class="line">        ll sum2 = <span class="built_in">uprsum</span>(rt, c), cnt2 = <span class="built_in">uprgtr</span>(rt, c);</span><br><span class="line">        sumt += c * (n - cnt2) + sum2 - t[a] * (n - cnt1) - sum1;</span><br><span class="line">        t[a] = c;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, suml - sumt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>P8021 [ONTAK2015] Bajtman i Okrągły Robin 题解</title>
    <url>/solutions/solution-p8021/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Bajtman i Okrągły Robin</div>
<div id="problem-info-from">ONTAK 2015</div>
<div id="problem-info-difficulty">省选/NOI-</div>
<div id="problem-info-color">#9d3dcf</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDgwMjE=">Luogu P8021</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzQyNzY=">BZOJ #4276</span></li></ul></div>

<hr>
<p>我们考虑这样想：</p>
<p>假如商店每个长度为 1 的时间段内只能够被抢劫一次，那么你就只需要站在商店门口盯着就可以了，而把问题抛给了强盗们去解决了——而强盗们的问题是，如何规划抢劫时间才能使被抢劫的财物价值总和最大。</p>
<p>对于这样的问题，我们可以想到带权二分图最大匹配，然后就转化成为了最大费用最大流问题。</p>
<p>我们将每一个强盗和每一个长度为 1 的时间段都设为一个点，然后让每一个强盗向其可以抢劫的时间段区间内的每一个时间段连一条容量为 1、费用为 $c_i$ 的边。<br>然后每一个强盗向源点连边，每一个时间段向汇点连边，这两次连边都是容量为 1、费用为 0。</p>
<p>然后我们会发现，这样连边的话边的数量是 $O(n^2)$ 级别的，无法达到我们的要求。</p>
<p>于是我们就引入了线段树优化建图这样一种节约边数的方式，使得边的数量减小为 $O(\log{n})$ 级别的。</p>
<p>线段树优化建图的大意就是将线段树的区间作为一个中转点，由其向其子节点连边，而不是直接连边。</p>
<p>我们建立线段树的时候，与正常情况下建立线段树的方式是一样的，只不过这里不需要维护任何信息，只需要将每一个叶子节点连向汇点，同时将一个节点与其左右子节点（如果有的话）连边即可。</p>
<p>这道题里因为每一个时间段只能够被抢劫一次（上面说了），所以代表其的点向汇点连的边容量为 1、费用为 0。</p>
<p>但是线段树中父亲节点向子节点连的边的容量就不能是 1 了，必须是 $+\infty$ 才能保证其覆盖的区间都可以被抢劫。</p>
<p>这里写的时候不是特别放心，在结构体里面存了一个节点编号，其实在线段树节点有序的情况下不需要存。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].l = l, tr[p].r = r;</span><br><span class="line">    tr[p].id = ++cnt;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add</span>(tr[p].id, T, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">add</span>(tr[p].id, tr[p &lt;&lt; <span class="number">1</span>].id, INF, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">add</span>(tr[p].id, tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].id, INF, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就是区间连边。</p>
<p>我们其实只需要向线段树区间加那样，向每一个最长的完全被覆盖的区间连一条容量为 1、费用为 $c_i$ 的边即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">seglnk</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add</span>(k + <span class="number">1</span>, tr[p].id, <span class="number">1</span>, -c[k]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)<span class="built_in">seglnk</span>(p &lt;&lt; <span class="number">1</span>, l, r, k);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)<span class="built_in">seglnk</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后注意一个小细节：线段树内的叶子结点代表的区间是 $[a,a]$，而这里要求的最小区间是 $[a,a+1]$，所以我们可以将右端点自减一来替代一下。</p>
<p>最后放总的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2000010</span>, M = <span class="number">2000010</span>, INF = <span class="number">1e8</span>;</span><br><span class="line"><span class="type">int</span> n, m, S, T;</span><br><span class="line"><span class="type">int</span> a[N], b[N], c[N];</span><br><span class="line"><span class="type">int</span> h[N], e[M], f[M], w[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> q[N], d[N], pre[N], incf[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, f[idx] = c, w[idx] = d, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">    e[idx] = a, f[idx] = <span class="number">0</span>, w[idx] = -d, ne[idx] = h[b], h[b] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].l = l, tr[p].r = r;</span><br><span class="line">    tr[p].id = ++cnt;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add</span>(tr[p].id, T, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">add</span>(tr[p].id, tr[p &lt;&lt; <span class="number">1</span>].id, INF, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">add</span>(tr[p].id, tr[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].id, INF, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">seglnk</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add</span>(k + <span class="number">1</span>, tr[p].id, <span class="number">1</span>, -c[k]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid)<span class="built_in">seglnk</span>(p &lt;&lt; <span class="number">1</span>, l, r, k);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid)<span class="built_in">seglnk</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    <span class="built_in">memset</span>(incf, <span class="number">0</span>, <span class="built_in">sizeof</span>(incf));</span><br><span class="line">    q[<span class="number">0</span>] = S, d[S] = <span class="number">0</span>, incf[S] = INF;</span><br><span class="line">    <span class="keyword">while</span>(hh != tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh++];</span><br><span class="line">        <span class="keyword">if</span>(hh == N) hh = <span class="number">0</span>;</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; ~i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ver = e[i];</span><br><span class="line">            <span class="keyword">if</span>(f[i] &amp;&amp; d[ver] &gt; d[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                d[ver] = d[t] + w[i];</span><br><span class="line">                pre[ver] = i;</span><br><span class="line">                incf[ver] = <span class="built_in">min</span>(f[i], incf[t]);</span><br><span class="line">                <span class="keyword">if</span>(!st[ver])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[tt++] = ver;</span><br><span class="line">                    <span class="keyword">if</span>(tt == N) tt = <span class="number">0</span>;</span><br><span class="line">                    st[ver] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> incf[T] &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EK</span><span class="params">(<span class="type">int</span> &amp;flow, <span class="type">int</span> &amp;cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flow = cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">spfa</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = incf[T];</span><br><span class="line">        flow += t, cost += t * d[T];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = T; i != S; i = e[pre[i] ^ <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            f[pre[i]] -= t;</span><br><span class="line">            f[pre[i] ^ <span class="number">1</span>] += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    S = <span class="number">0</span>, T = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> maxn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a[i], &amp;b[i], &amp;c[i]);</span><br><span class="line">        <span class="built_in">add</span>(S, i + <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        maxn = <span class="built_in">max</span>(maxn, b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = n + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, maxn + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">seglnk</span>(<span class="number">1</span>, a[i], b[i] - <span class="number">1</span>, i);</span><br><span class="line">    <span class="type">int</span> flow, cost;</span><br><span class="line">    <span class="built_in">EK</span>(flow, cost);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, -cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>网络流</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>P8161 [JOI 2022 Final] 自学（自習） 题解</title>
    <url>/solutions/solution-p8161/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name"><ruby>自学<rt>自習</rt></ruby></div>
<div id="problem-info-from">JOI 2022 Final</div>
<div id="problem-info-difficulty">普及/提高-</div>
<div id="problem-info-color">#ffc116</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDgxNjE=">Luogu P8161</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8zNjYz">LibreOJ L3663</span></li></ul></div>

<hr>
<p>首先我们可以确定，如果我们某一门课自学的效果比老师讲的效果都好的话就不需要去上课了，所以我们让 $a_i &#x3D; \max(a_i,b_i)$。</p>
<p>根据题目给定的数据范围，我们肯定不能用暴力。<br>我们需要一个至少 $O(n \log n)$ 的算法。</p>
<p>数据结构虽然能带一个 $\log$，但是我没有想到任何能够维护这个信息的数据结构。</p>
<p>那就只剩二分了。<br>我们来观察一下到底可不可以二分。</p>
<p>我们二分就只能二分答案了，也就是预期的最低熟练度。<br>而我们能够发现，一旦我们一个预期熟练度 $k$ 能够被满足，那么 $\leq k$ 的所有预期熟练度都可以被满足，这就为我们的二分提供了保障。</p>
<p>那么我们怎么判断一个 $k$ 能否被满足呢？</p>
<p>我们考虑这样一个思路：</p>
<p>我们遍历每一门课程，记录一下这门课的空余时间 $t_i$。$t_i$ 为正时表示该门课可以空出来的时间为 $t_i$ 节课，而为负时表示该门课需要的额外的时间为 $-t_i$ 节课。</p>
<ul>
<li>如果 $ma_i \geq k$，那就意味着这门课不需要听满 $m$ 节，只需要听 $\lceil \dfrac{k}{a_i} \rceil$ 节即可，这给我们留出了 $m - \lceil \dfrac{k}{a_i} \rceil$ 节课的空余时间。令 $t_i &#x3D; m - \lceil \dfrac{k}{a_i} \rceil$。</li>
<li>如果 $ma_i &lt; k$，那么我们就需要用额外的时间来补这门课，所需的额外时间为 $\lceil \dfrac{k - ma_i}{b_i} \rceil$。令 $t_i &#x3D; -\lceil \dfrac{k - ma_i}{b_i} \rceil$。</li>
</ul>
<p>最后将所有的 $t_i$ 加起来，看总和是否为负数。如果为负，那就意味着我们需要花比我们所拥有的时间更多的时间来学习，而这是不可能的，代表着当前最小值不能达成。</p>
<hr>
<p>一个小细节：不开<code>long long</code>会炸。<br>同时判断函数中间可能会出现爆<code>long long</code>的情况，并且二分区间右端点必须为 $10^{18}$ 及以上（$m \leq 10^9,a_i \leq 10^9$），请大家酌情考虑使用<code>__int128</code>。</p>
<p>示例代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>;</span><br><span class="line">ll n, m;</span><br><span class="line">ll a[N], b[N];</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//不需要double的ceil</span></span><br><span class="line">    <span class="keyword">if</span> (a % b == <span class="number">0</span>)<span class="keyword">return</span> a / b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a / b + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chq</span><span class="params">(ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int128 tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m * a[i] &gt;= k)tot += m - <span class="built_in">calc</span>(k, a[i]);</span><br><span class="line">        <span class="keyword">else</span> tot -= <span class="built_in">calc</span>((k - m * a[i]), b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tot &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;b[i]);</span><br><span class="line">        a[i] = <span class="built_in">max</span>(a[i], b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ll l = <span class="number">1</span>, r = <span class="number">1e18</span>;</span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">chq</span>(mid))l = mid + <span class="number">1</span>, ans = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>贪心</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>P8025 [ONTAK2015] Związek Harcerstwa Bajtockiego 题解</title>
    <url>/solutions/solution-p8025/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">Związek Harcerstwa Bajtockiego</div>
<div id="problem-info-from">ONTAK2015</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDgwMjU=">Luogu P8025</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYXJrYnpvai5jYy9wcm9ibGVtLzQyODE=">BZOJ #4281</span></li></ul></div>

<hr>
<p>这道题的题意已经很简洁了，我们就不需要解释了。</p>
<p>对于每一次操作，我们可以分为两种情况：能到达与不能到达。</p>
<p>能到达的直接跳到对应的点即可，不能到达的就直接模拟直接跳就可以了。</p>
<p>因为数据范围是 $10^6$ 级别的，我们尝试优化复杂度。</p>
<p>首先我们可以使用树剖来求出来两个节点的LCA，这样我们就可以快速判断两者之间的距离。</p>
<p>对于跳不到的情况我们还可以继续往下分为三种情况：跳不到LCA，刚好跳到LCA和跳过了LCA。</p>
<p>对于第一种情况，我们直接跳重链直到跳不动重链为止，然后利用重链上DFS序连续的性质直接输出结束节点编号；<br>对于第二种情况直接输出LCA；<br>对于第三种情况，我们从目标节点开始向上跳 $dis(x,y)-t$ 步即可，而具体的实现与第一种情况无异。</p>
<p>至此，我们就完美解决了所有问题。</p>
<p>总复杂度为 $O(n \log n)$。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dep[N], fa[N], sz[N], son[N];</span><br><span class="line"><span class="type">int</span> id[N], nw[N], top[N], cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> father, <span class="type">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[p] = depth, fa[p] = father, sz[p] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (j == father)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(j, p, depth + <span class="number">1</span>);</span><br><span class="line">        sz[p] += sz[j];</span><br><span class="line">        <span class="keyword">if</span> (sz[j] &gt; sz[son[p]])son[p] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[p] = ++cnt, nw[cnt] = p, top[p] = t;</span><br><span class="line">    <span class="keyword">if</span> (!son[p])<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(son[p], t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[p]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (j == fa[p] || j == son[p])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(j, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (top[p] != top[q])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[p]] &lt; dep[top[q]])<span class="built_in">swap</span>(p, q);</span><br><span class="line">        p = fa[top[p]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[p] &lt; dep[q])<span class="built_in">swap</span>(p, q);</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (dep[p] - dep[top[p]] + <span class="number">1</span> &lt;= k)</span><br><span class="line">    &#123;<span class="comment">//当可以跳完整条重链</span></span><br><span class="line">        k -= dep[p] - dep[top[p]] + <span class="number">1</span>;</span><br><span class="line">        p = fa[top[p]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nw[id[p] - k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="type">int</span> u;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;u, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v, step;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;v, &amp;step);</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">lca</span>(u, v);</span><br><span class="line">        <span class="type">int</span> dis1 = dep[u] - dep[x], dis2 = dep[v] - dep[x];</span><br><span class="line">        <span class="keyword">if</span> (step &gt;= dis1 + dis2)</span><br><span class="line">        &#123;<span class="comment">//能跳到</span></span><br><span class="line">            u = v;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (step == dis1)</span><br><span class="line">        &#123;<span class="comment">//只能跳到LCA</span></span><br><span class="line">            u = x;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (step &lt; dis1)</span><br><span class="line">        &#123;<span class="comment">//连LCA都跳不到</span></span><br><span class="line">            u = <span class="built_in">jump</span>(u, step);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;<span class="comment">//能跳过LCA</span></span><br><span class="line">            u = <span class="built_in">jump</span>(v, dis2 - (step - dis1));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>树链剖分</tag>
        <tag>最近公共祖先</tag>
      </tags>
  </entry>
  <entry>
    <title>P8162 [JOI 2022 Final] 选举 题解</title>
    <url>/solutions/solution-p8162/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name"><ruby>选举<rt>選挙で勝とう</rt></ruby></div>
<div id="problem-info-from">JOI 2022 Final</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDgxNjI=">Luogu P8162</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8zNjY0">LibreOJ L3664</span></li></ul></div>

<hr>
<p>我们首先可以得出一些结论。</p>
<p>首先，我们不会浪费时间。因为演讲时间可以是浮点数，不需要考虑取整的问题，所以如果我们只需要选票的话，我们只会在这个州演讲 $A_i$ 的时间，不会多也不会少。</p>
<p>其次，我们可以将存在多个人同时在不同州演讲的情况转化为只有多个人同时在同一个州演讲的情况。所以我们只需要考虑当前人数和在哪个州演讲就可以了。</p>
<p>然后，我们可以确定我们的演讲顺序。对于一个已经确定了的计划（即每一个州的演讲时间已经确定），我们肯定首先在所有能拿到协作者的州演讲完拿到协作者之后再去其他州演讲。</p>
<p>最后，我们可以将所有的州分为三类，分别是“协作州”、“支持州”和“反对州”。“协作州”指拿到了选票和协作者的州，“支持州”指只拿到了选票的州，而“反对州”指什么也没有拿到的州。<br>如果我们对所有的州按照 $B_i$ 为第一关键字，$A_i$ 为第二关键字来排序的话，我们可以发现，在最后一个“协作州”之前一定没有“反对州”。如果有的话，我们可以将两者调换一下位置，这样结果也不会变劣。</p>
<p>于是我们就可以想到一个DP，$f_{i,j,k}$ 代表前 $i$ 个州中有 $j$ 个“协作州”，$k$ 个“支持州”的最小时间。<br>同时根据上面的性质，我们可以忽略支持州，只枚举协作州，将 $O(n^3)$ 的DP优化到 $O(n^2)$。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">State</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> State &amp;x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (~b &amp;&amp; ~x.b) ? b &lt; x.b : b&gt;x.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[N];</span><br><span class="line"><span class="type">double</span> f[N][N];</span><br><span class="line"><span class="type">int</span> tmp[N];</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)tmp[i] = p[i].a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">            f[i][j] = <span class="number">1e9</span>;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//没有进行过任意一次演讲，耗时为 0</span></span><br><span class="line">    <span class="type">double</span> res = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="built_in">min</span>(x, i); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j] + ((<span class="type">double</span>)p[i].a / (x + <span class="number">1</span>));<span class="comment">//不需要招协作者，就等到最后再演讲</span></span><br><span class="line">            <span class="keyword">if</span>(j &gt;= <span class="number">1</span> &amp;&amp; p[i].b != <span class="number">-1</span>)f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>] + ((<span class="type">double</span>)p[i].b / j));<span class="comment">//需要招协作者，就立刻开始演讲罢</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = k; i &lt;= n; i++)</span><br><span class="line">        res = <span class="built_in">min</span>(res, f[i][x]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= x; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(tmp + i + <span class="number">1</span>, tmp + n + <span class="number">1</span>);</span><br><span class="line">        <span class="type">double</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k - i; j++)val += tmp[i + j];</span><br><span class="line">        res = <span class="built_in">min</span>(res, f[i][x] + ((<span class="type">double</span>)val / (x + <span class="number">1</span>)));<span class="comment">//加上只要选票的耗时</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;p[i].a, &amp;p[i].b);</span><br><span class="line">    <span class="built_in">sort</span>(p + <span class="number">1</span>, p + <span class="number">1</span> + n);</span><br><span class="line">    <span class="type">double</span> ans = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; i++)<span class="comment">//枚举招募协作者的数量</span></span><br><span class="line">        ans = <span class="built_in">min</span>(ans, <span class="built_in">get</span>(i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.15lf\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P8251 [NOI Online 2022 提高组] 丹钓战 题解</title>
    <url>/solutions/solution-p8251/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">丹钓战</div>
<div id="problem-info-from">NOI Online-S 2022</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDgyNTE=">Luogu P8251</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvNDM5My8=">AcWing 4390</span></li></ul></div>

<hr>
<p>看到题目，我们就知道这个题应该跟单调栈有关。</p>
<p>我们考虑每一次将一个二元组压入栈的时候，会弹出所有挡在其前面的二元组，直到碰到一个同时满足 $a_i \neq a_j$ 且 $b_i &lt; b_j$ 的元素才会停下。</p>
<p>然后我们对于某个区间进行考虑。</p>
<p>题目是要求我们对每一个区间开一个单调栈的。<br>但是这样的话，时间复杂度绝对会超标。</p>
<p>所以我们考虑如何将其减小其时间复杂度。</p>
<p>考虑在当前区间左端点 $l$ 之前的二元组。<br>如果 $l$ 可以弹出这些二元组，那么后面一定是不用考虑的，毕竟后面再压入的时候，这些元素也是一定没有的，就不会对后面的元素产生影响。<br>如果 $l$ 不能弹出这些二元组，那么后面也是不用考虑的，毕竟当前区间内没有这个元素，也就不会对后面的元素产生影响了。</p>
<p>那么我们就考虑记录一下，对于每一个二元组，在其被压入单调栈之前所遇到的第一个不能将其弹出的二元组的下标。<br>我们可以将其存储在一个数组里面，考虑将其命名为 $idx[]$。<br>那么，我们对于每一个区间，只需要看一下在这个区间内有多少个元素的 $idx[i] &lt; l$就可以得出答案了。</p>
<p>这样就可以将整道题目分为两个部分：处理数据与回答询问。<br>其中处理数据的时间复杂度与单调栈类似，是 $O(n)$ 的。</p>
<p>但是，我们在回答询问的时候，时间复杂度是 $O(n^2)$ 的。<br>这样会大大影响我们的总用时。<br>（实测35秒左右）</p>
<p>然后我们可以考虑给他加一个 $\log$，比如使用一些数据结构什么的，这样就可以过掉这么大的数据。</p>
<p>于是我们就写了一个树状数组。<br>然后我们就可以将所有的询问离线下来，按照 $l$ 来分组解决了。</p>
<p>我们一开始在预处理完所有的 $idx[]$ 之后，就可以用一个桶来记录所有信息。<br>每一次我们扫到一个不同的 $l$ 的时候，将 $idx[i] &lt; l$ 的所有二元组的编号扔进树状数组里面。<br>处理询问的时候直接在树状数组上面求区间和即可。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> idx[N], tt;</span><br><span class="line"><span class="type">int</span> t[N];</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; tong[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; qus[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, idx;</span><br><span class="line">&#125;sta[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">nod1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        t[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        ans += t[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">    sta[<span class="number">0</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (((sta[tt].a == a[i]) || (sta[tt].b &lt;= b[i])) &amp;&amp; (tt &gt; <span class="number">0</span>))</span><br><span class="line">            tt--;</span><br><span class="line">        idx[i] = sta[tt].idx;</span><br><span class="line">        sta[++tt] = &#123; a[i], b[i], i &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        tong[idx[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;q[i].l, &amp;q[i].r);</span><br><span class="line">        qus[q[i].l].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; tong[i - <span class="number">1</span>].<span class="built_in">size</span>(); k++)</span><br><span class="line">            <span class="built_in">add</span>(tong[i - <span class="number">1</span>][k]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> now : qus[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l = q[now].l, r = q[now].r;</span><br><span class="line">            ans[now] = <span class="built_in">sum</span>(r) - <span class="built_in">sum</span>(l - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        cout &lt;&lt; ans[i] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>树状数组</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>P8255 [NOI Online 2022 入门组] 数学游戏 题解</title>
    <url>/solutions/solution-p8255/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">数学游戏</div>
<div id="problem-info-from">NOI Online-J 2022</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDgyNTU=">Luogu P8255</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvNDM5MS8=">AcWing 4388</span></li></ul></div>

<hr>
<p>题目大意就是，我们给定了 $z$ 和 $x$，我们需要找到一个对应的 $y$，使得 $z &#x3D; x \times y \times \gcd(x,y)$。</p>
<p>当然，我们不一定保证给出的 $z$ 是有解的，所以我们需要快速判定出无解的情况。</p>
<p>我们观察一下 $z$ 的组成。<br>首先 $z$ 必须被 $x$ 整除。这个非常显而易见。<br>然后 $z$ 必须不为 $0$。这个也很显而易见。<br>这是目前仅靠观察能看出来的无解的情况。</p>
<p>然后我们考虑将 $z$ 分解掉。</p>
<p>设 $\gcd(x,y)&#x3D;g$。<br>因为 $\gcd(x,y)$ 肯定能够整除 $x$ 和 $y$，这样我们就可以将 $x$ 和 $y$ 分解为</p>
<p>$$<br>\begin{cases}<br>x &#x3D; x_1 \times g \\<br>y &#x3D; y_1 \times g<br>\end{cases}<br>$$</p>
<p>这样我们的 $z$ 就可以分解为 $z &#x3D; x_1 \times y_1 \times g^3$。</p>
<p>我们将 $z$ 除以一个 $x$，得到的就是 $y_1 \times g^2$。</p>
<p>这里有一个 $g^2$，如果我们可以通过 $\sqrt{\dfrac{z}{x}}$ 来得到 $g$ 就好了。<br>可惜并不能，因为 $\sqrt{y_1}$ 并不能忽略不计。</p>
<p>我们考虑怎么把 $g^2$ 给单独拎出来。<br>我们在别的地方尝试找出来一个 $g$……</p>
<p>$z$ 里面显然是不能再找了，我们只能找 $x$。<br>想一想，$x^2$ 可以分解为 $x_1^2 \times g^2$。<br>我们如果可以通过 $\gcd(x_1^2 \times g^2,y_1 \times g^2)$ 来得到 $g^2$ 就好了。</p>
<p>实际上还真的可以。</p>
<p>因为我们将 $x$ 和 $y$ 分解的时候，我们找到的 $x_1$ 和 $y_1$ 实际上已经是互质的了。<br>我们求gcd的时候，无法再从 $x_1^2$ 和 $y_1$ 中得到新的公因数了。</p>
<p>所以我们对 $x^2$ 和 $\dfrac{z}{x}$ 求一手gcd就可以得到 $g^2$ 了。</p>
<p>这时候我们并不一定得到了 $g^2$，可能与原来的数据有所偏差。<br>我们给 $g^2$ 开一个根，看 $(\lfloor \sqrt{g^2} \rfloor)^2$ 是否等于 $g^2$。<br>如果不等，那就说明不存在一个整数范围内的 $g$，但是 $g$ 却一定在整数范围内，那就一定无解。<br>否则就继续算下去就可以了。毕竟我们只关心有没有解。</p>
<p>最后我们的 $y$ 就是 $\dfrac{z}{x \times g}$ 了。<br>输出答案即可。</p>
<p>参考代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll x, z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;z);</span><br><span class="line">        <span class="keyword">if</span>(z % x != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(z == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll yg = z / x;</span><br><span class="line">        ll gg = <span class="built_in">gcd</span>(x * x, yg);</span><br><span class="line">        ll g = <span class="built_in">sqrt</span>(gg);</span><br><span class="line">        <span class="keyword">if</span>(gg != g * g)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, yg / g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>数学（题目）</tag>
      </tags>
  </entry>
  <entry>
    <title>P8365 [LNOI2022] 吃 题解</title>
    <url>/solutions/solution-p8365/</url>
    <content><![CDATA[<br>
<span id="more"></span>
<div id="problem-card-vis">true</div>
<div id="problem-info-name">吃</div>
<div id="problem-info-from">LNOI 2022</div>
<div id="problem-info-difficulty">提高+ /省选-</div>
<div id="problem-info-color">#3498db</div>
<div id="problem-info-submit"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDgzNjU=">Luogu P8365</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sb2ouYWMvcC8zNzM3">LibreOJ L3737</span></li></ul></div>

<hr>
<p>一道很有趣的贪心题目。</p>
<p>首先我们可以确定，我们一定是先做加法再做乘法，这样才可以使得数最大。</p>
<p>我们考虑将食物按照 $a_i$ 的大小分为两类：</p>
<ul>
<li>一类是 $a_i &#x3D; 1$ 的，这种食物只能利用它的 $b$，在一开始就全部加到初始体重上面，我们记这个处理好的值为 $B$。</li>
<li>另一类是 $a_i \geq 2$ 的。这种食物里面最多用一个 $b$。因为如果两个食物 $(a_i,b_i)$ 和 $(a_j,b_j)$，我们都用了其 $b$ 属性，且 $b_i \geq b_j$，那么还不如只用 $b_i$，然后用 $a_j$，这样的得数 $(B+b_i)a_j$ 比两者都用 $b$ 的得数 $B+b_i+b_j$ 更优。</li>
</ul>
<p>设第二类食物的 $\prod a_i &#x3D; A$，那么我们一个 $b$ 都不选的结果就是 $AB$。<br>如果我们选择一个 $b$，那么其价值就会变为 $\frac{B+b_i}{a_i}A$。<br>我们枚举找到这个最大的 $\frac{B+b_i}{a_i}$ 即可。<br>当然，如果我们枚举到的所有食物都会让这个 $\frac{B+b_i}{a_i} &lt; B$，那我们还不如不选，此时 $b_i &#x3D; 0,a_i &#x3D; 1$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll a[N], b[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;b[i]);</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">1</span>)ans = (ans + b[i]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> maxn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> ((ans + b[i]) * a[maxn] &gt; (ans + b[maxn]) * a[i])</span><br><span class="line">            maxn = i;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = (ans + b[maxn]) % mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == maxn)<span class="keyword">continue</span>;</span><br><span class="line">        ans = (ans * a[i]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>S2OJ #1497. 树 题解</title>
    <url>/solutions/solution-se1497/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这个密码好像不太正确呢……" data-whm="这篇文章的哈希貌似出现了一点问题，但是您仍然可以看到解密之后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="d7d756219a6f2d767918b6d9f095a0c6492353f7bba40902f21d8a990098878a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请输入密码……">请输入密码……</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>STL</tag>
        <tag>S2OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>S2OJ #1498. 换乘 题解</title>
    <url>/solutions/solution-se1498/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这个密码好像不太正确呢……" data-whm="这篇文章的哈希貌似出现了一点问题，但是您仍然可以看到解密之后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="d354ebfe1c84f6ccc5c3403fc89b32b5b0b026d2010573ebf1e01969084d6481">846fc3a3ee57a245244eaa85fa49dd1da41f6e901a130e90d83124e36107492c437fc9af3ec66c841f5866ba5a5f52bb5c076c5a17213ebe31bb838773f9d55483c602dd8b83a27ac04b6942429a0b924519f8b8392c690af8a6ec0b9ed1125d5ce6806cfe45f0859056a222b676d9b75a1834021e4a4d774da91d02aab0c335832bcfe6cafb0d568d3c8f148af0fac01be9aa0d5d559250e80a4de9f304526407bcbc0ba4b8c41fbf46c163784e30eb22f2a1f6662712425f5bab56e313ac158f9e3d5d9304c73443c3019c8fceed752a7ab9d9830950d7d6276dd8711ffc9c5830033cb812b9dfea08eb646d8172f6a855d209a8a06f69330fffc91b6605bc90fe317a333687d8d50f417ccca9ce52c4a08d846363941adf0176e3cbe49a63e613f429c1477d98553cb84fc3d019226f47e797709f13d6f3b526189fb78149861ab5755d372cd77a480ef65c554fbe8da9bb70dd115e96beec1c92dc90a080667139d1a40055b8d2687a1d09d45610cb12938ef22d2219f4ed1fa201772b7f2592654fe508b075481f707f139c5c02b8a976b714fa42c943b5d1b6b8a036bec7f2d0edd77800e2047f53e3cad141e410639a90f1801c476cd9a6b979621cf4fdfa36ee1ce9d8f38ce6bf4f8795c33a24761a2c85a42195fb7a118d115c12ed3009478c2325a1106d008b23a6910258036b4310ca9c92e252084fbf01cc27769787b1470e42d865adec490d91f567a078772ed3687ecefa3b1c259c67644444a46d6a3f5e949ee17ee825e187894d38157d9f77531d379a652ff0ed15a5d47c152bdd58a47b6817ae071b2964223b6821f3021ae87eb1831e2d602f80b8aebe6d6fe2205346b63743450a1556d21db4e7ef61ed3846059b02f89a22215674dde50673e36b6c1e39516ae1cea1907d803d370e5affbf66c5efb2e2413341741b95ef69bdbacec1e780deca5c37d33c7f987ffca8417f0da2402f12ab1e127ebea26dce8c4d0e43060667076bd6cf76e37a45fb652afe496a5e7248a2310fc0cfa0913f24346234b966dabbee551fc6a81fd0939c157e919d0a4b7ff4092d1d5815a9ae82ac4043a2155b2f207f167b431a7dd19912d6fe5d367f1e103a173e386efbc82c205a4c82608fb3faf3f6714f9e350f36d7475500b3a6fb5f421a05d72aa946574073bc4c3b557d1859d279c838cf5b401057c43445a85ca88b63cccc50157bded14157f7d210aa467abfb74492fb7750980c76642be9a2bd402c4eeda162139f2da63e531cdaafebab023b9810150bab00955a2cfed67ecb866ae9b5438c116130dd9b60fccbff60952bc6fb95e0233e397e7ae69d3647df9ca4fc0397f818f1c62cb4673d47f0d9751b0deb069188d297e4834a6cb87da687cd7c42747e26676b63c98d4201085182ab8aeb3e8d723ab4fd7112fc4f59ff4834b8abb76930a799c2a780e314094a0a348ae77cb759042c0fafe8ba2fb5e144bfdbc5b5accc51e5edbbec075f342d15d6a8eeb63fe649797beea6ae3fd2338799fded3abbb22e242401c674e4a0b656fbce423c9cbc95260c60cdafae6e8782c65a093cbb9f4f3f80f17a1ecbb9de9d2e222fee9a9379af04410e86c3ed520c9465d2012afd2c29d9ae5ad3e7736720396eb80856080dd69aedbe6514945b5a5af6ae9430153939ee35f11ce66c4ed7cc8ecaa50d75a4ed843969061cc4e94e30b807a0f73ad8947dc18cbd7f9b9c4d5fdbbfc1cf180de63b91607e3a9e4f25472fb4bb4938cc5dfb27d088ec2413fce7189123e099d67b0c840d438ed9a470aa4950868e69ae6294aa5087c31f583a291405b2e80c385c3fc54e3e5cdaa8b10b3950e59f29c8cf9f0f68328884a212b11135a0b919d5d62bdcedd8fea7dd110678d7972cc46f91721459b2a5abe4324ec1d579e10eadd503da2e257d34cc49fdcddfdd6b0def2bf50740b22f22f5ddd301a8a04fb83253af7df4a17676a057d20ad57e98a0a19dfe86fd5c2ac83712dd769ec86e60b4057bb4ba3c907b24f5f4bd5f8cecc3621dd5aa158ee6226ab93da3ccc4b365ccd67f8027ddeb0aa87be04812a1e0c74122ad78bfc6f0fc51cdefa7764ea98016d8453dbec776928fcc959018742ddfbcff3c81e76641591321aa32ea082115da5a9734e5fbbda592393e415742e86f4c90fb512cba7bdcf4fc5e2be02a5127fe12abb253fafeff99a0727f4507d143e308d10fbf9a00d5dd01381f4365a68cfd46dedc1b440a5e645c439a12cd59765d6692abe4e8236f263a66dcad5a287b62292c036a3bb6b8248055673fc1245ee11e1bd013d86221028c1ff44dc64646a4908e8c37ea0db35d530e3d2e8894de36d6c756220047746171e9ff714b094cda0b47cb5126f17b3331a2d5f6334d5d782cc5429714d0db716dbb68d53cdd47a36b6196ea191c70bdb2dcfe8746167613f8ab9a2346f71e768e29ddffb7e03fb1db1a24013dbc4a6dcf07997ce341009b1f531fd17eee98433570da3a16cbee2eb05abd75127e824f5988ac215e7d0dce879b61bfa8df3847e1aba9f1b23e28036873f5fd4855f56e46babf7bda66f3af2370c5584ee5ed8f5067812e3c58a3d9dd651e525b1f35aa64fa6a31bf8b75dff605d6b0daea256351145f680d9885aadfd12c2808b5dcd387d1eeb3b505269e01d40c6e93f4f553d1e5aa15ca26876bd849d0170fa154b61abf46e32526d7d69e564edc4d05b551797bca10f605002df9ed66e5c87836274c6e6e904ae3e4ee8554b0e4b6e359e1513caddde14e95c8343143b74334230ccc84daa57b6113720f464938540055f9719fc9c54e8889aca1d51dabc28d387c9ea7ef155439ff9e1765a5ec0ef1e8759f5ed3c2f26d46181ab7f4bf0366775e610bcc0faa1dd5ca62688f417e4c19c4d59663295500644ad726ab1ed2fc77651c9af358a8b4d2ab93dceb1e3c34a0851ddb4a16087f362620c6d5f754813fe1ea5d4a3ac8a16150c9ae2fe4cd9b7f1410a0bb25e029876329815f144ea49fae404b23c635fd2ba84abec75b462a56e0bb36c21317fadfe18ae117b2c7cfcedfaed73ae04cd34c7dd68161813768b7bc62b158c244951f1974cf6d52349dbc8984ffe6d523d28a41e91d5fdc235f5643ca6871220e554efec652a8a4060fcd1b7f0cbf3cb7002a82cf4e39182b1909e2786cf5dfe0fa20e6632415b535f7aa42815a65a199811bbce954a566204140b393cabfdfe1843ba2e59cb9323fad565218520e36c982870a1a686153e7cf8285b95026ba712f317623e608bd3fc6366eab636bcbe6020111f26a6f56b0b2aa1b63549ef53a3a1d6fc89cd98edd81409bf1dfab55ef6757f7f2912610484656fc0724a53ce59065caa5a8ec80c0c6200853a5dd2a290d44cfffccc217fd2a340abdfc316eb456ae658247113959d80f0e89ee2db00c2654fa3f48b87e6e2c97f310321f11f27535b43bc67e5cbd74c5477b8560b3790244167d18c767224371ee606cde8e577d198ffe3136c34ee74bc46649a5fbae99b95f53fe708254ab12753a5d10c1fb1c27061d41caed79941577e09ad0f0af196eaa821229f11d872cfca5421f96a58608c2a5711a39d3d5bbf90a9ae11f537ee2c58325f6c5aabcf7bd441f85720966473a6c83a41caa188a21c329bcdfce6011e64e719aab63189f83a52f13a150aedbb7e1a0c396b007106b539018dce04c831c1f0dbd994eeaba462990936da4144deeba54f86b23c0ee6007dfb8b59b9a6d8d09345e8ff7ee20535a408938cb8f4c5d397caf925cb952d2358c9dcdba2f1e102c807780ccd6f3bb434f322b0f0434b0463092ba6d37274a2d1718b4f689fbcce5fffb100d5c6f21a5463f5a30da2985fdf04d012a73b60e576370377c41b4aa2cfcc146f0b068dab5ea7cebfbda0a9fc8d534394b3c37c5d0cc8c56b1f1bdf2ea99bff1ac4f36282f522e4739fbfd977865ccd2ddd0e510f7f2f58d71ff17fe29a15efd44429e57c01960e682e69a919a3e6bb8e7e78d1a325f1bccab32084ee69a2eb500796d88f5fbc926b3ece4b8fe7bb5200fc082722571b52dcc43613e32b0fc7b667a8d37aa5de2beaa4209b2ea7102ee9dd22589deb4e183e77dd675b4de58eecde13dd0aaff465ce1a2ef9f2dbc31f5322cbce2448a5cd93de56643e36d2020499fccc0e471c54b4b653b1d555e91aa1a52b35445ff7b6179b7ad1192b299359f0f187648c44cd071de0e37faa4b15f7c49baf678608a3d9db2feba80b1d29aac75f711f5f65f4da3dafd8d6d3aa9914d02e58ce4e91ff5e680cdf20c42c8dc18ee6ae9739b1e9bd23781b161dea8205ac2f9551ce8a078370de60865fb21508c8bd3dbf0b27088369ff815d3b8174eb2b885e3c8959627c89877fea51ec133f00a291770f729f04de88eae9b3111a74abe697ac907ce4dfcf372f380d72da1ea7731924b8442f4919d92ec6b200376a8b2ecc4b4b8785a8d479e6930af4d8886254d38993f9bac87c07f2042782d9ae645ddc8ab12ddfea35e974dbed345ce532cdab1e7ab48873d0a02525afb5915c90815d7b3906b7ee003ee8e60b34e54b6e17c436f10b677c0745c6ee3f88a9044ff8d1974cde2799a8fe9a313240f1f608f4405df1bdabca09b65e75ae841c57bc2077109986420c394ab1228c06a67fa6211fdbc1226f8252d9ea7c0f84507cc10ae4d8bb58a92dfa3913c806eef330c7e6cf0a181c6194effff9c14f5b0ec0a4c73cab9e03dde460134a010618b83f4d0a0d39b9cde98fba7e604fb6cc3d5aea6025a32619b4937f3d597a692bbc7f2a559191eda8957f869e20542646553e83bbfd8aba867fba3ed4c07b0fe36362d868507158fe74c0ac6913f2c21aec6cfb9923cc5ceec638bab788005b122eed71617cca1fc93eece02ee2ec7bc388c10e7efef2209326bd812a5db880fe742686708009f40a3dde3d87a2e978ff267c6767253d5ddf8a4742ef2ed3e37b7b74c6f4892f3c680192f091e119ac626297d4b7d60412dceeb4da4bd40623e063cc23e69759974f33ff6a398c73cd2333978dfa261b1800a28a13a8ab96595886cc91fb4f61c814097f7b4a796205a9b69f507c88063bbf69faf958e6235ad09914b2fc1ab3978e0faf8f91555701f71915c1aefd9c452c7920b6063befb657267dfdb29747a8616d20fa49b1d96ce959abd4188f202d607b1eed68eddfebbf9f0b860be8c24634d2aeb7c69e45b9edb71b7f40e89a79e7b526e8bf1e956134b5a410423cec290fa0589053fc7db63332286d2ee7afb69e14b17b3fae53698e857313c4812978093d7fc8e02e077ca0410545175bd088e65e1d0088377a29cd2a1d7fcd00d8496ca2b2d5ceb022fd1febaa796bb57ab9c6da8288455c3b80f10d5c14a9c8787199af5d79b650128ebd3429cd8338f140f45b39b7dfd82a748d2c8f9c811bd354f4381f4d0874f2704d860d6aff66b58dbd0f22bcb1722106d81f9fa5b8db71e8b1ef31d1fb36e75c5be8700f9d8df2251e7c8e3cb87421f521838a63b0c968e7fbb82a81157002cee777d51a5d4ae8a3883bb484934a91906999b62197720de55d27c293ada8ba82f3d6676ab3c4907bbae74556709b08283a01687501c369bd3008742fe0bb602fc6c2b47b125181265e399f898dce10958b8eb2335d3c4a15267d56ea8f3d3f4ed3d788694c163b84cf5d751f04acfac91e125da43acb31b951505005a1d1a1ff9b6628a4b1ee4ead86058af3d645888659b14907846f3f25ae99c46cbaccb082d5053e9267af157a27647ef3776f06212e84c6b0bfa52d63133da65a32037eed570193927fabba478cf5601b3a81fb06da0465d3ad6baa2f904b41d42446675a0b0e132a3ed3a304c82b200e2e3977f2f99af01b07855e9e3676abe2efd2201264bbf6e233494c3a7d805fcfacfc6d583649da39fff0f0348b3ba1e4516c215e253cc4872b72290b0535ef030c522aca60279b85f8c0db38f40cd24cc1655345c2f72ad1f14a90fd566f77c54707867a905f33f07eada68d05d623afa8c8da5d1a78ae996c9b89b25522aeda770c5aa2e09ff19beb5503ed077913aa82630d4f09c87f6e0ccc2a5212576b26bc9d4f40d6eb29cf5d72908b7e44c4cdd6c5ae6968bf550237451700c0920f3255b5024a820b4976bc24394689ba649ab75b2a7a4b92f496291ddabdf9f5f4c4fd94532d62c0106f28d29cb69b700656dd7853119f65e2bb7ba7747e5b1e1cfe9ebccb9f9648d4b49958ed2add9d82ae5c4918b25429c99ddd8ebd4522df837be820c0584348f5cbbc783f569b561ec6b17d4ea639a18943d55391119887f548e62119a674e8a501cadce103744ec94230b588c54fa37c167a35200f57fb7066f52d9aa44c9a65fbf0a13c7be730d61da249f5433e00a5b707333699bc162da072cf9ea121a647a355630e16e861431028f340c995787dd01bd836cbac4163c66691eca532fda45ee969055016008118bcb023cdc1d7a3db2deb5f44393489f70942efa9926441e1bb47b09cc40ba26fef37f70a009de3441167a07915f590965f22723b74d2283f38d3684492c2150ef2376a57b54c993c1b818f2fdbdf9d2e4a5d0b368a9f9c561311063763c9e25fc656117767d3c0aef6cb4c8b847b0cc10f9acf9a4b77171dad8481faf9cd9a64f5ab2743590ef4f71ae407c2cb403d5fefc6abe29e335be99e66e8a9d52c78ca07d2c550037438a6dbbc76bcef3f897e163d4d8c6a9d9239e00db09d1a4e535f67ca8df7b4bfc9d806380b16a2a7e18ab7d2de56ae9a2b4273a728e3bfa23da94b16c8779135214caa98c5f85280706997fa2fbdfbb6cd41c40d967e6a1dbff671ae39e21b08ed74ebd5fa07c21409b68af60109a8cd444f3ae3cc3f4191eb2f1047b9c763c24f7103539a9f4e53df8d6ae7deda27f4e0873eb86a0749b3b6b68bf130018bb0a59040e9a09742afe2d39e920c306c16607427511ecb4184eed4b8dbefe803d420b5a71b1342f3d7652574280b854ce710467d9ad7d10a9f4afb60c3903b6f1d31f5cc75684c1a7c426850885608e0af36f5ac602262dee807c879511dbab8b4acd85a5b0ad6b32f3c86e9d1e29642d33c835052af2ad7289cd361be941ff9e23061e4bb80c4462c5daba5ca2354c6d797f9ac823dbdf3066bbc5066bde859077f0b38256d2f6b86b50f599d14dd7844361b897f9b269eb68f47c691fbc93cd13750a8d0de960b0a1c38fedc181ee168d51ac52084e3c0f70ff19b55dc995505ea7ac0878f3313b12815cd89eebac58f3e836a1410e521fb20f5ee590fd04d5934f1ee4abfd78d1e1da3b2cb4c8612a9f4c0f0f97c900ce0729574679f74d036e88e4ca4f1172f95a81a3fb621361e406504f9376193301917c033c8b02e005a5dfd3cf8db09fba9824026c75a346a4a6a3ba5086560d70b6437215516c6b1d3685fbd8bd7f6357d1fb53b46a214ee3ecc76ae62cab53de42d6a94fa1db8137626eb8997a8007e3a8d36f6cc1ea679974a07fb55e5294ddc3682f20905b041f41408d8be83ce11f773fc8e4fabcf8f058344e4d6bbb45bb142eacf0a779e45ce70fa21fc9e0fa972bfdc528952a1a40bf3f6db6551781f6cc01a9b8f0c23c64b15d149030431ac6f98f7370ad35beacb9e36870eba601ef8345d549df8da5f7b9b1cfac4817be0d1e8f97778ff500cd0c76df4f041481f2ba9b293b0c1363411861a344870fd5489e6dc9cf45d999a99383ae5fe23ea4db2bba08b1de76c0d9c4c79627a52fea467e3f7743a888df0bd4cbda5a7a272392d13a69effc55bdaf3280522d472536360b72e19551bd078e895f4ef1f2daf14b51fed662ee0691693c1dc3e3faed2ae29c88ad9eb095a49365c900c44cbe18221c0e9605f35335368b747f01b4b48a3f2d8694e780ded6428764150bebd7922d37ac9c1a6858a57d6d10f69dd45cb4a7e41b3185e2e575177ff1c01a8f33485562660d870c3f9cf72ca09d518d60d9efb841f8eceda4207d4e2d8ba92d3e7beea170ec6c8107124c71da617c3baad9e95b95a94d41292f72270f0f66717c69cd3b1e3314f727ef8e96cd38473ca0a55439d23a50419b06a28ff420e29d98898e43c30ff93ef35e466534e982b445f49e8638edcd7d3f3cb8fa159c51ea0b9f15e7ccf829de17742ee9c4361e2ce2abb5396f45661785ead307df777bfc5343da4652ffb30c1955fa82ade769072da9069a424c7335b758a3490057c4b401681addafb9f64ec01e0b7864ed5650cf43d2c7574eb1120f0b053ec1f2d5fd4b086a4a43c91653d2167f89a39c5c0771c243b6abc6aef7ee8454f27b24e737c3d37cef12898890fc4e8a99a523890e45c55cd7e9a960ac154ea50c14c67e4aef66ec17d03c9505aa7a4db7156af9e6aa86a51c0d40851fdccded9eebf16a914dee70a9d19227194c673ae4e30e8f261b94abe587154b808e4bb3d8e2b8213272e538ed99bbadddf8e057192729243c629756554ab5f258508e12bf42b954f6d28ac8f43fdb62968f51fd4018ab47dee10e934dc83f0bec6b83e5d8db0c55fa8ba36768d205e4cec2d41fe8abf049e255c15cd54778300761aeaa30bde0bf8a1666ce7bcd2731b99b6df63e8e4102b98a902b43366b95e1175a4f39e8b05ea2621375afa79be00e1db432800d11b3df6139f177964ca2262b19be3c642cdb2c488ca263228f68b55fb902a2070785b14aed66d6beac0f6a14be6e7a8b12e82c91097a7ffc467a312abde2ff02ff44f27bd8dcbf6bf267868af50c3a67d9214bed2fc46846d71a9856e430f1f938f04b647494de38903ddc7075bddabb6b2c2e470514507fadaa4deb06b6c2f26119a1490da4bc786ec80be0e235d5b6a86bf78c1609f1ac04d9d6f6bf827d850c55a7e91eeb170bff9f60e83b365f8e401b2bf70dce0fcc643d552528420516657427f31c15ab96c9eb212383367006fb34e4390af3eeb87631c597692ad2081f0c5478ef43d01180cbfc8a80097599c86f65b2ae2a7f764fee37ba0ac645ff060181255f62037c3f665d5e6c961aaed4106a93ed5c4241eeea28f351bbff30e96a3145169e96ed5f4eb05939a118ab7e88dd7413b7d001b6bd0570a40d1b0161198576672842de0e8469431ce81e95a63f18ac8a2b07074f9ca323304a9f34919627138cc4b9908b2dbf1277c9c96868a13bface5442b3ff04184dc6b7bc233e7c2ee97cd615787f7875d3fbc06530834adef0e13c21f65933fbe7c30be5f7961c1ca12b4e8afada3a9b19e2ed1ab5bc5cc9d42cc28c4a50fce8ecd475e492b4213ea8cde60c5c88a4ac1d3f4917f48859e316ca2bf6d48e2afd2eac286e6ca6063efed31010945204e615587327d2e0430dfe2da7cef607915329f9836714fdd5644f60cf538cca56aac68b1387e4888a63de29e786b21cc41a0807b46fc34151e196de9a648e9ec07938fab5b7863a635ea8d59e312f26371f77edd3b40bc90a46b1dda06a8a8ea2d1c59e99df93b2c340794053441a8a8edd6ecd78cc928a83460bd7efba6eece7a10809e28c3e8f2db248a73d991028d63c05fbc573ddf0bf20041e64a47b0b67775dcd610d696443cd560a60f13e87c32db4be82ec06e79cad8e4d13684af6b86a5f927f78d84a89f75e78c6b062c6e2a9a37da5ceab041936eba49642979c9465a858f1701bdcbb4a8cb11fe6ef723bad413a22efedf45191c78ce384177e072bd6777286aefd5ccd1d5d5950cf089f2620dd2a405648086c89770d192c400b001b9b8f03549edbbc0221eb0bd2b8e2ed49afcb93c48137e6b3842d99ab7b4ac4adcdc62ac19568c6dde024474ffc0111381a7119d1ce4a56183640df5fbe11557f68c398f97020699aff33782da463ef2bb3ee203e8f02cb9856d31914063b22c0a4a2119d64e74d6a3a205fb9b8d5930ba3033f53c8085f9c3d73f114d9815bcf2740ca4a5c1ca28acb0e06628c58184cf2799573f6e1d7e49c23e3f26c7cc0273278c7108b704a60a723d1a82dff5a6a321494ed08eb782b574fd001e372dc99f9a49ff0dcb686b755bdf51ca18d5714ffe7ac523001b158100766a7f31efe9f25f53f66b405762bcef3d84acbf1a99b9b71d22698ebbd78886e6c3d2e3723fbcea3de76e4368f5266ec23bde72f9468a813b56ffd2e3a756413d695e4e718b57444645196039b7f5aaf6a0b937933bdfa1915277be7c5a17430191d4877c47ad0a7b488c9587909df25c83b0caab31ed8e6edc1e8a6fa47ae9280eed11572c83c1ed8e52dcd00001791c1b9f482825b34d3b9ad7af68d5bd8ae3fd40b9f5a69d094508c8411c43d027769edecb5f6bc8a130182149fccb38a399c516a3a967828df8a10367b7a96f204ec9ba90cfb50be0bab395af16628d9b84a3a3c1a37a5734751445203540009aa9709df8032084ddd93d213eea329e38e3815ada3cad01c90e8779c5c311196babd044296ec5f295cded531f0d30e6ec3b73ba7c2cb7a6e55f83094e980218e6846ed296733df181bc98faff6ef3d18c21036a16d3056bd9730efa0ca25f6e806a28b975833aa3270f63880bdc15b09ccfbda2ea23f419c281b799aca42a11a7a665f490c7dbf1a0ecc77afa3f8d53ce919a47393722c20fd5c99e3e3494dcaa830b20411a70b34c33d4441b928dc8a3a5ad38b15347105ad80a332c5d5246849ae299cb429064c25964bb0fef48167c46566b17a03ec0168f6864b0e8497967a7d15c455e2ba8fc44457948b46c452fd55caacdfac3235a80417ef47d5dd97096a7de422c50237df55d770003e51d280eee1946d74e855ad85cdb91a14c483252a270bc53d7d4c60fff37c6ea61b81ff79fa1237b8d28f456ea3ebb1cf4d8793a37e0d2e98d34912a386c56df8990fed504339efb94bcd3626456fa4e56e54eab6e7bac9c53cd1ac6eb99ffc69394297546bcc0542f811c966c89e89964e1e74d2e1ab39fd2864006d0aeebcb3c8f32d79ade525761e51bcbedd8ac374a04bd63f6c81c604d0756988893e3e66e36a86ce2f7c3b35e13e4ddcd0c34c28237aec4670a75ac2c47ff5b93ab489f7c01c3b447f825a9136b6dc3ad12ff53074aaedf4b141d17b55a78c058a0bace7cfb13d8ab506d6b978ddc4c7357449689323d9ea11516c2670797574276b61819bc5681c703df0928cc761b05a3c206efc0a7141dda9b38a3d6b8ec3a55263ddbfc01e906521a4b083ec73940d2cf5165881b5daac67e757669724bbcf6003d70e947b9f367ebc434ec457926603e504826e523f0afc441e8e8f06aa315631a4b8af56b381ad628cc7b3c02dfde6bde7722a83ec85b060a04bc3335f7d704ff57a8d86b3aa3603b4bdb22085a8b8275f00e798f631205b0d840ec65d12e00f44567f1149a9c2c3603cf715adba9ff31d5d46fe47ec59c5a969236c5ad6d7816dfdbd624806ca12b866919aeaa1d719de1359062c3eb288e6efb9567e8df5f5c4432dafcb1ccf25ef1f316e9c0b849310256b72051b819c3d1a717306ae51ca07e975fbe6e84a3fff4738bdaa1cade5139e861061fe5ef24c65327ce53a164363a2d8a29798ad16ceadfa7bd4d96bec7f5228ab479a42caa73a5f50f0fb647583af007140643e456f1ee50a3a13386eab1f06304244bd61e56495809a1176ed1db06259f560c630ce66c7c16daa7445bcffcaf35bdab80c0677d202c2e5c4390276e90d1aa1dfd1ceb25148e6045f3fc626c3cb3489083f5678dcb5f5427ac341074102055e1f2824e34f186968ca8499d501358fca520eebefde40bf8ff8939c6de790afbeec7b0bbd1a78aa1d8ec3191c29a6a8da2459caccd387490811eaa32da11b3e1dcc3f0a690411836086a691672dcfee454b47bdf53b1b6c16c679c48e0d973314048174d33ff993f394b713bc19ed80cd2308051e29f4e451e7363a60e583bc7658ac7e9ff2834fcedb8919e492bd549c52e70c194fe97eb4fe47550f4595654b692f597b764ed33e792cfc22d159f9b572379a882e678448b7514353bd574fa45825810fa886114ac7a75fff341a702784e537d8cb5badfb8e91dc8b4a45556eeb7ffcc694e3170732c35ad2643c41c63fe98c8b2df116f10c89f3651ae178236edecbd337daaab2a91cecbc83d56046b4d71063ac946537a7331749c6d788f996d0d8b6ee4e6ac952a562acbd323d850dd85ab0b3c596f510856eed716ad5f5807659514a1b0dcf67f973e1c15ed3062fa127c8ffce20379eef85e46bdd0fd8880927fe9416551174bb2b36b2413c26154cabb1f32b019d6903820b25cdb01ad7e043c7c49390511857c6d506423d3696ffcfc7b0e893bf529433469192afbc439220dabe551b0332a7767b8bbf6a92caa0291be7f079e7b10fa60a21ccf2cf704aabf2f25272da8305e42929cc48aaf863221f5b4ac0ba51aab13884c1f556b822dd6d035864019b1b3d388736ef0d89f312cf8635a70509992c985287cb1ad65b1d8fea86cfd18a041e3858792fe1d9404186999dabd55fdcfdc4bfb1823f16f722ade46a706e534b857704346c4372ff65c521d898cb3102b68a5a4cad7c21a35db3a948f37aef85e292b0b98bbee5918205ae8d3715dc49678a7d06ac7211da48462462e443fe4a0e2ed81c593b780641558403274936395adad2d86b12d23a3120b33032dfc3fbcc1636177ca0ddd5593fed0ce9a69f60471bd852a9fbd166d41d40b34d3b2a9a24750b96758f6bec93425ede3526184d88be265630d933909d7e483c07d98daf68138ad74abacb19830ffe5f6b73bff9fccd837cddaf08233977370fa2cc51124517b05f79956b10cc7b7bbe05c25b5ad7399c4072a93c3492224e8233921cb7c59214070c55ccbaef115bdc96d3b82f7a074004171a7cc66088f2a341e34c56289cac18b6bb7b32de77b5b69fc522f251644cb0a862ced0c8e03478f948f7959becb434b9939b0c887988393610c4199ac1273f142fc978e0242169351083fac9483fd6e79d5d69c2ee2e1eb1b346980cced006f4e97c15945f51f84f69f7a6180574a9c7390e9e023a8a6a08a042e20fc7056c6058afe47207035aaa8e320cb13963f49142b633cfc644274ac3519665f6ced81c43d46d7bcc17328737344b2cd9a22512ec52eeb69106e44fbf02ed57a45fa92baad0a72a9fb9c0105749261b140a11fe40b40e668119f6041a5074abf4f1653b39e6e027b5a776ac4120dcbdce134bc9ed62d1ae8f34b8d7f5bc2f22aaf0ae1e2f16c96624c4401198b354de2f0426f9961e796e59d47e99ea29cf1a81b38fbed7bd9b6feca6c87f8ddcf05463707474544023999044bdf8ddfc8434b33bcf45280d7cdc43293c5317ebb9ec9288785548cc69c0414cf60b81bb6ebd179b128f72004d88307df174e531e31f4f0da6958b20b0a43e6a4f79ebfe1c44e5459560dcb1a0862ceeee9c44fb73980b44d7e42781e4fee66ca38c241e2316f5a9528b6e48f6d6cdab89a58c962b46eaafad2bebdb076db42689e9e6637250f5c6c6d13dec3053e2ebbbb0b5863dfd35791a54833dd3f33a861c35f553ada2e7904724a8c90b84b0e9a6c5162507baee1a0816ac53d07914f4c78e450708c9af5d26b01dfb14a717001937fd1d968a1de7c972709e57734bf5f4e214b3c77486197f64bcd9e5095230d7c093e2289edccf51512f92254e6527326d6588c010021ed0e23c1eeadb16ebdee3efb772a2783c57c4903f1bf1c9e79695d61da268398159f02c606b516d334412b09e2e70ad431b76da6c11bbb1c9c3b49fa310de870550eb4a62289354df542277adc9299dea18296b8d06bd807c9c514dd50869d774e97c64871e60c022c102387ea59729a47aa50b2bd562d37a4bb20f54be2427cfc15ad28ecb96154c8f071f8229fdb3d1263ef8119ca9a3fcb5fc84de8fdbd57bd5f8b92e04645f91fb372e6f1579b352051a5896372e24c7300828e822322a3cec07e9abcee2157af27f02d737f37ceb41e4390df5529373b62210174ce699681879f7e23a3e784a76097c50ffb745d1fb99def5afdfa3e675e2f21c1fe27a269e6e90d6a58b6c2fcfa2648e69eec9fa2377d4bb36b8f27ddab5da44d22d218001f58caf017c7076d6b82e527b8e69c15b667d45d80103d62c5f1ec41998cfbeafebce81aaf8a08628d93c8bb1a844409d6e80334b7e3b15a80a50d36e524757b5088a07de3edbb860e62d7c3511e3d8f07eb9490069ffc6a3163a24d6acfd31b12bdb521b6e937c580919ec3156e165a255e88500bf4b9df194a8114800f4a6c5451b58f1daefcf034992e19ab877c50615877b788cfeb67328a4be1bcfd5f344a5221d78d8b83ffa7469865c18ea5d59957feafcc1c614a3c64d7d5d366395b6c39eaa95a87406aef15a161aba133e9b908bade9cff62e8f9232db4bf2904444f4f491a34c53430f41af1d3f4e7802cd2b0246fae876b6fcdec30dc2d593d861ad361a65f8b6637cf61dea08ccfa02ad72599af659b06560888fae7893bb4469853d62c49c4215835c7200aaf8531ef930143f51a6903b94ed9856f6ccf61920e27e43747a4c0fd691dd12cc54690a1df7cbefe56d65c2ce9cd8f4ba2822791cf3c90edb38fb27a367602de97743ed359617fa14cd11fa86de7ba4cd08a6446a800650690821f4c29755369b5cf514e09d5768fa2db6385088a4455610f0f3e8539bd2eb164fba84ee56213e2d20e05854e3a0e517754a27fc99f2057a09a75d79ab5d4f9a45407371a18f1eba8978699936e8dde988cd96b4082c782fb366ff36f07de3bf6feab2cb4505599895ac7157f0b23670ddffb10756910e7da33b1bc0e16d740460e10ec64a9cbb8a0bb834bd3fef1b69a7af2e3202f9fea638a4fce3124c24d3d15235ff86bf46c7340c7745ed850966dadcae4f6d689ed871091a0f9b74a91efe0d88c59fa089e4bfac8f6e3e34c1d339a3952afd687de0e0f3f85424b00abb66797737b2f738fb15522d0ade947a6ac509683b603192e3a4771a82f5441b8593ecdb6dd5eb3e1669200893d8fca3bf11ba551d4f109d122b6965fd2335d103c0536644a0612080173b91473b485700f360193883a77c34e70e5410cf49b67682b6a52028264d4682b0acc5167ac2947fc4e173efa3bd4ea2584052457051251d01c782a8fc856aa11535a0d4267543c607906425dadeac83a8849653b20795fa5ee9bda1519b962021f3c725117df9404d92bb2f22a157e601a36aab910d08ba8e2225abe0798d315fc76221e15e3d6422cbfc8713b1fd0ac8918ff630a5d0ae4f19396a95eb63b171b3be5f24e447f35c3851a31575cb62cd861ae9a7aeaca409c95a18e8c10efe048ce285d1c4919a2d8d7464138cc879ce47230ed608846f72398d26fca0dc0f8c5f3b89aebc85f7dd75be71a94ca9559a4f24ef0505b8984c2830fe19913e567787a5ae115408f77a7c8596c4b15f61b899d29b6c02d9e03893376f8cd03806ebb3e3d547cd5eb9202b59f43acf3a179581f61ebaad70cef1e06164d503208541d50e3fabfc89e74954c0b032f870384e67be4d588a3b27595dc2e8569ec5d2854acbf3cb75f214edd2312286576999695281a88d26dfb10203194114ea33d22c4dd580af4ef5aa85711fb958dffe835275d44d14f3914d0123f0f54c63b98e24b77ff0e35f1bba421a5ae5c7bfc1ad958fc9d410b193813435221651f02cba8ef0035f10198b98e532dddab9f8d0bb15d9c49d37f4104bcd225ff6f8b3f86b5de6b446d947eafdade3507267220b7e85c0424ec4abfb628f66f00de42a0942ceb2398fefa70b9eef2134ba385cf4f701f784d872070c723d6ba9bbd7e2193420b47ec061eb22770e79d1fb006d36a159fbae54491f514eb6590e1a747d1ca47cb3cdfcca5b8e09cc1044d65b85fc06955aafc902509f6b19fbb17674ce4f6bdef69cccf40e9abe046aee70f5e841926125d9bbe5f63e0f731f5e55ab2c331f9ad879df311ebe3701b53bc75cdd7345cff197bf1099970b6f3ee8474eacfd55089fc685840e07a380b4713efd6cebceec0d8e37157097e70c9029f8654233dc36e4704bfc0ed2821331fd37fb0ddf8254df02e9d7b98bc3268fadf14017b0b0a97a793e782e64af753e484fa564514d9fa0b6b3b44e8be86636afffd6d32dfc41c96e862d50fe1eac4f1c5c6c6cb7c21b97ba48c70ebb45c0b57bfedd005d369c5419671a6d120fafedd5a72b488642f233896fb81660ee89649f7cff1c4b159993b4fb971023e498b56503726344efe15ea3790d33d8bc6554d7e328ba3696a06056f08fcc179e9890e5a39912162feedf85d74d93c2daef83595e34fcc531a52ae9ff02677a1fef88de9cddb9a59689c36c3542d9943d157c56154e55794ac12ccd866ffbfe736a4d14caeb40248e77fec7f9a7734570f2434eecb92271755d55e97f79ee24c67fc5bd4e05fd05f508a026be3af1ffbd043485aa83415481b308ea6935a5644404cff0b314b2e04ebec7232da12a8627c4c729d2591da2ef8ff639d3f921190cef49f852f23823f1e3a7a91e1831ad104578a693697a168ecbea03611528141ed84c3a690a43e2cddff1a2101f5dca2c7da5ab7ecabc3af3d1d29ef141af9584a52f96fc1ffd9c4263e836d99e3d53dfed0f8b50fa22de2c6e0fd4515374ddef17542e92a244dbb582d541f5141160267f77a567f32d545c7e841105f6be885c668f68533720bfebd82eb685418553a14ea533b4ba7c0852769e8e9963f1369874bdc2ded4e4700f921d5c81bc45baa350f7755df745d93d8f54cdc62dc6caab4fba6717e7865d39a1c107df714e89169daaab6f99925f365b897f8c00b59d38bfa1d4944cf08629ea4384e409a0a0edd634e197492e8cb3ff765a05ffe8a6cff33d530da7e423e7450ba8f8d97f5d4703f696596bc7ef2cc53835346efcec9c996896c8f5913561bfdf8b2034531592f5ff7148756ad9806d1c4d56d788302f74df0e74add8fc209ead1afdb874cc6ef20ad3782c5296b25f17d8f9b6723264a2b0d5af1e0961559ba5c1bd4e851d48a464735e6502920638a893faab56420084a3e204e967d974eef21b34ada07533adc4f3b95303b76940e8c028d2ce6dc4f747c63f8667c088cb6b11</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请输入密码……">请输入密码……</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>最短路</tag>
        <tag>S2OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>S2OJ #1541. 单调栈 题解</title>
    <url>/solutions/solution-se1541/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这个密码好像不太正确呢……" data-whm="这篇文章的哈希貌似出现了一点问题，但是您仍然可以看到解密之后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="e01a5bd9bdcf18c6952aa36dcc01ed908a84b17588d15b8dd8976b9ec0a4fb7c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请输入密码……">请输入密码……</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>建图</tag>
        <tag>S2OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>S2OJ #1550. 假冒泡排序 题解</title>
    <url>/solutions/solution-se1550/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这个密码好像不太正确呢……" data-whm="这篇文章的哈希貌似出现了一点问题，但是您仍然可以看到解密之后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="2906a63b5ce81782a1c975eba1cd545906a07897f6cd20f59e3c13154ca7b7fe"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请输入密码……">请输入密码……</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>S2OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>S2OJ #1586. 口粮输送 题解</title>
    <url>/solutions/solution-se1586/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这个密码好像不太正确呢……" data-whm="这篇文章的哈希貌似出现了一点问题，但是您仍然可以看到解密之后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="8fefa4457ab2a0045b3ac5d04fdcff988ae025d7fa02e2e14c281b3ced4c5b1a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请输入密码……">请输入密码……</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>最小生成树</tag>
        <tag>S2OJ</tag>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title>S2OJ #636. 购物 题解</title>
    <url>/solutions/solution-se636/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这个密码好像不太正确呢……" data-whm="这篇文章的哈希貌似出现了一点问题，但是您仍然可以看到解密之后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="81f329c63d1de01685aebfdc05d1f122852fd37e2b375aa1eb8f9bd5d78e65b8"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请输入密码……">请输入密码……</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>贪心</tag>
        <tag>S2OJ</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
</search>
